open Core_kernel
open Middle
open Ast
open Fmt

let unwrap_num_exn m e =
  let e = Ast_to_Mir.trans_expr e in
  let m = Map.Poly.map m ~f:Ast_to_Mir.trans_expr in
  let e = Analysis_and_optimization.Mir_utils.subst_expr m e in
  let e = Analysis_and_optimization.Partial_evaluator.eval_expr e in
  match e.expr with
  | Lit (_, s) -> Float.of_string s
  | _ -> raise_s [%sexp ("Cannot convert size to number." : string)]

let unwrap_int_exn m e = Int.of_float (unwrap_num_exn m e)

let gen_num_int m t =
  let def_low, diff = (2, 4) in
  let low, up =
    match t with
    | Lower e -> (unwrap_int_exn m e, unwrap_int_exn m e + diff)
    | Upper e -> (unwrap_int_exn m e - diff, unwrap_int_exn m e)
    | LowerUpper (e1, e2) -> (unwrap_int_exn m e1, unwrap_int_exn m e2)
    | _ -> (def_low, def_low + diff)
  in
  Random.int (up - low + 1) + low

let gen_num_real m t =
  let def_low, diff = (2., 5.) in
  let low, up =
    match t with
    | Lower e -> (unwrap_num_exn m e, unwrap_num_exn m e +. diff)
    | Upper e -> (unwrap_num_exn m e -. diff, unwrap_num_exn m e)
    | LowerUpper (e1, e2) -> (unwrap_num_exn m e1, unwrap_num_exn m e2)
    | _ -> (def_low, def_low +. diff)
  in
  Random.float_range low up

let rec repeat n e =
  match n with n when n <= 0 -> [] | m -> e :: repeat (m - 1) e

let rec repeat_th n f =
  match n with n when n <= 0 -> [] | m -> f () :: repeat_th (m - 1) f

let wrap_int n =
  { expr= IntNumeral (Int.to_string n)
  ; emeta= {loc= no_span; ad_level= DataOnly; type_= UInt} }

let int_two = wrap_int 2

let wrap_real r =
  { expr= RealNumeral (Float.to_string r)
  ; emeta= {loc= no_span; ad_level= DataOnly; type_= UReal} }

let wrap_row_vector l =
  { expr= RowVectorExpr l
  ; emeta= {loc= no_span; ad_level= DataOnly; type_= URowVector} }

let wrap_vector l =
  { expr= PostfixOp (wrap_row_vector l, Transpose)
  ; emeta= {loc= no_span; ad_level= DataOnly; type_= UVector} }

let gen_int m t = wrap_int (gen_num_int m t)
let gen_real m t = wrap_real (gen_num_real m t)

let gen_row_vector m n t =
  { expr= RowVectorExpr (repeat_th n (fun _ -> gen_real m t))
  ; emeta= {loc= no_span; ad_level= DataOnly; type_= UMatrix} }

let gen_vector m n t =
  let gen_ordered n =
    let l = repeat_th n (fun _ -> Random.float 1.) in
    let l =
      List.fold (List.tl_exn l) ~init:[List.hd_exn l] ~f:(fun accum elt ->
          (Float.exp elt +. List.hd_exn accum) :: accum )
    in
    l
  in
  match t with
  | Simplex ->
      let l = repeat_th n (fun _ -> Random.float 1.) in
      let sum = List.fold l ~init:0. ~f:(fun accum elt -> accum +. elt) in
      let l = List.map l ~f:(fun x -> x /. sum) in
      wrap_vector (List.map ~f:wrap_real l)
  | Ordered ->
      let l = gen_ordered n in
      let halfmax =
        Option.value_exn (List.max_elt l ~compare:compare_float) /. 2.
      in
      let l = List.map l ~f:(fun x -> (x -. halfmax) /. halfmax) in
      wrap_vector (List.map ~f:wrap_real l)
  | PositiveOrdered ->
      let l = gen_ordered n in
      let max = Option.value_exn (List.max_elt l ~compare:compare_float) in
      let l = List.map l ~f:(fun x -> x /. max) in
      wrap_vector (List.map ~f:wrap_real l)
  | UnitVector ->
      let l = repeat_th n (fun _ -> Random.float 1.) in
      let sum =
        Float.sqrt
          (List.fold l ~init:0. ~f:(fun accum elt -> accum +. (elt ** 2.)))
      in
      let l = List.map l ~f:(fun x -> x /. sum) in
      wrap_vector (List.map ~f:wrap_real l)
  | _ -> {int_two with expr= PostfixOp (gen_row_vector m n t, Transpose)}

let gen_identity_matrix n m =
  { int_two with
    expr=
      RowVectorExpr
        (List.map
           (List.range 1 (n + 1))
           ~f:(fun k ->
             wrap_row_vector
               (List.map ~f:wrap_real
                  ( repeat (min (k - 1) m) 0.
                  @ (if k <= m then [1.0] else [])
                  @ repeat (m - k) 0. )) )) }

let gen_matrix mm n m t =
  match t with
  | CholeskyCorr | CholeskyCov | Correlation | Covariance ->
      gen_identity_matrix n m
  | _ ->
      { int_two with
        expr= RowVectorExpr (repeat_th n (fun () -> gen_row_vector mm m t)) }

(* TODO: do some proper random generation of these special matrices *)

let gen_array elt n _ = {int_two with expr= ArrayExpr (repeat_th n elt)}

let rec generate_value m st t =
  match st with
  | SInt -> gen_int m t
  | SReal -> gen_real m t
  | SVector e -> gen_vector m (unwrap_int_exn m e) t
  | SRowVector e -> gen_row_vector m (unwrap_int_exn m e) t
  | SMatrix (e1, e2) ->
      gen_matrix m (unwrap_int_exn m e1) (unwrap_int_exn m e2) t
  | SArray (st, e) ->
      let element () = generate_value m st t in
      gen_array element (unwrap_int_exn m e) t

let rec flatten e =
  let flatten_expr_list l =
    List.fold (List.map ~f:flatten l) ~init:[] ~f:(fun vals new_vals ->
        new_vals @ vals )
  in
  match e.expr with
  | PostfixOp (e, Transpose) -> flatten e
  | IntNumeral s -> [s]
  | RealNumeral s -> [s]
  | ArrayExpr l -> flatten_expr_list l
  | RowVectorExpr l -> flatten_expr_list l
  | _ -> failwith "This should never happen."

let rec dims e =
  let list_dims l = if List.length l = 0 then [] else Int.to_string (List.length l) :: dims (List.hd_exn l) in
  match e.expr with
  | PostfixOp (e, Transpose) -> dims e
  | IntNumeral _ -> []
  | RealNumeral _ -> []
  | ArrayExpr l -> list_dims l
  | RowVectorExpr l -> list_dims l
  | _ -> failwith "This should never happen."

let rec print_value_r e =
  let expr = e.expr in
  let print_container e =
    let vals, dims = (flatten e, dims e) in
    let flattened_str = "c(" ^ String.concat ~sep:", " vals ^ ")" in
    if List.length dims <= 1 then flattened_str
    else
      "structure(" ^ flattened_str ^ ", .Dim=" ^ "c("
      ^ String.concat ~sep:", " dims
      ^ ")" ^ ")"
  in
  match expr with
  | PostfixOp (e, Transpose) -> print_value_r e
  | IntNumeral s -> s
  | RealNumeral s -> s
  | ArrayExpr _ -> print_container e
  | RowVectorExpr _ -> print_container e
  | _ -> failwith "This should never happen."

let var_decl_id d =
  match d.stmt with
  | VarDecl {identifier; _} -> identifier.name
  | _ -> failwith "This should never happen."

let var_decl_gen_val m d =
  match d.stmt with
  | VarDecl {sizedtype; transformation; _} ->
      generate_value m sizedtype transformation
  | _ -> failwith "This should never happen."

let print_data_prog s =
  let data = Option.value ~default:[] s.datablock in
  let l, _ =
    List.fold data ~init:([], Map.Poly.empty) ~f:(fun (l, m) decl ->
        let value = var_decl_gen_val m decl in
        ( l @ [var_decl_id decl ^ " <- " ^ print_value_r value]
        , Map.set m ~key:(var_decl_id decl) ~data:value ) )
  in
  String.concat ~sep:"\n" l

(* ---- TESTS ---- *)

let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|       data {
                  int<lower=7> K;
                  int<lower=1> D;
                  int<lower=0> N;
                  int<lower=0,upper=1> y[N,D];
                  vector[K] x[N];
                    }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "K <- 11\
      \nD <- 3\
      \nN <- 3\
      \ny <- structure(c(0, 1, 1, 0, 1, 1, 0, 0, 1), .Dim=c(3, 3))\
      \nx <- structure(c(3.3282621325833865, 2.56799363086151, 4.0759938356540726, 3.604405750889411, 6.0288479433993629, 3.543689144366625, 4.1465170437036338, 5.8799711085519224, 4.521098476935741, 2.2826025797056464, 5.3116509882058738, 3.7482903006745985, 5.508750812969728, 3.7780489469949972, 2.1600852257225154, 3.9660375311552749, 5.3741223139973622, 3.6598286733521297, 6.0158175418085342, 4.5701258402582194, 2.6451502425447266, 3.2425011320285027, 3.5720962307677091, 5.7213345511646363, 4.0319385317762162, 2.3295401414257744, 3.8281495864625956, 4.869813970717308, 3.7293083759369448, 6.97070615398329, 4.1512076186352216, 4.1949090422787174, 6.8138349711922652), .Dim=c(3, 11))" |}]

let%expect_test "data generation check" =
  let expr =
    generate_value Map.Poly.empty
      (SArray (SArray (SInt, wrap_int 3), wrap_int 4))
      Identity
  in
  let str = print_value_r expr in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
      "structure(c(6, 4, 5, 2, 5, 5, 4, 5, 6, 5, 3, 2), .Dim=c(4, 3))" |}]

let%expect_test "data generation check" =
  let expr =
    generate_value Map.Poly.empty
      (SArray (SArray (SArray (SInt, wrap_int 5), wrap_int 2), wrap_int 4))
      Identity
  in
  let str = print_value_r expr in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
      "structure(c(6, 4, 5, 2, 5, 5, 4, 5, 6, 5, 3, 2, 3, 2, 3, 5, 2, 3, 2, 3, 2, 4, 3, 6, 5, 2, 4, 3, 2, 2, 5, 3, 5, 6, 2, 5, 4, 6, 4, 5), .Dim=c(4, 2, 5))" |}]

let%expect_test "data generation check" =
  let expr =
    generate_value Map.Poly.empty (SMatrix (wrap_int 3, wrap_int 4)) Identity
  in
  let str = print_value_r expr in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
      "structure(c(4.1815278199399577, 6.8017664359959342, 4.8441784126802627, 4.25312636944623, 5.2015419032442969, 2.7103944900448411, 3.3282621325833865, 2.56799363086151, 4.0759938356540726, 3.604405750889411, 6.0288479433993629, 3.543689144366625), .Dim=c(3, 4))" |}]

let%expect_test "data generation check" =
  let expr = generate_value Map.Poly.empty (SVector (wrap_int 3)) Identity in
  let str = print_value_r expr in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
      "c(4.1815278199399577, 6.8017664359959342, 4.8441784126802627)" |}]

let%expect_test "data generation check" =
  let expr =
    generate_value Map.Poly.empty
      (SArray (SVector (wrap_int 3), wrap_int 4))
      Identity
  in
  let str = print_value_r expr in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
      "structure(c(4.1815278199399577, 6.8017664359959342, 4.8441784126802627, 4.25312636944623, 5.2015419032442969, 2.7103944900448411, 3.3282621325833865, 2.56799363086151, 4.0759938356540726, 3.604405750889411, 6.0288479433993629, 3.543689144366625), .Dim=c(4, 3))" |}]

let%expect_test "data generation check" =
  let expr = generate_value Map.Poly.empty (SVector (wrap_int 3)) Simplex in
  let str = print_value_r expr in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
      "c(0.22198258835220422, 0.48860644012069177, 0.289410971527104)" |}]

let%expect_test "data generation check" =
  let expr = generate_value Map.Poly.empty (SVector (wrap_int 3)) UnitVector in
  let str = print_value_r expr in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
      "c(0.36406675257322474, 0.80134825556167411, 0.47465395076734407)" |}]

let%expect_test "data generation check" =
  let expr = generate_value Map.Poly.empty (SVector (wrap_int 30)) Ordered in
  let str = print_value_r expr in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
      "c(-0.96832729385188365, -0.91004897647537208, -0.855488426712053, -0.8070719147445744, -0.73591866262419769, -0.64090940155884812, -0.58159948031027586, -0.498033598356894, -0.43497790423044719, -0.39103777937151057, -0.33030882131474781, -0.24446230343719536, -0.18409371422459761, -0.10156543104346247, -0.05653532094436739, 0.013923649350849741, 0.10638632763557807, 0.17175965077143784, 0.22970780349821893, 0.32496498924437173, 0.38362111488017359, 0.44807884297139466, 0.49575395920660592, 0.55125841432324352, 0.60031084605608087, 0.68104157187272929, 0.74782374244229277, 0.82298579970312025, 0.93416731632648975, 1.)" |}]

let%expect_test "data generation check" =
  let expr =
    generate_value Map.Poly.empty (SVector (wrap_int 30)) PositiveOrdered
  in
  let str = print_value_r expr in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
      "c(0.0158363530740582, 0.044975511762313986, 0.072255786643973488, 0.096464042627712757, 0.13204066868790115, 0.17954529922057594, 0.20920025984486204, 0.250983200821553, 0.28251104788477643, 0.30448111031424469, 0.33484558934262609, 0.37776884828140234, 0.40795314288770118, 0.44921728447826875, 0.47173233952781629, 0.50696182467542483, 0.553193163817789, 0.58587982538571892, 0.61485390174910948, 0.66248249462218589, 0.69181055744008679, 0.72403942148569733, 0.7478769796033029, 0.77562920716162176, 0.80015542302804044, 0.84052078593636459, 0.87391187122114644, 0.91149289985156012, 0.96708365816324482, 1.)" |}]

let%expect_test "data generation check" =
  let expr =
    generate_value Map.Poly.empty
      (SMatrix (wrap_int 4, wrap_int 2))
      Correlation
  in
  print_s [%sexp (expr : typed_expression)] ;
  [%expect
    {|
      ((expr
        (RowVectorExpr
         (((expr
            (RowVectorExpr
             (((expr (RealNumeral 1.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal))))
              ((expr (RealNumeral 0.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal)))))))
           (emeta ((loc <opaque>) (ad_level DataOnly) (type_ URowVector))))
          ((expr
            (RowVectorExpr
             (((expr (RealNumeral 0.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal))))
              ((expr (RealNumeral 1.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal)))))))
           (emeta ((loc <opaque>) (ad_level DataOnly) (type_ URowVector))))
          ((expr
            (RowVectorExpr
             (((expr (RealNumeral 0.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal))))
              ((expr (RealNumeral 0.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal)))))))
           (emeta ((loc <opaque>) (ad_level DataOnly) (type_ URowVector))))
          ((expr
            (RowVectorExpr
             (((expr (RealNumeral 0.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal))))
              ((expr (RealNumeral 0.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal)))))))
           (emeta ((loc <opaque>) (ad_level DataOnly) (type_ URowVector)))))))
       (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UInt)))) |}]

let%expect_test "data generation check" =
  let expr =
    generate_value Map.Poly.empty
      (SMatrix (wrap_int 2, wrap_int 2))
      Correlation
  in
  print_s [%sexp (expr : typed_expression)] ;
  [%expect
    {|
      ((expr
        (RowVectorExpr
         (((expr
            (RowVectorExpr
             (((expr (RealNumeral 1.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal))))
              ((expr (RealNumeral 0.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal)))))))
           (emeta ((loc <opaque>) (ad_level DataOnly) (type_ URowVector))))
          ((expr
            (RowVectorExpr
             (((expr (RealNumeral 0.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal))))
              ((expr (RealNumeral 1.))
               (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UReal)))))))
           (emeta ((loc <opaque>) (ad_level DataOnly) (type_ URowVector)))))))
       (emeta ((loc <opaque>) (ad_level DataOnly) (type_ UInt)))) |}]

let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|       data {
                  int<lower=2, upper=4> K;
                  int<lower=K, upper=K> D;
                  vector[K - 1] x;
                  vector[K * D] y;
                  vector[K ? D : K] z;
                  vector[K ? D : K] w[(D + 2 == K) + 3];
                }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "K <- 2\
      \nD <- 2\
      \nx <- c(6.8017664359959342)\
      \ny <- c(4.8441784126802627, 4.25312636944623, 5.2015419032442969, 2.7103944900448411)\
      \nz <- c(3.3282621325833865, 2.56799363086151)\
      \nw <- structure(c(4.0759938356540726, 3.604405750889411, 6.0288479433993629, 3.543689144366625, 4.1465170437036338, 5.8799711085519224), .Dim=c(3, 2))" |}]

let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|
        data {
          corr_matrix[5] d;
          cov_matrix[4] e;
          cholesky_factor_cov[4] f;
          cholesky_factor_corr[4] g;
          unit_vector[4] h;
          simplex[12] i;
          ordered[2] j;
          positive_ordered[4] k;
          cholesky_factor_cov[5, 4] l;
        }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "d <- structure(c(1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.), .Dim=c(5, 5))\
      \ne <- structure(c(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(4, 4))\
      \nf <- structure(c(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(4, 4))\
      \ng <- structure(c(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(4, 4))\
      \nh <- c(0.3407724101929635, 0.75007501926931519, 0.44428382890598478, 0.35195668667046631)\
      \ni <- c(0.13400440686830675, 0.029734420213118219, 0.055596017363414456, 0.023774060096306261, 0.086893231766599, 0.0671543423517797, 0.16863230135165055, 0.064612975382352431, 0.089845065898632351, 0.16240088144427856, 0.10552362463724606, 0.011828672626315713)\
      \nj <- c(-0.69448357871239441, 1.)\
      \nk <- c(0.080739544327963347, 0.29275587806614473, 0.58578033077923275, 1.)\
      \nl <- structure(c(0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(5, 4))" |}]

let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|
        data {
          int<lower=0> N;
          int<lower=0> M;
          int<lower=0, upper=N * M> K;
          int<upper=N> d_int_1d_ar[N];
          int<upper=N> d_int_3d_ar[N, M, K];
          real<lower=-2.0, upper=2.0> J;
          real d_real_1d_ar[N];
          real d_real_3d_ar[N, M, K];
          vector[N] d_vec;
          vector[N] d_1d_vec[N];
          vector[N] d_3d_vec[N, M, K];
          row_vector[N] d_row_vec;
          row_vector[N] d_1d_row_vec[N];
          row_vector[N] d_3d_row_vec[N, M, K];
          matrix<lower=0, upper=1>[2, 3] d_ar_mat[4, 5];
          simplex[N] d_simplex;
          simplex[N] d_1d_simplex[N];
          simplex[N] d_3d_simplex[N, M, K];
          cholesky_factor_cov[5, 4] d_cfcov_54;
          cholesky_factor_cov[3] d_cfcov_33;
          cholesky_factor_cov[3] d_cfcov_33_ar[K];
        }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "N <- 4\
      \nM <- 2\
      \nK <- 7\
      \nd_int_1d_ar <- c(0, 3, 3, 2)\
      \nd_int_3d_ar <- structure(c(3, 4, 3, 1, 0, 1, 0, 1, 3, 0, 1, 0, 1, 0, 2, 1, 4, 3, 0, 2, 1, 0, 0, 3, 1, 3, 4, 0, 3, 2, 4, 2, 3, 3, 0, 0, 4, 0, 4, 3, 3, 1, 0, 0, 1, 4, 4, 4, 1, 1, 4, 3, 4, 3, 2, 4), .Dim=c(4, 2, 7))\
      \nJ <- -0.78944561605934793\
      \nd_real_1d_ar <- c(4.4586847720929885, 6.8370129036435987, 4.3460425592300558, 4.236079038093524)\
      \nd_real_3d_ar <- structure(c(5.57044330532775, 4.40297013632479, 5.2035177758092388, 3.1623346367349097, 3.4500969860630439, 5.1662487893296616, 3.5251037024209229, 6.8837471630942284, 2.4696248704656862, 2.5406894285649768, 4.1075890325414175, 3.9882348168417239, 6.8358515530953241, 2.1034306247417267, 3.6305348739015484, 3.1670252023532717, 6.7650348033745171, 2.458985190453927, 6.1886202711890146, 6.3643316537983523, 6.0139570600649668, 5.2585335695478372, 4.1851623468667576, 3.8377391029120798, 3.1146898548382422, 5.7727253701330188, 5.74664469571191, 6.3650140932056249, 6.8625502860232208, 6.412493326241524, 4.3748899342809366, 5.9910709600237748, 2.8796096744156738, 3.2564617894824908, 4.346001743072387, 2.1414241774455447, 3.7764016096327286, 3.1042497854672586, 2.1728787126883411, 2.1421162288877871, 5.0453437529043681, 6.052290133085247, 5.6530843520324483, 6.605130516488142, 5.0933880150575055, 6.8639193501989162, 4.8197393487799083, 3.3469665202828147, 4.1567597052953822, 6.77455682541709, 2.6450189878523016, 4.4118916569083586, 6.17692542811026, 5.7463829385833591, 5.0502877793456644, 6.3568364526211569), .Dim=c(4, 2, 7))\
      \nd_vec <- c(3.3825568676999715, 2.2112320377163437, 4.8613991672433681, 2.842716967310944)\
      \nd_1d_vec <- structure(c(5.4967123428108149, 4.2772341138873067, 4.603481309642774, 6.3771486836377447, 5.3142181755352409, 5.8239156043890929, 2.8051369719373973, 5.8416328677479248, 5.75313114581841, 6.2967028569417751, 2.0391695990258567, 4.5354792261141972, 5.3362618735767384, 4.5914844685002709, 3.9516037643711441, 5.8665642656289823), .Dim=c(4, 4))\
      \nd_3d_vec <- structure(c(2.6353763729831874, 6.6969052330141805, 5.4675539734293714, 3.8242527933689212, 2.7557818037375283, 6.7374209785557344, 4.0611382125461706, 2.1301631873459268, 3.2634565961879569, 4.7313465806729482, 4.5581681755376691, 5.4489426141401722, 3.195532597445859, 2.8468796823813753, 5.6780740968464736, 6.5866332699020509, 4.9305975781284221, 6.0663979887224926, 6.3430480959570881, 6.7134127613770644, 2.3689715820447663, 2.5587968686913358, 4.1604361823762837, 6.6116329474986, 6.5830863663924095, 5.5817072590094341, 2.5678796297961584, 4.48644631105988, 3.920509409933266, 4.8035855158639933, 2.032753266529765, 3.44073823598296, 3.0911196597724961, 5.1281157664990227, 5.8643549395764119, 6.6446008839119006, 5.5420584973249847, 2.0008765918110902, 3.0438387931497806, 3.4326928072241838, 2.1915493707904767, 6.0648569720132155, 2.5592196753676548, 2.7805033559660237, 6.06460593440673, 3.4183189411368069, 4.0767716033158834, 5.1952921358441477, 4.8379429424741227, 5.50449411076206, 4.5092183575265024, 3.2321467550995142, 5.6129743262428278, 6.2283764421777645, 2.3760824507211504, 4.6095278364784447, 6.9723718754128168, 3.3915817456957349, 5.4839654812514533, 5.5374865422223145, 2.6738023694192297, 2.779987624423983, 2.9977267737883393, 5.0925194107367595, 3.9770560845546439, 2.7433955916253576, 4.3168094489286251, 5.9037636506043745, 5.0111708946568179, 2.8576722240943773, 2.9922185548909956, 3.9631658060383339, 5.7384258294822441, 6.9677744394260461, 5.3753926219052985, 3.6158167801171341, 5.2333472124410285, 3.9659177393507976, 4.0961267254379994, 6.5051463128297273, 4.0879544136952894, 2.1647756248449643, 3.5839787411437296, 2.9165824358475314, 2.1616758648152858, 3.5272750679862259, 2.6112728309595807, 6.1927033714024837, 4.3563353153059516, 3.5018637345617281, 6.572671427738964, 6.8917467516924589, 4.7898523120306464, 4.0600024635990275, 3.98950567693723, 6.3945542521857748, 5.265005396771361, 5.6281940257385816, 6.9033227121235781, 4.0205204960701506, 2.0591547264718466, 2.0369210229209154, 4.2334309983874352, 4.9239735061382133, 2.0322436872773642, 4.88006454563493, 6.0330024544790373, 2.8004338055820144, 4.6810852530205684, 4.1058280414201116, 6.9222014365470823, 5.0826678223080339, 5.2717019072050988, 4.0523813833999158, 5.3804006786221592, 5.3123300934333582, 4.2428114734734317, 5.3597848997812569, 2.5168562771809309, 2.800085736267008, 3.1770949492436795, 3.081734276320848, 4.8058030838356434, 6.9769319083494956, 5.2472259234134953, 3.1496816302966533, 5.1908850416778813, 4.3267831514619184, 3.6505184614386934, 6.5012610937369075, 4.02174411212451, 5.0051725462417149, 2.0065661568893631, 5.4749005932732011, 4.2126133176962464, 4.6999026086186237, 4.1648450790514984, 6.595992521557549, 2.50612480168045, 6.3727719067219635, 2.8894910165285017, 2.3401196405310771, 3.3164123628021085, 2.7463467732436149, 5.6280870799844429, 4.4199340938227678, 6.052023950534501, 2.0971511554021931, 3.179916305638534, 2.5723669841481698, 3.7955076601527784, 6.8042708287731131, 5.92158428245417, 4.5535284082830643, 5.1627880257526506, 6.8497844596389257, 2.2913654572703033, 4.1851173088339912, 3.8754168444668471, 3.168385165512114, 6.100895266639677, 4.0884592234108919, 2.4057777684783912, 2.0418412245782593, 4.7441972292445236, 4.7464208706918729, 2.73643403807807, 3.9309988982761679, 5.9477372586830288, 2.26829551243563, 4.3386681400977078, 3.4333394780719013, 4.702426634653893, 2.8767568595754462, 4.5567773831332481, 6.8183142685010436, 2.4514697569243715, 3.2830536371663457, 2.4738882344228079, 5.7568324337211552, 2.9140336296202443, 2.9986423051915594, 2.8765977471128314, 4.3510846465647059, 4.7350287039197072, 4.8173569752400862, 6.347650491831903, 4.5541057089359729, 2.4998861456320824, 4.1920780958283839, 6.062589935923512, 5.6255730221608236, 4.82918566204204, 6.5029179184040755, 6.0231547748766117, 3.4768567035792688, 5.1935974954271416, 5.37842240581935, 4.3769145302616668, 5.1585551647324337, 4.0584642052999289, 2.1415257702526764, 5.867260922588807, 4.0841335387643607, 2.626042406960722, 2.163840575586196, 6.7062673415397089, 6.86144835351259, 6.3294239265315415, 2.1095443270183729, 4.46861472716532, 6.100873590286767, 5.72035073668568, 4.42935091368461, 3.3861486518053012, 4.2407773842221692, 3.6593298526092903, 6.8669830405466294, 4.232575433263416, 6.1470227583401895, 4.5046064597137541, 2.7468004009376825, 5.0702367739094623, 5.604990259127975), .Dim=c(4, 2, 7, 4))\
      \nd_row_vec <- c(3.7684980132831463, 5.1150184511094974, 4.6123654747805833, 3.3660815146373855)\
      \nd_1d_row_vec <- structure(c(6.8898931786220663, 5.6289928365227553, 5.0850809209546171, 5.5097062488318524, 2.808735627015468, 4.4663289543528331, 5.0921119283315193, 4.1984472442497225, 2.168318684989615, 5.6291745871830212, 2.1662464863982529, 5.4516474490108564, 6.6837459602289355, 3.5700942236412034, 4.9720895821214786, 5.3371651811589107), .Dim=c(4, 4))\
      \nd_3d_row_vec <- structure(c(6.9044805965844755, 5.1832604282498131, 2.0346173069604268, 2.7406002680368058, 6.6975819517982584, 2.6682647794607366, 2.3467761270351231, 6.3570519013362361, 6.3443112931557151, 2.3843807585017691, 6.9652924647355565, 3.2676637198941121, 5.1152461884297793, 6.2519236870101533, 4.9317697147439894, 5.8345952488918522, 5.526799539768338, 4.2564991942137382, 3.6651999281036938, 2.1473726406125793, 6.0694740366804423, 3.7012001893459257, 5.5093013993585691, 4.4256654761812637, 4.2885623937734, 3.7771260737948817, 5.4245876762432808, 3.1228622166484863, 5.6950629884560842, 3.3748268200412244, 6.5036003859400626, 6.0265583056725518, 5.8627185609418726, 6.2890779654726057, 5.7424851181097107, 3.8027173304040214, 3.0416323583701486, 5.2916344209439874, 4.62642817895356, 5.6016964993377485, 4.1535618979519313, 5.9945524102347436, 3.4517002611945919, 5.7329430691501662, 5.0847735071758393, 3.0931162895926514, 4.51424313166067, 5.0902820491920515, 4.2222032984087168, 4.5249986452891289, 4.3131237572541341, 4.4418426297869367, 6.0400558508282476, 3.4119756967469681, 5.298158045905657, 5.4235356140179176, 5.4642338900348406, 6.3227444080350725, 6.53265311751077, 2.4462440523873097, 3.55608992739347, 5.1807764157487028, 5.6783554835773336, 3.3459778063865375, 5.07585912594929, 2.7263805119475659, 4.9217118909019533, 5.7340034088525353, 3.0978101298153566, 4.4073730738894348, 6.6820162839720574, 5.0704874425721158, 6.0007053656028653, 4.1241009658350247, 3.9334323863004297, 6.8796844887887367, 3.3724723120949167, 5.5085149162502729, 6.1213822420607125, 3.5940303111335452, 2.8853934911227923, 2.9905678053743729, 2.7680981012246288, 4.0422425327427121, 2.7759074257333243, 2.705158935608452, 6.9159800766172532, 5.4964994001358107, 2.7980547803983047, 5.3036245734476273, 5.4295255370547881, 4.0421288732678278, 3.522408127270948, 2.9310312701714185, 6.8313595699547731, 5.30953261845562, 4.5448843901820517, 2.969728108866085, 6.3140175197740218, 3.1110514589703921, 4.145978109703039, 3.2615658322621695, 4.0532575825689481, 6.3350885374249746, 3.01065259163317, 3.6032670175769734, 2.0134827965413296, 3.5642463822254529, 3.3732516462055981, 5.2629638741925344, 4.4855725239957289, 3.5452476733846359, 2.1280583751581532, 6.6647840101969305, 5.629461488900704, 2.3334082240309111, 5.13413731096688, 4.46120033745206, 6.6018462725754672, 3.6188585817601693, 3.0470350901904149, 6.594001995897198, 5.9641927460626167, 6.3910052160488249, 2.3195400805381463, 3.0495721029422169, 2.4645052243020293, 5.0974047143536607, 6.5041468714122068, 3.0794099754899271, 4.9837348132233306, 2.1145598568660176, 3.3773300071664059, 5.0336911827926221, 2.0133764134862733, 6.940862341954471, 6.4558973865772469, 2.444300130807763, 2.225554221728598, 4.2389278383331863, 2.90757899959348, 3.029587481836189, 4.2638502242918745, 2.2180693842757613, 2.4915402341990585, 3.1655022376595161, 3.0457141069561064, 3.6778506168475547, 3.5987656846869411, 6.4601715753112856, 5.056883960010083, 3.3384228472894688, 4.08965762031771, 5.2493552858884192, 5.59255197522236, 4.7216348753649111, 3.640705909032119, 6.7766856356607725, 5.0993097603764248, 3.7830739825336535, 4.605077607435053, 4.20091027598753, 6.9165233560456807, 6.8446518663491238, 2.4846588671716519, 2.4273344528902991, 2.2681205405690132, 2.2230359134984674, 4.2082283329192887, 6.7840259543423942, 5.76714549107142, 5.0500098997165486, 2.6496077888945546, 4.8331661186573918, 4.06604776824361, 6.2932353433788979, 3.8268865898287325, 2.0366598150330426, 2.95058045161274, 2.8301006594515172, 3.3983438793330607, 5.9724976557089855, 5.913683256935955, 5.4089623884713935, 3.387940201767659, 3.1039873534447624, 5.2723334961258388, 6.00111644513261, 2.1413811820137179, 2.2041143784616852, 2.0796373626054927, 2.2585064146089247, 3.5655534782554446, 3.2558453534394447, 6.7604252781893139, 2.5715529816720046, 4.9556324506239706, 6.71707479912464, 2.8843751928590504, 2.9811803525862954, 2.502899440040391, 3.0114790675576342, 5.2940083233065733, 4.4585285347833779, 3.695158068992447, 6.9559783332429586, 2.320961969932744, 6.8858619444897471, 6.1406840020454467, 2.0793734288107073, 5.9978073385302988, 4.455506449547145, 5.3172352047111584, 6.5472839761721549, 3.29205601676992, 2.2922333823352092, 5.97122974567514, 4.3209523420926121, 4.432239035492433, 6.279813126397352, 2.7047684381350052, 4.248918787773535, 4.1417436190707484, 3.5704693602932758), .Dim=c(4, 2, 7, 4))\
      \nd_ar_mat <- structure(c(0.796973308007478, 0.27098746873372204, 0.087897540979493871, 0.27622414258060729, 0.95164312307166576, 0.89901800464070647, 0.65532970327624385, 0.5225096778479893, 0.29127352697148695, 0.8807726953694468, 0.76112839165203294, 0.24492179493711796, 0.28803335406732788, 0.75109914081698137, 0.88758610210186817, 0.2879777846906289, 0.12350209100211071, 0.80777826735791214, 0.68379672183311424, 0.89288305801774448, 0.35487129143056373, 0.59194196701348623, 0.0935593584010168, 0.78541990497938574, 0.69775087426624, 0.56691766095399532, 0.92461800034109232, 0.38835372362194176, 0.42494808424730474, 0.20434668755353114, 0.49253249724906278, 0.22444725927356809, 0.29219688947791722, 0.263521617936712, 0.88482318757020528, 0.87916663700285624, 0.81859460533237538, 0.69241771518505613, 0.21160732941207264, 0.40131769984061055, 0.79621491859274385, 0.41738729394787627, 0.36421083734576043, 0.54542698308483839, 0.20253089400795304, 0.32179238741484, 0.89887275749475626, 0.82103426206608332, 0.0700047459891701, 0.48090391220102424, 0.79386504085583853, 0.07837203206921603, 0.803271114375764, 0.044164845030135839, 0.58935733524730927, 0.070790886683083545, 0.34010343926135733, 0.78768773621109689, 0.24053344955364553, 0.62359539491112737, 0.71892121852815871, 0.51545560600730966, 0.53272304384382063, 0.29321300769243475, 0.32817824919577632, 0.8330702941616267, 0.6949282120964233, 0.50212975822360228, 0.57735220678102783, 0.9484294331274481, 0.4660029513328971, 0.76961320602914118, 0.633858920580367, 0.03307254622641962, 0.88720454661120307, 0.14179598581477038, 0.44077762941729831, 0.76207848637957076, 0.36478744757043952, 0.404944858859838, 0.43265703519009924, 0.14169767115007634, 0.26936116282295952, 0.82064905909162078, 0.0832861242047098, 0.81031152674566687, 0.38609212143955418, 0.037362110235922612, 0.69479414294732744, 0.92310214280013758, 0.14483059609302096, 0.67752534750384186, 0.16968116049557541, 0.33206044006640911, 0.85127476887750964, 0.730935363943758, 0.33878728655167784, 0.23785371807415698, 0.18913851094931747, 0.46008997186111494, 0.84559728085728836, 0.84594259023981544, 0.83783827747525341, 0.14170610548849971, 0.54488766485412765, 0.746515677017328, 0.80659401464240443, 0.900405217970228, 0.47238389365592803, 0.3440012116672081, 0.47999522659986832, 0.92746491781583473, 0.82624426244019844, 0.4419005038665284, 0.98347085581648219, 0.0699252248717957, 0.39191225593946072, 0.69322425757445838, 0.61416707372541435, 0.904527619312733), .Dim=c(4, 5, 2, 3))\
      \nd_simplex <- c(0.11434757142635502, 0.23223367099628625, 0.40363959442640784, 0.24977916315095094)\
      \nd_1d_simplex <- structure(c(0.33151183900692877, 0.50324807720713083, 0.08339261738435394, 0.081847466401586577, 0.28828006395260009, 0.2743690023814751, 0.21878007203851371, 0.21857086162741104, 0.20979213786985046, 0.22737155442471288, 0.41646710148988364, 0.14636920621555302, 0.31616000500221675, 0.44562159892248765, 0.10470755793708043, 0.13351083813821521), .Dim=c(4, 4))\
      \nd_3d_simplex <- structure(c(0.31954370700556084, 0.12394061632751922, 0.44887198135835332, 0.10764369530856668, 0.036866042242922649, 0.521015703216727, 0.020000549703253406, 0.42211770483709693, 0.32453498177942103, 0.049232799114147553, 0.27316532876919969, 0.35306689033723165, 0.30506977880767078, 0.0854322509960228, 0.5713197419957613, 0.038178228200545054, 0.26950482360703171, 0.43554968767254565, 0.1936015916522581, 0.10134389706816445, 0.38254013515651514, 0.27732486939684858, 0.15022035301006775, 0.18991464243656844, 0.42184724237207588, 0.15610640824469077, 0.20295752553468763, 0.21908882384854564, 0.33671386238003265, 0.16253799903715541, 0.21003212558126522, 0.29071601300154659, 0.28829169090181328, 0.38720692107163224, 0.21290473866684451, 0.11159664935971003, 0.15793042093785484, 0.36353745960392791, 0.39606888274497432, 0.082463236713243085, 0.21831416950189911, 0.41917317716229785, 0.075307946748233115, 0.28720470658756997, 0.40814995668421289, 0.32072918234818343, 0.13927172648294936, 0.1318491344846543, 0.025452732321660353, 0.20864281438033422, 0.45611477635659969, 0.30978967694140569, 0.25566547983113924, 0.1741406176406356, 0.33504612279536972, 0.23514777973285544, 0.42131855919765154, 0.09968838352369884, 0.40223399991575737, 0.07675905736289225, 0.091265071644632587, 0.28126509916304188, 0.55564367319696562, 0.071826155995359867, 0.135308858049027, 0.25823907561636239, 0.29961541275720327, 0.30683665357740736, 0.25805508378444864, 0.287847160448939, 0.098663158776089777, 0.35543459699052254, 0.28774644417152917, 0.27421211556056224, 0.17360784344336491, 0.26443359682454354, 0.3683677169837381, 0.22615062747713058, 0.061687876594169938, 0.34379377894496138, 0.25997665328419278, 0.068888237159942411, 0.298339810213502, 0.37279529934236283, 0.2873259733321295, 0.283691767155956, 0.25597932991530603, 0.17300292959660843, 0.29338733654509319, 0.23059912251274994, 0.25885329766224963, 0.21716024327990732, 0.041857898357120227, 0.42936482389188074, 0.40171811386314726, 0.12705916388785174, 0.18458509424190081, 0.2393001139800815, 0.23570572757903543, 0.34040906419898215, 0.45709147157940766, 0.089817833786054915, 0.34407080049693922, 0.10901989413759822, 0.055104318090534024, 0.13331121836879703, 0.63622073749487984, 0.17536372604578906, 0.11529528760088378, 0.22784729218590283, 0.38981124157080332, 0.26704617864241, 0.30274421990548345, 0.29453129790401655, 0.21947097219073045, 0.18325350999976966, 0.35490344983466782, 0.26490676555732184, 0.018642289268687169, 0.36154749533932318, 0.11577610217341101, 0.312902821527561, 0.35983459968398651, 0.21148647661504139, 0.21102994851241139, 0.28731508104393905, 0.098801523653409828, 0.40285344679023971, 0.313941167438314, 0.16846438947871092, 0.19653442855554415, 0.32106001452743088, 0.35462345016498925, 0.40027930464633021, 0.027746031198076983, 0.2173512139906035, 0.0785764474975645, 0.41690296993301618, 0.47578195632058523, 0.028738626248834071, 0.19016435728778805, 0.28102483101157449, 0.29590014590651986, 0.23291066579411746, 0.32425632045066127, 0.076011471840299411, 0.17966758179698267, 0.42006462591205673, 0.18594527368120167, 0.41669695027193071, 0.13570245135481934, 0.26165532469204833, 0.22095605631637252, 0.17113198553397987, 0.31458813683393066, 0.29332382131571694, 0.13186390342689505, 0.31950570878811746, 0.37858377643851571, 0.17004661134647187, 0.32006686991688826, 0.088553173105982555, 0.27046946253776116, 0.32091049443936809, 0.027199062720398726, 0.39816481762835876, 0.10734825539937316, 0.4672878642518693, 0.63490018075214127, 0.010406012101396045, 0.1898864471491544, 0.16480735999730825, 0.26657898088641607, 0.10209615410882804, 0.24281099713876789, 0.38851386786598807, 0.50948140431875522, 0.22351198327015528, 0.25929352979807008, 0.0077130826130193389, 0.39274116602706038, 0.16208255780705944, 0.13777269065704928, 0.30740358550883079, 0.43378119466607373, 0.14350846336939097, 0.092807922926278152, 0.32990241903825712, 0.066773515158013511, 0.40219172460292529, 0.35592594497195029, 0.17510881526711092, 0.0643831857120337, 0.42282023625432519, 0.20119554055655559, 0.3116010374770854, 0.34385359077264505, 0.45873218387685344, 0.0044608985222494282, 0.19295332682825203, 0.32775780739293303, 0.2431738158208894, 0.38167136198019364, 0.047397014805983982, 0.060375128445277773, 0.43377739806374249, 0.23955409410374298, 0.26629337938723668, 0.21814573062327228, 0.421859267552855, 0.34544271773208024, 0.014552284091792366, 0.11439062800536738, 0.41007576180728883, 0.29322287688509474, 0.1823107333022489, 0.26779622579505463, 0.20471307929922708, 0.21249992299661824, 0.31499077190910008, 0.15193550583063783, 0.36546600312576788, 0.12228901684800625, 0.3603094741955879), .Dim=c(4, 2, 7, 4))\
      \nd_cfcov_54 <- structure(c(0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(5, 4))\
      \nd_cfcov_33 <- structure(c(1., 0., 0., 0., 1., 0., 0., 0., 1.), .Dim=c(3, 3))\
      \nd_cfcov_33_ar <- structure(c(1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1.), .Dim=c(7, 3, 3))" |}]


