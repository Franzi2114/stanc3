  $ ../../../../../install/default/bin/stanc -O1 --print-cpp ad-level-failing.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace ad_level_failing_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 37> locations_array__ = 
{" (found before start of program)",
 " (in 'ad-level-failing.stan', line 45, column 2 to column 21)",
 " (in 'ad-level-failing.stan', line 46, column 2 to column 22)",
 " (in 'ad-level-failing.stan', line 47, column 2 to column 19)",
 " (in 'ad-level-failing.stan', line 48, column 2 to column 22)",
 " (in 'ad-level-failing.stan', line 52, column 2 to column 26)",
 " (in 'ad-level-failing.stan', line 54, column 4 to column 52)",
 " (in 'ad-level-failing.stan', line 55, column 4 to column 67)",
 " (in 'ad-level-failing.stan', line 53, column 2 to line 56, column 3)",
 " (in 'ad-level-failing.stan', line 60, column 2 to column 24)",
 " (in 'ad-level-failing.stan', line 61, column 2 to column 23)",
 " (in 'ad-level-failing.stan', line 62, column 2 to column 21)",
 " (in 'ad-level-failing.stan', line 63, column 2 to column 23)",
 " (in 'ad-level-failing.stan', line 65, column 2 to column 41)",
 " (in 'ad-level-failing.stan', line 67, column 4 to column 49)",
 " (in 'ad-level-failing.stan', line 66, column 2 to line 67, column 49)",
 " (in 'ad-level-failing.stan', line 69, column 2 to column 53)",
 " (in 'ad-level-failing.stan', line 29, column 2 to column 19)",
 " (in 'ad-level-failing.stan', line 30, column 9 to column 12)",
 " (in 'ad-level-failing.stan', line 30, column 2 to column 14)",
 " (in 'ad-level-failing.stan', line 31, column 2 to column 13)",
 " (in 'ad-level-failing.stan', line 32, column 15 to column 18)",
 " (in 'ad-level-failing.stan', line 32, column 2 to column 20)",
 " (in 'ad-level-failing.stan', line 33, column 13 to column 16)",
 " (in 'ad-level-failing.stan', line 33, column 2 to column 18)",
 " (in 'ad-level-failing.stan', line 37, column 2 to column 14)",
 " (in 'ad-level-failing.stan', line 38, column 2 to column 32)",
 " (in 'ad-level-failing.stan', line 40, column 2 to column 14)",
 " (in 'ad-level-failing.stan', line 41, column 2 to column 13)",
 " (in 'ad-level-failing.stan', line 52, column 18 to column 21)",
 " (in 'ad-level-failing.stan', line 17, column 4 to column 17)",
 " (in 'ad-level-failing.stan', line 19, column 4 to column 59)",
 " (in 'ad-level-failing.stan', line 20, column 4 to column 75)",
 " (in 'ad-level-failing.stan', line 21, column 4 to column 30)",
 " (in 'ad-level-failing.stan', line 22, column 4 to column 48)",
 " (in 'ad-level-failing.stan', line 24, column 4 to column 16)",
 " (in 'ad-level-failing.stan', line 15, column 31 to line 25, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
simple_SIR(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(4, DUMMY_VAR__); 
    
    current_statement__ = 31;
    assign(dydt,
      (((-rvalue(theta, "theta", index_uni(1)) *
          rvalue(y, "y", index_uni(4))) /
         (rvalue(y, "y", index_uni(4)) +
           rvalue(theta, "theta", index_uni(2)))) *
        rvalue(y, "y", index_uni(1))),
      "assigning variable dydt", index_uni(1));
    current_statement__ = 32;
    assign(dydt,
      ((((rvalue(theta, "theta", index_uni(1)) *
           rvalue(y, "y", index_uni(4))) /
          (rvalue(y, "y", index_uni(4)) +
            rvalue(theta, "theta", index_uni(2)))) *
         rvalue(y, "y", index_uni(1))) -
        (rvalue(theta, "theta", index_uni(3)) * rvalue(y, "y", index_uni(2)))),
      "assigning variable dydt", index_uni(2));
    current_statement__ = 33;
    assign(dydt,
      (rvalue(theta, "theta", index_uni(3)) * rvalue(y, "y", index_uni(2))),
      "assigning variable dydt", index_uni(3));
    current_statement__ = 34;
    assign(dydt,
      ((rvalue(theta, "theta", index_uni(4)) * rvalue(y, "y", index_uni(2)))
        -
        (rvalue(theta, "theta", index_uni(5)) * rvalue(y, "y", index_uni(4)))),
      "assigning variable dydt", index_uni(4));
    current_statement__ = 35;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct simple_SIR_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<stan::promote_args_t<T0__, T1__, T2__,
T3__>>
operator()(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return simple_SIR(t, y, theta, x_r, x_i, pstream__);
}
};

class ad_level_failing_model final : public model_base_crtp<ad_level_failing_model> {

 private:
  int N_t;
  std::vector<double> t;
  std::vector<double> y0;
  std::vector<int> stoi_hat;
  std::vector<double> B_hat;
  double t0;
  double kappa;
  std::vector<double> x_r;
  std::vector<int> x_i;
 
 public:
  ~ad_level_failing_model() { }
  
  inline std::string model_name() const final { return "ad_level_failing_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  ad_level_failing_model(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "ad_level_failing_model_namespace::ad_level_failing_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 17;
      context__.validate_dims("data initialization","N_t","int",
           std::vector<size_t>{});
      N_t = std::numeric_limits<int>::min(); 
      
      current_statement__ = 17;
      N_t = context__.vals_i("N_t")[(1 - 1)];
      current_statement__ = 17;
      check_greater_or_equal(function__, "N_t", N_t, 0);
      current_statement__ = 18;
      validate_non_negative_index("t", "N_t", N_t);
      current_statement__ = 19;
      context__.validate_dims("data initialization","t","double",
           std::vector<size_t>{static_cast<size_t>(N_t)});
      t = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 19;
      t = context__.vals_r("t");
      current_statement__ = 20;
      context__.validate_dims("data initialization","y0","double",
           std::vector<size_t>{static_cast<size_t>(4)});
      y0 = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 20;
      y0 = context__.vals_r("y0");
      current_statement__ = 21;
      validate_non_negative_index("stoi_hat", "N_t", N_t);
      current_statement__ = 22;
      context__.validate_dims("data initialization","stoi_hat","int",
           std::vector<size_t>{static_cast<size_t>(N_t)});
      stoi_hat = std::vector<int>(N_t, std::numeric_limits<int>::min()); 
      
      current_statement__ = 22;
      stoi_hat = context__.vals_i("stoi_hat");
      current_statement__ = 23;
      validate_non_negative_index("B_hat", "N_t", N_t);
      current_statement__ = 24;
      context__.validate_dims("data initialization","B_hat","double",
           std::vector<size_t>{static_cast<size_t>(N_t)});
      B_hat = std::vector<double>(N_t, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 24;
      B_hat = context__.vals_r("B_hat");
      current_statement__ = 25;
      t0 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 25;
      t0 = 0;
      current_statement__ = 26;
      kappa = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 26;
      kappa = 1000000;
      current_statement__ = 27;
      x_r = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 28;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min()); 
      
      current_statement__ = 26;
      check_greater_or_equal(function__, "kappa", 1000000, 0);
      current_statement__ = 29;
      validate_non_negative_index("y", "N_t", N_t);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "ad_level_failing_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ beta;
      beta = DUMMY_VAR__; 
      
      current_statement__ = 1;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ gamma;
      gamma = DUMMY_VAR__; 
      
      current_statement__ = 2;
      gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ xi;
      xi = DUMMY_VAR__; 
      
      current_statement__ = 3;
      xi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      local_scalar_t__ delta;
      delta = DUMMY_VAR__; 
      
      current_statement__ = 4;
      delta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<std::vector<local_scalar_t__>> y;
      y = std::vector<std::vector<local_scalar_t__>>(N_t, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
       
      
      {
        std::vector<local_scalar_t__> theta;
        theta = std::vector<local_scalar_t__>(5, DUMMY_VAR__); 
        
        current_statement__ = 6;
        assign(theta, std::vector<local_scalar_t__>{beta,
          stan::math::promote_scalar<local_scalar_t__>(1000000), gamma, xi,
          delta}, "assigning variable theta");
        current_statement__ = 7;
        assign(y,
          integrate_ode_rk45(simple_SIR_functor__(), y0, 0, t, theta, x_r,
            x_i, pstream__), "assigning variable y");
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      {
        current_statement__ = 9;
        lp_accum__.add(cauchy_lpdf<propto__>(beta, 0, 2.5));
        current_statement__ = 10;
        lp_accum__.add(cauchy_lpdf<propto__>(gamma, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(cauchy_lpdf<propto__>(xi, 0, 25));
        current_statement__ = 12;
        lp_accum__.add(cauchy_lpdf<propto__>(delta, 0, 1));
        current_statement__ = 13;
        lp_accum__.add(
          poisson_lpmf<propto__>(rvalue(stoi_hat, "stoi_hat", index_uni(1)),
            (rvalue(y0, "y0", index_uni(1)) -
              rvalue(y, "y", index_uni(1), index_uni(1)))));
        current_statement__ = 15;
        for (int n = 2; n <= N_t; ++n) {
          current_statement__ = 14;
          lp_accum__.add(
            poisson_lpmf<propto__>(
              rvalue(stoi_hat, "stoi_hat", index_uni(n)),
              (rvalue(y, "y", index_uni((n - 1)), index_uni(1)) -
                rvalue(y, "y", index_uni(n), index_uni(1)))));
        }
        current_statement__ = 16;
        lp_accum__.add(
          lognormal_lpdf<propto__>(B_hat,
            stan::math::log(col(to_matrix(y), 4)), 0.15));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "ad_level_failing_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double xi;
      xi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      xi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
             lp__);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      delta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      std::vector<std::vector<double>> y;
      y = std::vector<std::vector<double>>(N_t, std::vector<double>(4, std::numeric_limits<double>::quiet_NaN()));
       
      
      vars__.emplace_back(beta);
      vars__.emplace_back(gamma);
      vars__.emplace_back(xi);
      vars__.emplace_back(delta);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        std::vector<double> theta;
        theta = std::vector<double>(5, std::numeric_limits<double>::quiet_NaN());
         
        
        current_statement__ = 6;
        assign(theta, std::vector<double>{beta,
          stan::math::promote_scalar<double>(1000000), gamma, xi, delta},
          "assigning variable theta");
        current_statement__ = 7;
        assign(y,
          integrate_ode_rk45(simple_SIR_functor__(), y0, 0, t, theta, x_r,
            x_i, pstream__), "assigning variable y");
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N_t; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= 4; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            vars__.emplace_back(y[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      beta = context__.vals_r("beta")[(1 - 1)];
      double beta_free__;
      beta_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      beta_free__ = stan::math::lb_free(beta, 0);
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      double gamma_free__;
      gamma_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      gamma_free__ = stan::math::lb_free(gamma, 0);
      double xi;
      xi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      xi = context__.vals_r("xi")[(1 - 1)];
      double xi_free__;
      xi_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      xi_free__ = stan::math::lb_free(xi, 0);
      double delta;
      delta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      delta = context__.vals_r("delta")[(1 - 1)];
      double delta_free__;
      delta_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      delta_free__ = stan::math::lb_free(delta, 0);
      vars__.emplace_back(beta_free__);
      vars__.emplace_back(gamma_free__);
      vars__.emplace_back(xi_free__);
      vars__.emplace_back(delta_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"beta", "gamma", "xi", "delta", "y"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      },
      std::vector<size_t>{static_cast<size_t>(N_t), static_cast<size_t>(4)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "xi");
    param_names__.emplace_back(std::string() + "delta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta");
    param_names__.emplace_back(std::string() + "gamma");
    param_names__.emplace_back(std::string() + "xi");
    param_names__.emplace_back(std::string() + "delta");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_t; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_t) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(4) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = ad_level_failing_model_namespace::ad_level_failing_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return ad_level_failing_model_namespace::profiles__;
}

#endif



Warning in 'ad-level-failing.stan', line 55, column 8: integrate_ode_rk45 is deprecated and will be removed in the future. Use ode_rk45 instead. 
The new interface is slightly different, see: 
https://mc-stan.org/users/documentation/case-studies/convert_odes.html
  $ ../../../../../install/default/bin/stanc -O1 --print-cpp copy_fail.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace copy_fail_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 76> locations_array__ = 
{" (found before start of program)",
 " (in 'copy_fail.stan', line 71, column 2 to column 31)",
 " (in 'copy_fail.stan', line 72, column 2 to column 40)",
 " (in 'copy_fail.stan', line 76, column 2 to column 51)",
 " (in 'copy_fail.stan', line 77, column 2 to column 49)",
 " (in 'copy_fail.stan', line 78, column 2 to column 49)",
 " (in 'copy_fail.stan', line 83, column 6 to column 20)",
 " (in 'copy_fail.stan', line 84, column 6 to column 18)",
 " (in 'copy_fail.stan', line 82, column 32 to line 85, column 5)",
 " (in 'copy_fail.stan', line 82, column 4 to line 85, column 5)",
 " (in 'copy_fail.stan', line 87, column 6 to column 32)",
 " (in 'copy_fail.stan', line 88, column 6 to column 23)",
 " (in 'copy_fail.stan', line 86, column 38 to line 89, column 5)",
 " (in 'copy_fail.stan', line 86, column 4 to line 89, column 5)",
 " (in 'copy_fail.stan', line 81, column 20 to line 90, column 3)",
 " (in 'copy_fail.stan', line 81, column 2 to line 90, column 3)",
 " (in 'copy_fail.stan', line 92, column 2 to column 51)",
 " (in 'copy_fail.stan', line 105, column 8 to column 37)",
 " (in 'copy_fail.stan', line 106, column 8 to column 41)",
 " (in 'copy_fail.stan', line 104, column 40 to line 107, column 7)",
 " (in 'copy_fail.stan', line 104, column 6 to line 107, column 7)",
 " (in 'copy_fail.stan', line 108, column 6 to column 37)",
 " (in 'copy_fail.stan', line 103, column 22 to line 109, column 5)",
 " (in 'copy_fail.stan', line 103, column 4 to line 109, column 5)",
 " (in 'copy_fail.stan', line 102, column 20 to line 110, column 3)",
 " (in 'copy_fail.stan', line 102, column 2 to line 110, column 3)",
 " (in 'copy_fail.stan', line 50, column 2 to column 20)",
 " (in 'copy_fail.stan', line 51, column 2 to column 27)",
 " (in 'copy_fail.stan', line 52, column 25 to column 29)",
 " (in 'copy_fail.stan', line 52, column 31 to column 42)",
 " (in 'copy_fail.stan', line 52, column 2 to column 44)",
 " (in 'copy_fail.stan', line 53, column 2 to column 23)",
 " (in 'copy_fail.stan', line 54, column 31 to column 35)",
 " (in 'copy_fail.stan', line 54, column 37 to column 52)",
 " (in 'copy_fail.stan', line 54, column 2 to column 54)",
 " (in 'copy_fail.stan', line 58, column 2 to column 38)",
 " (in 'copy_fail.stan', line 60, column 39 to column 43)",
 " (in 'copy_fail.stan', line 60, column 2 to column 45)",
 " (in 'copy_fail.stan', line 61, column 38 to column 42)",
 " (in 'copy_fail.stan', line 61, column 2 to column 44)",
 " (in 'copy_fail.stan', line 65, column 4 to column 35)",
 " (in 'copy_fail.stan', line 64, column 2 to line 65, column 35)",
 " (in 'copy_fail.stan', line 67, column 4 to column 33)",
 " (in 'copy_fail.stan', line 66, column 2 to line 67, column 33)",
 " (in 'copy_fail.stan', line 72, column 26 to column 33)",
 " (in 'copy_fail.stan', line 76, column 26 to column 30)",
 " (in 'copy_fail.stan', line 76, column 32 to column 45)",
 " (in 'copy_fail.stan', line 77, column 26 to column 30)",
 " (in 'copy_fail.stan', line 77, column 32 to column 45)",
 " (in 'copy_fail.stan', line 78, column 26 to column 30)",
 " (in 'copy_fail.stan', line 78, column 32 to column 43)",
 " (in 'copy_fail.stan', line 8, column 8 to column 17)",
 " (in 'copy_fail.stan', line 7, column 6 to line 8, column 17)",
 " (in 'copy_fail.stan', line 6, column 4 to line 8, column 17)",
 " (in 'copy_fail.stan', line 9, column 4 to column 13)",
 " (in 'copy_fail.stan', line 5, column 31 to line 10, column 3)",
 " (in 'copy_fail.stan', line 15, column 6 to column 32)",
 " (in 'copy_fail.stan', line 19, column 8 to column 17)",
 " (in 'copy_fail.stan', line 18, column 6 to line 19, column 17)",
 " (in 'copy_fail.stan', line 13, column 37 to line 20, column 5)",
 " (in 'copy_fail.stan', line 13, column 4 to line 20, column 5)",
 " (in 'copy_fail.stan', line 21, column 4 to column 13)",
 " (in 'copy_fail.stan', line 12, column 30 to line 22, column 3)",
 " (in 'copy_fail.stan', line 26, column 11 to column 15)",
 " (in 'copy_fail.stan', line 26, column 17 to column 28)",
 " (in 'copy_fail.stan', line 26, column 4 to column 34)",
 " (in 'copy_fail.stan', line 29, column 6 to column 32)",
 " (in 'copy_fail.stan', line 32, column 8 to column 37)",
 " (in 'copy_fail.stan', line 33, column 8 to column 32)",
 " (in 'copy_fail.stan', line 41, column 8 to line 42, column 83)",
 " (in 'copy_fail.stan', line 30, column 37 to line 43, column 7)",
 " (in 'copy_fail.stan', line 30, column 6 to line 43, column 7)",
 " (in 'copy_fail.stan', line 28, column 22 to line 44, column 5)",
 " (in 'copy_fail.stan', line 28, column 4 to line 44, column 5)",
 " (in 'copy_fail.stan', line 45, column 4 to column 15)",
 " (in 'copy_fail.stan', line 25, column 47 to line 46, column 3)"};


int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 53;
    for (int k = 1; k <= size(y_i); ++k) {
      current_statement__ = 52;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 51;
        return k;
      } 
    }
    current_statement__ = 54;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct first_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return first_capture(y_i, pstream__);
}
};

int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 60;
    for (int k_rev = 0; k_rev <= (size(y_i) - 1); ++k_rev) {
      int k;
      k = std::numeric_limits<int>::min(); 
      
      current_statement__ = 56;
      k = (size(y_i) - k_rev);
      current_statement__ = 58;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 57;
        return k;
      } 
    }
    current_statement__ = 61;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct last_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return last_capture(y_i, pstream__);
}
};

template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
prob_uncaptured(const int& nind, const int& n_occasions, const T2__& p_arg__,
                const T3__& phi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 63;
    validate_non_negative_index("chi", "nind", nind);
    current_statement__ = 64;
    validate_non_negative_index("chi", "n_occasions", n_occasions);
    Eigen::Matrix<local_scalar_t__, -1, -1> chi;
    chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
    stan::math::fill(chi, DUMMY_VAR__); 
    
    current_statement__ = 73;
    for (int i = 1; i <= nind; ++i) {
      current_statement__ = 66;
      assign(chi, 1.0,
        "assigning variable chi", index_uni(i), index_uni(n_occasions));
      current_statement__ = 71;
      for (int t = 1; t <= (n_occasions - 1); ++t) {
        int t_curr;
        t_curr = std::numeric_limits<int>::min(); 
        
        current_statement__ = 67;
        t_curr = (n_occasions - t);
        int t_next;
        t_next = std::numeric_limits<int>::min(); 
        
        current_statement__ = 68;
        t_next = (t_curr + 1);
        current_statement__ = 69;
        assign(chi,
          ((1 - rvalue(phi, "phi", index_uni(i), index_uni(t_curr))) +
            ((rvalue(phi, "phi", index_uni(i), index_uni(t_curr)) *
               (1 - rvalue(p, "p", index_uni(i), index_uni((t_next - 1))))) *
              rvalue(chi, "chi", index_uni(i), index_uni(t_next)))),
          "assigning variable chi", index_uni(i), index_uni(t_curr));
      }
    }
    current_statement__ = 74;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct prob_uncaptured_functor__ {
template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
operator()(const int& nind, const int& n_occasions, const T2__& p,
           const T3__& phi, std::ostream* pstream__)  const 
{
return prob_uncaptured(nind, n_occasions, p, phi, pstream__);
}
};

class copy_fail_model final : public model_base_crtp<copy_fail_model> {

 private:
  int nind;
  int n_occasions;
  std::vector<std::vector<int>> y;
  int max_age;
  std::vector<std::vector<int>> x;
  int n_occ_minus_1;
  std::vector<int> first;
  std::vector<int> last;
 
 public:
  ~copy_fail_model() { }
  
  inline std::string model_name() const final { return "copy_fail_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  copy_fail_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "copy_fail_model_namespace::copy_fail_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization","nind","int",
           std::vector<size_t>{});
      nind = std::numeric_limits<int>::min(); 
      
      current_statement__ = 26;
      nind = context__.vals_i("nind")[(1 - 1)];
      current_statement__ = 26;
      check_greater_or_equal(function__, "nind", nind, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization","n_occasions","int",
           std::vector<size_t>{});
      n_occasions = std::numeric_limits<int>::min(); 
      
      current_statement__ = 27;
      n_occasions = context__.vals_i("n_occasions")[(1 - 1)];
      current_statement__ = 27;
      check_greater_or_equal(function__, "n_occasions", n_occasions, 2);
      current_statement__ = 28;
      validate_non_negative_index("y", "nind", nind);
      current_statement__ = 29;
      validate_non_negative_index("y", "n_occasions", n_occasions);
      current_statement__ = 30;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(nind),
            static_cast<size_t>(n_occasions)});
      y = std::vector<std::vector<int>>(nind, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 30;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          current_statement__ = 30;
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            current_statement__ = 30;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 30;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 30;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 30;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 31;
      context__.validate_dims("data initialization","max_age","int",
           std::vector<size_t>{});
      max_age = std::numeric_limits<int>::min(); 
      
      current_statement__ = 31;
      max_age = context__.vals_i("max_age")[(1 - 1)];
      current_statement__ = 31;
      check_greater_or_equal(function__, "max_age", max_age, 1);
      current_statement__ = 32;
      validate_non_negative_index("x", "nind", nind);
      current_statement__ = 33;
      validate_non_negative_index("x", "n_occasions - 1", (n_occasions - 1));
      current_statement__ = 34;
      context__.validate_dims("data initialization","x","int",
           std::vector<size_t>{static_cast<size_t>(nind),
            static_cast<size_t>((n_occasions - 1))});
      x = std::vector<std::vector<int>>(nind, std::vector<int>((n_occasions -
                                                                 1), std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> x_flat__;
        current_statement__ = 34;
        x_flat__ = context__.vals_i("x");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= (n_occasions - 1); ++sym1__) {
          current_statement__ = 34;
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            current_statement__ = 34;
            assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 34;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= (n_occasions - 1); ++sym2__) {
          current_statement__ = 34;
          check_greater_or_equal(function__, "x[sym1__, sym2__]",
                                 x[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= (n_occasions - 1); ++sym2__) {
          current_statement__ = 34;
          check_less_or_equal(function__, "x[sym1__, sym2__]",
                              x[(sym1__ - 1)][(sym2__ - 1)], max_age);
        }
      }
      current_statement__ = 35;
      n_occ_minus_1 = std::numeric_limits<int>::min(); 
      
      current_statement__ = 35;
      n_occ_minus_1 = (n_occasions - 1);
      current_statement__ = 36;
      validate_non_negative_index("first", "nind", nind);
      current_statement__ = 37;
      first = std::vector<int>(nind, std::numeric_limits<int>::min()); 
      
      current_statement__ = 38;
      validate_non_negative_index("last", "nind", nind);
      current_statement__ = 39;
      last = std::vector<int>(nind, std::numeric_limits<int>::min()); 
      
      current_statement__ = 41;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 40;
        assign(first, first_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable first", index_uni(i));
      }
      current_statement__ = 43;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 42;
        assign(last, last_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable last", index_uni(i));
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 37;
        check_greater_or_equal(function__, "first[sym1__]",
                               first[(sym1__ - 1)], 0);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 37;
        check_less_or_equal(function__, "first[sym1__]", first[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 39;
        check_greater_or_equal(function__, "last[sym1__]",
                               last[(sym1__ - 1)], 0);
      }
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 39;
        check_less_or_equal(function__, "last[sym1__]", last[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 44;
      validate_non_negative_index("beta", "max_age", max_age);
      current_statement__ = 45;
      validate_non_negative_index("phi", "nind", nind);
      current_statement__ = 46;
      validate_non_negative_index("phi", "n_occ_minus_1", n_occ_minus_1);
      current_statement__ = 47;
      validate_non_negative_index("p", "nind", nind);
      current_statement__ = 48;
      validate_non_negative_index("p", "n_occ_minus_1", n_occ_minus_1);
      current_statement__ = 49;
      validate_non_negative_index("chi", "nind", nind);
      current_statement__ = 50;
      validate_non_negative_index("chi", "n_occasions", n_occasions);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + max_age;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "copy_fail_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mean_p;
      mean_p = DUMMY_VAR__; 
      
      current_statement__ = 1;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(max_age);
      stan::math::fill(beta, DUMMY_VAR__); 
      
      current_statement__ = 2;
      beta = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
               0, 1, lp__, max_age);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(p, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      current_statement__ = 15;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 9;
        for (int t = 1; t <= (rvalue(first, "first", index_uni(i)) - 1); ++t) {
          current_statement__ = 6;
          assign(phi, 0, "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 7;
          assign(p, 0, "assigning variable p", index_uni(i), index_uni(t));
        }
        current_statement__ = 13;
        for (int t = rvalue(first, "first", index_uni(i));
             t <= n_occ_minus_1; ++t) {
          current_statement__ = 10;
          assign(phi,
            rvalue(beta, "beta",
              index_uni(rvalue(x, "x", index_uni(i), index_uni(t)))),
            "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 11;
          assign(p, mean_p,
            "assigning variable p", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 16;
      assign(chi, prob_uncaptured(nind, n_occasions, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      {
        current_statement__ = 25;
        for (int i = 1; i <= nind; ++i) {
          current_statement__ = 23;
          if (logical_gt(rvalue(first, "first", index_uni(i)), 0)) {
            current_statement__ = 20;
            for (int t = (rvalue(first, "first", index_uni(i)) + 1);
                 t <= rvalue(last, "last", index_uni(i)); ++t) {
              current_statement__ = 17;
              lp_accum__.add(
                bernoulli_lpmf<propto__>(1,
                  rvalue(phi, "phi", index_uni(i), index_uni((t - 1)))));
              current_statement__ = 18;
              lp_accum__.add(
                bernoulli_lpmf<propto__>(
                  rvalue(y, "y", index_uni(i), index_uni(t)),
                  rvalue(p, "p", index_uni(i), index_uni((t - 1)))));
            }
            current_statement__ = 21;
            lp_accum__.add(
              bernoulli_lpmf<propto__>(1,
                rvalue(chi, "chi",
                  index_uni(i), index_uni(rvalue(last, "last", index_uni(i))))));
          } 
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "copy_fail_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(max_age);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      beta = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
               0, 1, lp__, max_age);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<double, -1, -1> p;
      p = Eigen::Matrix<double, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      vars__.emplace_back(mean_p);
      for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 9;
        for (int t = 1; t <= (rvalue(first, "first", index_uni(i)) - 1); ++t) {
          current_statement__ = 6;
          assign(phi, 0, "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 7;
          assign(p, 0, "assigning variable p", index_uni(i), index_uni(t));
        }
        current_statement__ = 13;
        for (int t = rvalue(first, "first", index_uni(i));
             t <= n_occ_minus_1; ++t) {
          current_statement__ = 10;
          assign(phi,
            rvalue(beta, "beta",
              index_uni(rvalue(x, "x", index_uni(i), index_uni(t)))),
            "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 11;
          assign(p, mean_p,
            "assigning variable p", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 16;
      assign(chi, prob_uncaptured(nind, n_occasions, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(phi, "phi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(p, "p", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(chi, "chi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_p = context__.vals_r("mean_p")[(1 - 1)];
      double mean_p_free__;
      mean_p_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_p_free__ = stan::math::lub_free(mean_p, 0, 1);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(max_age);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> beta_flat__;
        current_statement__ = 2;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
          current_statement__ = 2;
          assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> beta_free__;
      beta_free__ = Eigen::Matrix<double, -1, 1>(max_age);
      stan::math::fill(beta_free__, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
        current_statement__ = 2;
        assign(beta_free__, stan::math::lub_free(beta[(sym1__ - 1)], 0, 1),
          "assigning variable beta_free__", index_uni(sym1__));
      }
      vars__.emplace_back(mean_p_free__);
      for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
        vars__.emplace_back(beta_free__[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mean_p", "beta", "phi", "p", "chi"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(max_age)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occ_minus_1)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occ_minus_1)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occasions)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_p");
    for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_p");
    for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_age) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_age) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = copy_fail_model_namespace::copy_fail_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return copy_fail_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp dce-fail.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace dce_fail_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 66> locations_array__ = 
{" (found before start of program)",
 " (in 'dce-fail.stan', line 18, column 2 to column 22)",
 " (in 'dce-fail.stan', line 19, column 2 to column 26)",
 " (in 'dce-fail.stan', line 20, column 2 to column 26)",
 " (in 'dce-fail.stan', line 21, column 2 to column 28)",
 " (in 'dce-fail.stan', line 22, column 2 to column 29)",
 " (in 'dce-fail.stan', line 23, column 2 to column 30)",
 " (in 'dce-fail.stan', line 25, column 2 to column 11)",
 " (in 'dce-fail.stan', line 26, column 2 to column 16)",
 " (in 'dce-fail.stan', line 27, column 2 to column 15)",
 " (in 'dce-fail.stan', line 28, column 2 to column 22)",
 " (in 'dce-fail.stan', line 30, column 2 to column 16)",
 " (in 'dce-fail.stan', line 32, column 2 to column 22)",
 " (in 'dce-fail.stan', line 33, column 2 to column 22)",
 " (in 'dce-fail.stan', line 34, column 2 to column 28)",
 " (in 'dce-fail.stan', line 35, column 2 to column 32)",
 " (in 'dce-fail.stan', line 37, column 2 to column 24)",
 " (in 'dce-fail.stan', line 40, column 9 to column 10)",
 " (in 'dce-fail.stan', line 40, column 2 to column 14)",
 " (in 'dce-fail.stan', line 41, column 9 to column 16)",
 " (in 'dce-fail.stan', line 41, column 2 to column 30)",
 " (in 'dce-fail.stan', line 43, column 2 to column 23)",
 " (in 'dce-fail.stan', line 44, column 2 to column 28)",
 " (in 'dce-fail.stan', line 45, column 2 to column 27)",
 " (in 'dce-fail.stan', line 46, column 2 to column 34)",
 " (in 'dce-fail.stan', line 48, column 2 to column 31)",
 " (in 'dce-fail.stan', line 49, column 2 to column 31)",
 " (in 'dce-fail.stan', line 50, column 2 to column 37)",
 " (in 'dce-fail.stan', line 54, column 6 to column 48)",
 " (in 'dce-fail.stan', line 53, column 4 to line 54, column 48)",
 " (in 'dce-fail.stan', line 52, column 21 to line 55, column 3)",
 " (in 'dce-fail.stan', line 52, column 2 to line 55, column 3)",
 " (in 'dce-fail.stan', line 57, column 2 to column 28)",
 " (in 'dce-fail.stan', line 60, column 4 to column 64)",
 " (in 'dce-fail.stan', line 59, column 2 to line 60, column 64)",
 " (in 'dce-fail.stan', line 62, column 2 to column 43)",
 " (in 'dce-fail.stan', line 65, column 4 to line 68, column 25)",
 " (in 'dce-fail.stan', line 64, column 2 to line 68, column 25)",
 " (in 'dce-fail.stan', line 70, column 2 to column 19)",
 " (in 'dce-fail.stan', line 2, column 2 to column 17)",
 " (in 'dce-fail.stan', line 3, column 2 to column 21)",
 " (in 'dce-fail.stan', line 4, column 2 to column 21)",
 " (in 'dce-fail.stan', line 5, column 2 to column 24)",
 " (in 'dce-fail.stan', line 6, column 2 to column 23)",
 " (in 'dce-fail.stan', line 8, column 31 to column 32)",
 " (in 'dce-fail.stan', line 8, column 2 to column 34)",
 " (in 'dce-fail.stan', line 9, column 30 to column 31)",
 " (in 'dce-fail.stan', line 9, column 2 to column 33)",
 " (in 'dce-fail.stan', line 10, column 32 to column 33)",
 " (in 'dce-fail.stan', line 10, column 2 to column 35)",
 " (in 'dce-fail.stan', line 11, column 32 to column 33)",
 " (in 'dce-fail.stan', line 11, column 2 to column 35)",
 " (in 'dce-fail.stan', line 12, column 37 to column 44)",
 " (in 'dce-fail.stan', line 12, column 2 to column 46)",
 " (in 'dce-fail.stan', line 13, column 36 to column 37)",
 " (in 'dce-fail.stan', line 13, column 2 to column 39)",
 " (in 'dce-fail.stan', line 14, column 26 to column 27)",
 " (in 'dce-fail.stan', line 14, column 2 to column 29)",
 " (in 'dce-fail.stan', line 15, column 9 to column 16)",
 " (in 'dce-fail.stan', line 15, column 2 to column 25)",
 " (in 'dce-fail.stan', line 32, column 9 to column 14)",
 " (in 'dce-fail.stan', line 33, column 9 to column 14)",
 " (in 'dce-fail.stan', line 34, column 9 to column 17)",
 " (in 'dce-fail.stan', line 35, column 9 to column 14)",
 " (in 'dce-fail.stan', line 35, column 15 to column 20)",
 " (in 'dce-fail.stan', line 37, column 9 to column 16)"};



class dce_fail_model final : public model_base_crtp<dce_fail_model> {

 private:
  int N;
  int n_age;
  int n_edu;
  int n_region;
  int n_state;
  std::vector<int> female;
  std::vector<int> black;
  std::vector<int> age;
  std::vector<int> edu;
  std::vector<int> region;
  std::vector<int> state;
  std::vector<int> y;
  Eigen::Matrix<double, -1, 1> v_prev;
 
 public:
  ~dce_fail_model() { }
  
  inline std::string model_name() const final { return "dce_fail_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  dce_fail_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "dce_fail_model_namespace::dce_fail_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 39;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min(); 
      
      current_statement__ = 39;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 39;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 40;
      context__.validate_dims("data initialization","n_age","int",
           std::vector<size_t>{});
      n_age = std::numeric_limits<int>::min(); 
      
      current_statement__ = 40;
      n_age = context__.vals_i("n_age")[(1 - 1)];
      current_statement__ = 40;
      check_greater_or_equal(function__, "n_age", n_age, 0);
      current_statement__ = 41;
      context__.validate_dims("data initialization","n_edu","int",
           std::vector<size_t>{});
      n_edu = std::numeric_limits<int>::min(); 
      
      current_statement__ = 41;
      n_edu = context__.vals_i("n_edu")[(1 - 1)];
      current_statement__ = 41;
      check_greater_or_equal(function__, "n_edu", n_edu, 0);
      current_statement__ = 42;
      context__.validate_dims("data initialization","n_region","int",
           std::vector<size_t>{});
      n_region = std::numeric_limits<int>::min(); 
      
      current_statement__ = 42;
      n_region = context__.vals_i("n_region")[(1 - 1)];
      current_statement__ = 42;
      check_greater_or_equal(function__, "n_region", n_region, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization","n_state","int",
           std::vector<size_t>{});
      n_state = std::numeric_limits<int>::min(); 
      
      current_statement__ = 43;
      n_state = context__.vals_i("n_state")[(1 - 1)];
      current_statement__ = 43;
      check_greater_or_equal(function__, "n_state", n_state, 0);
      current_statement__ = 44;
      validate_non_negative_index("female", "N", N);
      current_statement__ = 45;
      context__.validate_dims("data initialization","female","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      female = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 45;
      female = context__.vals_i("female");
      current_statement__ = 45;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 45;
        check_greater_or_equal(function__, "female[sym1__]",
                               female[(sym1__ - 1)], 0);
      }
      current_statement__ = 45;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 45;
        check_less_or_equal(function__, "female[sym1__]",
                            female[(sym1__ - 1)], 1);
      }
      current_statement__ = 46;
      validate_non_negative_index("black", "N", N);
      current_statement__ = 47;
      context__.validate_dims("data initialization","black","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      black = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 47;
      black = context__.vals_i("black");
      current_statement__ = 47;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 47;
        check_greater_or_equal(function__, "black[sym1__]",
                               black[(sym1__ - 1)], 0);
      }
      current_statement__ = 47;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 47;
        check_less_or_equal(function__, "black[sym1__]", black[(sym1__ - 1)],
                            1);
      }
      current_statement__ = 48;
      validate_non_negative_index("age", "N", N);
      current_statement__ = 49;
      context__.validate_dims("data initialization","age","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      age = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 49;
      age = context__.vals_i("age");
      current_statement__ = 49;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 49;
        check_greater_or_equal(function__, "age[sym1__]", age[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 49;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 49;
        check_less_or_equal(function__, "age[sym1__]", age[(sym1__ - 1)],
                            n_age);
      }
      current_statement__ = 50;
      validate_non_negative_index("edu", "N", N);
      current_statement__ = 51;
      context__.validate_dims("data initialization","edu","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      edu = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 51;
      edu = context__.vals_i("edu");
      current_statement__ = 51;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 51;
        check_greater_or_equal(function__, "edu[sym1__]", edu[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 51;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 51;
        check_less_or_equal(function__, "edu[sym1__]", edu[(sym1__ - 1)],
                            n_edu);
      }
      current_statement__ = 52;
      validate_non_negative_index("region", "n_state", n_state);
      current_statement__ = 53;
      context__.validate_dims("data initialization","region","int",
           std::vector<size_t>{static_cast<size_t>(n_state)});
      region = std::vector<int>(n_state, std::numeric_limits<int>::min()); 
      
      current_statement__ = 53;
      region = context__.vals_i("region");
      current_statement__ = 53;
      for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
        current_statement__ = 53;
        check_greater_or_equal(function__, "region[sym1__]",
                               region[(sym1__ - 1)], 0);
      }
      current_statement__ = 53;
      for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
        current_statement__ = 53;
        check_less_or_equal(function__, "region[sym1__]",
                            region[(sym1__ - 1)], n_state);
      }
      current_statement__ = 54;
      validate_non_negative_index("state", "N", N);
      current_statement__ = 55;
      context__.validate_dims("data initialization","state","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      state = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 55;
      state = context__.vals_i("state");
      current_statement__ = 55;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 55;
        check_greater_or_equal(function__, "state[sym1__]",
                               state[(sym1__ - 1)], 0);
      }
      current_statement__ = 55;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 55;
        check_less_or_equal(function__, "state[sym1__]", state[(sym1__ - 1)],
                            n_state);
      }
      current_statement__ = 56;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 57;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 57;
      y = context__.vals_i("y");
      current_statement__ = 57;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 57;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);
      }
      current_statement__ = 57;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 57;
        check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 1);
      }
      current_statement__ = 58;
      validate_non_negative_index("v_prev", "n_state", n_state);
      current_statement__ = 59;
      context__.validate_dims("data initialization","v_prev","double",
           std::vector<size_t>{static_cast<size_t>(n_state)});
      v_prev = Eigen::Matrix<double, -1, 1>(n_state); 
      
      {
        std::vector<double> v_prev_flat__;
        current_statement__ = 59;
        v_prev_flat__ = context__.vals_r("v_prev");
        current_statement__ = 59;
        pos__ = 1;
        current_statement__ = 59;
        for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
          current_statement__ = 59;
          assign(v_prev, v_prev_flat__[(pos__ - 1)],
            "assigning variable v_prev", index_uni(sym1__));
          current_statement__ = 59;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 60;
      validate_non_negative_index("b_age", "n_age", n_age);
      current_statement__ = 61;
      validate_non_negative_index("b_edu", "n_edu", n_edu);
      current_statement__ = 62;
      validate_non_negative_index("b_region", "n_region", n_region);
      current_statement__ = 63;
      validate_non_negative_index("b_age_edu", "n_age", n_age);
      current_statement__ = 64;
      validate_non_negative_index("b_age_edu", "n_edu", n_edu);
      current_statement__ = 65;
      validate_non_negative_index("b_hat", "n_state", n_state);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + n_age
       + n_edu + n_region + (n_age * n_edu) + n_state;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "dce_fail_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__; 
      
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ sigma_age;
      sigma_age = DUMMY_VAR__; 
      
      current_statement__ = 2;
      sigma_age = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      local_scalar_t__ sigma_edu;
      sigma_edu = DUMMY_VAR__; 
      
      current_statement__ = 3;
      sigma_edu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      local_scalar_t__ sigma_state;
      sigma_state = DUMMY_VAR__; 
      
      current_statement__ = 4;
      sigma_state = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      local_scalar_t__ sigma_region;
      sigma_region = DUMMY_VAR__; 
      
      current_statement__ = 5;
      sigma_region = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                       0, lp__);
      local_scalar_t__ sigma_age_edu;
      sigma_age_edu = DUMMY_VAR__; 
      
      current_statement__ = 6;
      sigma_age_edu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                        0, lp__);
      local_scalar_t__ b_0;
      b_0 = DUMMY_VAR__; 
      
      current_statement__ = 7;
      b_0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_female;
      b_female = DUMMY_VAR__; 
      
      current_statement__ = 8;
      b_female = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_black;
      b_black = DUMMY_VAR__; 
      
      current_statement__ = 9;
      b_black = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_female_black;
      b_female_black = DUMMY_VAR__; 
      
      current_statement__ = 10;
      b_female_black = in__.template read<local_scalar_t__>();
      local_scalar_t__ b_v_prev;
      b_v_prev = DUMMY_VAR__; 
      
      current_statement__ = 11;
      b_v_prev = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> b_age;
      b_age = Eigen::Matrix<local_scalar_t__, -1, 1>(n_age);
      stan::math::fill(b_age, DUMMY_VAR__); 
      
      current_statement__ = 12;
      b_age = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                n_age);
      Eigen::Matrix<local_scalar_t__, -1, 1> b_edu;
      b_edu = Eigen::Matrix<local_scalar_t__, -1, 1>(n_edu);
      stan::math::fill(b_edu, DUMMY_VAR__); 
      
      current_statement__ = 13;
      b_edu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                n_edu);
      Eigen::Matrix<local_scalar_t__, -1, 1> b_region;
      b_region = Eigen::Matrix<local_scalar_t__, -1, 1>(n_region);
      stan::math::fill(b_region, DUMMY_VAR__); 
      
      current_statement__ = 14;
      b_region = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   n_region);
      Eigen::Matrix<local_scalar_t__, -1, -1> b_age_edu;
      b_age_edu = Eigen::Matrix<local_scalar_t__, -1, -1>(n_age, n_edu);
      stan::math::fill(b_age_edu, DUMMY_VAR__); 
      
      current_statement__ = 15;
      b_age_edu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    n_age, n_edu);
      Eigen::Matrix<local_scalar_t__, -1, 1> b_hat;
      b_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(n_state);
      stan::math::fill(b_hat, DUMMY_VAR__); 
      
      current_statement__ = 16;
      b_hat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                n_state);
      {
        current_statement__ = 17;
        validate_non_negative_index("p", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> p;
        p = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(p, DUMMY_VAR__); 
        
        current_statement__ = 19;
        validate_non_negative_index("b_state_hat", "n_state", n_state);
        Eigen::Matrix<local_scalar_t__, -1, 1> b_state_hat;
        b_state_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(n_state);
        stan::math::fill(b_state_hat, DUMMY_VAR__); 
        
        current_statement__ = 21;
        lp_accum__.add(normal_lpdf<propto__>(b_0, 0, 100));
        current_statement__ = 22;
        lp_accum__.add(normal_lpdf<propto__>(b_female, 0, 100));
        current_statement__ = 23;
        lp_accum__.add(normal_lpdf<propto__>(b_black, 0, 100));
        current_statement__ = 24;
        lp_accum__.add(normal_lpdf<propto__>(b_female_black, 0, 100));
        current_statement__ = 25;
        lp_accum__.add(normal_lpdf<propto__>(b_age, 0, sigma_age));
        current_statement__ = 26;
        lp_accum__.add(normal_lpdf<propto__>(b_edu, 0, sigma_edu));
        current_statement__ = 27;
        lp_accum__.add(normal_lpdf<propto__>(b_region, 0, sigma_region));
        current_statement__ = 31;
        for (int j = 1; j <= n_age; ++j) {
          current_statement__ = 29;
          for (int i = 1; i <= n_edu; ++i) {
            current_statement__ = 28;
            lp_accum__.add(
              normal_lpdf<propto__>(
                rvalue(b_age_edu, "b_age_edu", index_uni(j), index_uni(i)),
                0, sigma_age_edu));
          }
        }
        current_statement__ = 32;
        lp_accum__.add(normal_lpdf<propto__>(b_v_prev, 0, 100));
        current_statement__ = 34;
        for (int j = 1; j <= n_state; ++j) {
          current_statement__ = 33;
          assign(b_state_hat,
            (rvalue(b_region, "b_region",
               index_uni(rvalue(region, "region", index_uni(j)))) +
              (b_v_prev * rvalue(v_prev, "v_prev", index_uni(j)))),
            "assigning variable b_state_hat", index_uni(j));
        }
        current_statement__ = 35;
        lp_accum__.add(normal_lpdf<propto__>(b_hat, b_state_hat, sigma_state));
        current_statement__ = 37;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 36;
          assign(p,
            stan::math::fmax(0,
              stan::math::fmin(1,
                inv_logit(
                  (((((((b_0 +
                          (b_female * rvalue(female, "female", index_uni(i))))
                         + (b_black * rvalue(black, "black", index_uni(i))))
                        +
                        ((b_female_black *
                           rvalue(female, "female", index_uni(i))) *
                          rvalue(black, "black", index_uni(i)))) +
                       rvalue(b_age, "b_age",
                         index_uni(rvalue(age, "age", index_uni(i))))) +
                      rvalue(b_edu, "b_edu",
                        index_uni(rvalue(edu, "edu", index_uni(i))))) +
                     rvalue(b_age_edu, "b_age_edu",
                       index_uni(rvalue(age, "age", index_uni(i))),
                         index_uni(rvalue(edu, "edu", index_uni(i))))) +
                    rvalue(b_hat, "b_hat",
                      index_uni(rvalue(state, "state", index_uni(i)))))))),
            "assigning variable p", index_uni(i));
        }
        current_statement__ = 38;
        lp_accum__.add(bernoulli_lpmf<propto__>(y, p));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "dce_fail_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double sigma_age;
      sigma_age = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      sigma_age = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      double sigma_edu;
      sigma_edu = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      sigma_edu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      double sigma_state;
      sigma_state = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      sigma_state = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                      0, lp__);
      double sigma_region;
      sigma_region = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      sigma_region = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                       0, lp__);
      double sigma_age_edu;
      sigma_age_edu = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 6;
      sigma_age_edu = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                        0, lp__);
      double b_0;
      b_0 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 7;
      b_0 = in__.template read<local_scalar_t__>();
      double b_female;
      b_female = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 8;
      b_female = in__.template read<local_scalar_t__>();
      double b_black;
      b_black = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 9;
      b_black = in__.template read<local_scalar_t__>();
      double b_female_black;
      b_female_black = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 10;
      b_female_black = in__.template read<local_scalar_t__>();
      double b_v_prev;
      b_v_prev = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 11;
      b_v_prev = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> b_age;
      b_age = Eigen::Matrix<double, -1, 1>(n_age);
      stan::math::fill(b_age, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 12;
      b_age = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                n_age);
      Eigen::Matrix<double, -1, 1> b_edu;
      b_edu = Eigen::Matrix<double, -1, 1>(n_edu);
      stan::math::fill(b_edu, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 13;
      b_edu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                n_edu);
      Eigen::Matrix<double, -1, 1> b_region;
      b_region = Eigen::Matrix<double, -1, 1>(n_region);
      stan::math::fill(b_region, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 14;
      b_region = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   n_region);
      Eigen::Matrix<double, -1, -1> b_age_edu;
      b_age_edu = Eigen::Matrix<double, -1, -1>(n_age, n_edu);
      stan::math::fill(b_age_edu, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 15;
      b_age_edu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    n_age, n_edu);
      Eigen::Matrix<double, -1, 1> b_hat;
      b_hat = Eigen::Matrix<double, -1, 1>(n_state);
      stan::math::fill(b_hat, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 16;
      b_hat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                n_state);
      vars__.emplace_back(sigma);
      vars__.emplace_back(sigma_age);
      vars__.emplace_back(sigma_edu);
      vars__.emplace_back(sigma_state);
      vars__.emplace_back(sigma_region);
      vars__.emplace_back(sigma_age_edu);
      vars__.emplace_back(b_0);
      vars__.emplace_back(b_female);
      vars__.emplace_back(b_black);
      vars__.emplace_back(b_female_black);
      vars__.emplace_back(b_v_prev);
      for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
        vars__.emplace_back(b_age[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
        vars__.emplace_back(b_edu[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_region; ++sym1__) {
        vars__.emplace_back(b_region[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_age; ++sym2__) {
          vars__.emplace_back(
            rvalue(b_age_edu, "b_age_edu",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
        vars__.emplace_back(b_hat[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      double sigma_age;
      sigma_age = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      sigma_age = context__.vals_r("sigma_age")[(1 - 1)];
      double sigma_age_free__;
      sigma_age_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      sigma_age_free__ = stan::math::lb_free(sigma_age, 0);
      double sigma_edu;
      sigma_edu = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      sigma_edu = context__.vals_r("sigma_edu")[(1 - 1)];
      double sigma_edu_free__;
      sigma_edu_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      sigma_edu_free__ = stan::math::lb_free(sigma_edu, 0);
      double sigma_state;
      sigma_state = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      sigma_state = context__.vals_r("sigma_state")[(1 - 1)];
      double sigma_state_free__;
      sigma_state_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      sigma_state_free__ = stan::math::lb_free(sigma_state, 0);
      double sigma_region;
      sigma_region = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      sigma_region = context__.vals_r("sigma_region")[(1 - 1)];
      double sigma_region_free__;
      sigma_region_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      sigma_region_free__ = stan::math::lb_free(sigma_region, 0);
      double sigma_age_edu;
      sigma_age_edu = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 6;
      sigma_age_edu = context__.vals_r("sigma_age_edu")[(1 - 1)];
      double sigma_age_edu_free__;
      sigma_age_edu_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 6;
      sigma_age_edu_free__ = stan::math::lb_free(sigma_age_edu, 0);
      double b_0;
      b_0 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 7;
      b_0 = context__.vals_r("b_0")[(1 - 1)];
      double b_female;
      b_female = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 8;
      b_female = context__.vals_r("b_female")[(1 - 1)];
      double b_black;
      b_black = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 9;
      b_black = context__.vals_r("b_black")[(1 - 1)];
      double b_female_black;
      b_female_black = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 10;
      b_female_black = context__.vals_r("b_female_black")[(1 - 1)];
      double b_v_prev;
      b_v_prev = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 11;
      b_v_prev = context__.vals_r("b_v_prev")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> b_age;
      b_age = Eigen::Matrix<double, -1, 1>(n_age);
      stan::math::fill(b_age, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> b_age_flat__;
        current_statement__ = 12;
        b_age_flat__ = context__.vals_r("b_age");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
          current_statement__ = 12;
          assign(b_age, b_age_flat__[(pos__ - 1)],
            "assigning variable b_age", index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> b_edu;
      b_edu = Eigen::Matrix<double, -1, 1>(n_edu);
      stan::math::fill(b_edu, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> b_edu_flat__;
        current_statement__ = 13;
        b_edu_flat__ = context__.vals_r("b_edu");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
          current_statement__ = 13;
          assign(b_edu, b_edu_flat__[(pos__ - 1)],
            "assigning variable b_edu", index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> b_region;
      b_region = Eigen::Matrix<double, -1, 1>(n_region);
      stan::math::fill(b_region, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> b_region_flat__;
        current_statement__ = 14;
        b_region_flat__ = context__.vals_r("b_region");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= n_region; ++sym1__) {
          current_statement__ = 14;
          assign(b_region, b_region_flat__[(pos__ - 1)],
            "assigning variable b_region", index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> b_age_edu;
      b_age_edu = Eigen::Matrix<double, -1, -1>(n_age, n_edu);
      stan::math::fill(b_age_edu, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> b_age_edu_flat__;
        current_statement__ = 15;
        b_age_edu_flat__ = context__.vals_r("b_age_edu");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
          current_statement__ = 15;
          for (int sym2__ = 1; sym2__ <= n_age; ++sym2__) {
            current_statement__ = 15;
            assign(b_age_edu, b_age_edu_flat__[(pos__ - 1)],
              "assigning variable b_age_edu", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 15;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> b_hat;
      b_hat = Eigen::Matrix<double, -1, 1>(n_state);
      stan::math::fill(b_hat, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> b_hat_flat__;
        current_statement__ = 16;
        b_hat_flat__ = context__.vals_r("b_hat");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
          current_statement__ = 16;
          assign(b_hat, b_hat_flat__[(pos__ - 1)],
            "assigning variable b_hat", index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(sigma_free__);
      vars__.emplace_back(sigma_age_free__);
      vars__.emplace_back(sigma_edu_free__);
      vars__.emplace_back(sigma_state_free__);
      vars__.emplace_back(sigma_region_free__);
      vars__.emplace_back(sigma_age_edu_free__);
      vars__.emplace_back(b_0);
      vars__.emplace_back(b_female);
      vars__.emplace_back(b_black);
      vars__.emplace_back(b_female_black);
      vars__.emplace_back(b_v_prev);
      for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
        vars__.emplace_back(b_age[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
        vars__.emplace_back(b_edu[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_region; ++sym1__) {
        vars__.emplace_back(b_region[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_age; ++sym2__) {
          vars__.emplace_back(
            rvalue(b_age_edu, "b_age_edu",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
        vars__.emplace_back(b_hat[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"sigma", "sigma_age", "sigma_edu",
      "sigma_state", "sigma_region", "sigma_age_edu", "b_0", "b_female",
      "b_black", "b_female_black", "b_v_prev", "b_age", "b_edu", "b_region",
      "b_age_edu", "b_hat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n_age)},
      std::vector<size_t>{static_cast<size_t>(n_edu)},
      std::vector<size_t>{static_cast<size_t>(n_region)},
      std::vector<size_t>{static_cast<size_t>(n_age),
                          static_cast<size_t>(n_edu)},
      std::vector<size_t>{static_cast<size_t>(n_state)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigma_age");
    param_names__.emplace_back(std::string() + "sigma_edu");
    param_names__.emplace_back(std::string() + "sigma_state");
    param_names__.emplace_back(std::string() + "sigma_region");
    param_names__.emplace_back(std::string() + "sigma_age_edu");
    param_names__.emplace_back(std::string() + "b_0");
    param_names__.emplace_back(std::string() + "b_female");
    param_names__.emplace_back(std::string() + "b_black");
    param_names__.emplace_back(std::string() + "b_female_black");
    param_names__.emplace_back(std::string() + "b_v_prev");
    for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_age" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_edu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_region; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_region" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_age; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_age_edu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_hat" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigma_age");
    param_names__.emplace_back(std::string() + "sigma_edu");
    param_names__.emplace_back(std::string() + "sigma_state");
    param_names__.emplace_back(std::string() + "sigma_region");
    param_names__.emplace_back(std::string() + "sigma_age_edu");
    param_names__.emplace_back(std::string() + "b_0");
    param_names__.emplace_back(std::string() + "b_female");
    param_names__.emplace_back(std::string() + "b_black");
    param_names__.emplace_back(std::string() + "b_female_black");
    param_names__.emplace_back(std::string() + "b_v_prev");
    for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_age" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_edu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_region; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_region" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_age; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_age_edu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_hat" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_edu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_state\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_region\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_age_edu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_female\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_black\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_female_black\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_v_prev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_age\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age) + "},\"block\":\"parameters\"},{\"name\":\"b_edu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_edu) + "},\"block\":\"parameters\"},{\"name\":\"b_region\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_region) + "},\"block\":\"parameters\"},{\"name\":\"b_age_edu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_age) + ",\"cols\":" + std::to_string(n_edu) + "},\"block\":\"parameters\"},{\"name\":\"b_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_state) + "},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_age\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_edu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_state\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_region\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_age_edu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_female\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_black\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_female_black\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_v_prev\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_age\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age) + "},\"block\":\"parameters\"},{\"name\":\"b_edu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_edu) + "},\"block\":\"parameters\"},{\"name\":\"b_region\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_region) + "},\"block\":\"parameters\"},{\"name\":\"b_age_edu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_age) + ",\"cols\":" + std::to_string(n_edu) + "},\"block\":\"parameters\"},{\"name\":\"b_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_state) + "},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = dce_fail_model_namespace::dce_fail_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return dce_fail_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-experiment.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_experiment_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 10> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-experiment.stan', line 2, column 2 to column 8)",
 " (in 'expr-prop-experiment.stan', line 5, column 2 to column 9)",
 " (in 'expr-prop-experiment.stan', line 6, column 2 to column 9)",
 " (in 'expr-prop-experiment.stan', line 7, column 2 to column 9)",
 " (in 'expr-prop-experiment.stan', line 8, column 2 to column 28)",
 " (in 'expr-prop-experiment.stan', line 9, column 2 to column 12)",
 " (in 'expr-prop-experiment.stan', line 10, column 2 to column 23)",
 " (in 'expr-prop-experiment.stan', line 11, column 2 to column 23)",
 " (in 'expr-prop-experiment.stan', line 12, column 2 to column 23)"};



class expr_prop_experiment_model final : public model_base_crtp<expr_prop_experiment_model> {

 private:
  int j;
  double z;
  double x;
  double y;
  double i;
 
 public:
  ~expr_prop_experiment_model() { }
  
  inline std::string model_name() const final { return "expr_prop_experiment_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_experiment_model(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_experiment_model_namespace::expr_prop_experiment_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 1;
      context__.validate_dims("data initialization","j","int",
           std::vector<size_t>{});
      j = std::numeric_limits<int>::min(); 
      
      current_statement__ = 1;
      j = context__.vals_i("j")[(1 - 1)];
      current_statement__ = 2;
      z = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      x = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      y = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      i = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      i = normal_rng(5, 1, base_rng__);
      current_statement__ = 6;
      z = (i * j);
      current_statement__ = 7;
      x = normal_rng(z, 1, base_rng__);
      current_statement__ = 8;
      i = normal_rng(5, 1, base_rng__);
      current_statement__ = 9;
      y = normal_rng(z, 1, base_rng__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_experiment_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_experiment_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = expr_prop_experiment_model_namespace::expr_prop_experiment_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_experiment_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-experiment2.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_experiment2_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 9> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-experiment2.stan', line 2, column 2 to column 8)",
 " (in 'expr-prop-experiment2.stan', line 5, column 2 to column 13)",
 " (in 'expr-prop-experiment2.stan', line 6, column 2 to column 9)",
 " (in 'expr-prop-experiment2.stan', line 8, column 4 to column 32)",
 " (in 'expr-prop-experiment2.stan', line 9, column 4 to column 14)",
 " (in 'expr-prop-experiment2.stan', line 10, column 4 to column 25)",
 " (in 'expr-prop-experiment2.stan', line 7, column 2 to line 11, column 3)",
 " (in 'expr-prop-experiment2.stan', line 12, column 2 to column 23)"};



class expr_prop_experiment2_model final : public model_base_crtp<expr_prop_experiment2_model> {

 private:
  int j;
  double z;
  double y;
 
 public:
  ~expr_prop_experiment2_model() { }
  
  inline std::string model_name() const final { return "expr_prop_experiment2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_experiment2_model(stan::io::var_context& context__,
                              unsigned int random_seed__ = 0,
                              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_experiment2_model_namespace::expr_prop_experiment2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 1;
      context__.validate_dims("data initialization","j","int",
           std::vector<size_t>{});
      j = std::numeric_limits<int>::min(); 
      
      current_statement__ = 1;
      j = context__.vals_i("j")[(1 - 1)];
      current_statement__ = 2;
      z = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      z = 1;
      current_statement__ = 3;
      y = std::numeric_limits<double>::quiet_NaN(); 
      
      {
        double x;
        x = std::numeric_limits<double>::quiet_NaN(); 
        
        current_statement__ = 4;
        x = normal_rng(123, 1, base_rng__);
        current_statement__ = 5;
        z = (x * 2);
        current_statement__ = 6;
        y = normal_rng(z, 1, base_rng__);
      }
      current_statement__ = 8;
      y = normal_rng(z, 1, base_rng__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_experiment2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_experiment2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = expr_prop_experiment2_model_namespace::expr_prop_experiment2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_experiment2_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-fail.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_fail_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 12> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-fail.stan', line 7, column 2 to column 16)",
 " (in 'expr-prop-fail.stan', line 8, column 2 to column 25)",
 " (in 'expr-prop-fail.stan', line 9, column 2 to column 31)",
 " (in 'expr-prop-fail.stan', line 13, column 1 to column 22)",
 " (in 'expr-prop-fail.stan', line 14, column 1 to column 19)",
 " (in 'expr-prop-fail.stan', line 15, column 1 to column 20)",
 " (in 'expr-prop-fail.stan', line 17, column 3 to line 19, column 58)",
 " (in 'expr-prop-fail.stan', line 16, column 1 to line 19, column 58)",
 " (in 'expr-prop-fail.stan', line 2, column 1 to column 18)",
 " (in 'expr-prop-fail.stan', line 3, column 8 to column 9)",
 " (in 'expr-prop-fail.stan', line 3, column 1 to column 13)"};



class expr_prop_fail_model final : public model_base_crtp<expr_prop_fail_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> y;
 
 public:
  ~expr_prop_fail_model() { }
  
  inline std::string model_name() const final { return "expr_prop_fail_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_fail_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail_model_namespace::expr_prop_fail_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min(); 
      
      current_statement__ = 9;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 9;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 10;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 11;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> y_flat__;
        current_statement__ = 11;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 2 + 2 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(mu, DUMMY_VAR__); 
      
      current_statement__ = 1;
      mu = in__.template read_constrain_ordered<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
             lp__, 2);
      std::vector<local_scalar_t__> sigma;
      sigma = std::vector<local_scalar_t__>(2, DUMMY_VAR__); 
      
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                0, lp__, 2);
      local_scalar_t__ theta;
      theta = DUMMY_VAR__; 
      
      current_statement__ = 3;
      theta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 1, lp__);
      {
        current_statement__ = 4;
        lp_accum__.add(normal_lpdf<propto__>(sigma, 0, 2));
        current_statement__ = 5;
        lp_accum__.add(normal_lpdf<propto__>(mu, 0, 2));
        current_statement__ = 6;
        lp_accum__.add(beta_lpdf<propto__>(theta, 5, 5));
        current_statement__ = 8;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 7;
          lp_accum__.add(
            log_mix(theta,
              normal_lpdf<false>(rvalue(y, "y", index_uni(n)),
                rvalue(mu, "mu", index_uni(1)),
                rvalue(sigma, "sigma", index_uni(1))),
              normal_lpdf<false>(rvalue(y, "y", index_uni(n)),
                rvalue(mu, "mu", index_uni(2)),
                rvalue(sigma, "sigma", index_uni(2)))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 1;
      mu = in__.template read_constrain_ordered<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
             lp__, 2);
      std::vector<double> sigma;
      sigma = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                0, lp__, 2);
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      theta = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 1, lp__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);
      }
      vars__.emplace_back(theta);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> mu_flat__;
        current_statement__ = 1;
        mu_flat__ = context__.vals_r("mu");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 1;
          assign(mu, mu_flat__[(pos__ - 1)],
            "assigning variable mu", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> mu_free__;
      mu_free__ = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(mu_free__, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 1;
      assign(mu_free__, stan::math::ordered_free(mu),
        "assigning variable mu_free__");
      std::vector<double> sigma;
      sigma = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 2;
      sigma = context__.vals_r("sigma");
      std::vector<double> sigma_free__;
      sigma_free__ = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_free__, stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__", index_uni(sym1__));
      }
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      theta = context__.vals_r("theta")[(1 - 1)];
      double theta_free__;
      theta_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      theta_free__ = stan::math::lub_free(theta, 0, 1);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(mu_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);
      }
      vars__.emplace_back(theta_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu", "sigma", "theta"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "theta");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "theta");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = expr_prop_fail_model_namespace::expr_prop_fail_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_fail_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-fail2.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_fail2_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 12> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-fail2.stan', line 7, column 2 to column 10)",
 " (in 'expr-prop-fail2.stan', line 8, column 2 to column 16)",
 " (in 'expr-prop-fail2.stan', line 9, column 2 to column 20)",
 " (in 'expr-prop-fail2.stan', line 12, column 2 to column 26)",
 " (in 'expr-prop-fail2.stan', line 13, column 2 to column 26)",
 " (in 'expr-prop-fail2.stan', line 2, column 2 to column 17)",
 " (in 'expr-prop-fail2.stan', line 3, column 9 to column 10)",
 " (in 'expr-prop-fail2.stan', line 3, column 2 to column 12)",
 " (in 'expr-prop-fail2.stan', line 4, column 22 to column 23)",
 " (in 'expr-prop-fail2.stan', line 4, column 2 to column 25)",
 " (in 'expr-prop-fail2.stan', line 8, column 13 to column 14)"};



class expr_prop_fail2_model final : public model_base_crtp<expr_prop_fail2_model> {

 private:
  int J;
  std::vector<double> y;
  std::vector<double> sigma;
 
 public:
  ~expr_prop_fail2_model() { }
  
  inline std::string model_name() const final { return "expr_prop_fail2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_fail2_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail2_model_namespace::expr_prop_fail2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 6;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min(); 
      
      current_statement__ = 6;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 6;
      check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 7;
      validate_non_negative_index("y", "J", J);
      current_statement__ = 8;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(J)});
      y = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 8;
      y = context__.vals_r("y");
      current_statement__ = 9;
      validate_non_negative_index("sigma", "J", J);
      current_statement__ = 10;
      context__.validate_dims("data initialization","sigma","double",
           std::vector<size_t>{static_cast<size_t>(J)});
      sigma = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 10;
      sigma = context__.vals_r("sigma");
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 10;
        check_greater_or_equal(function__, "sigma[sym1__]",
                               sigma[(sym1__ - 1)], 0);
      }
      current_statement__ = 11;
      validate_non_negative_index("theta", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + J + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu;
      mu = DUMMY_VAR__; 
      
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(J, DUMMY_VAR__); 
      
      current_statement__ = 2;
      theta = in__.template read<std::vector<local_scalar_t__>>(J);
      local_scalar_t__ tau;
      tau = DUMMY_VAR__; 
      
      current_statement__ = 3;
      tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      {
        current_statement__ = 4;
        lp_accum__.add(normal_lpdf<propto__>(theta, mu, tau));
        current_statement__ = 5;
        lp_accum__.add(normal_lpdf<propto__>(y, theta, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      std::vector<double> theta;
      theta = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 2;
      theta = in__.template read<std::vector<local_scalar_t__>>(J);
      double tau;
      tau = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      vars__.emplace_back(mu);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);
      }
      vars__.emplace_back(tau);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mu = context__.vals_r("mu")[(1 - 1)];
      std::vector<double> theta;
      theta = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 2;
      theta = context__.vals_r("theta");
      double tau;
      tau = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      tau = context__.vals_r("tau")[(1 - 1)];
      double tau_free__;
      tau_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      tau_free__ = stan::math::lb_free(tau, 0);
      vars__.emplace_back(mu);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);
      }
      vars__.emplace_back(tau_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu", "theta", "tau"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(J)}, std::vector<size_t>{
      }};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "tau");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "tau");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = expr_prop_fail2_model_namespace::expr_prop_fail2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_fail2_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-fail3.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_fail3_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 52> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-fail3.stan', line 19, column 2 to column 18)",
 " (in 'expr-prop-fail3.stan', line 20, column 2 to column 18)",
 " (in 'expr-prop-fail3.stan', line 21, column 2 to column 22)",
 " (in 'expr-prop-fail3.stan', line 22, column 2 to column 20)",
 " (in 'expr-prop-fail3.stan', line 23, column 2 to column 26)",
 " (in 'expr-prop-fail3.stan', line 24, column 2 to column 17)",
 " (in 'expr-prop-fail3.stan', line 25, column 2 to column 34)",
 " (in 'expr-prop-fail3.stan', line 26, column 2 to column 34)",
 " (in 'expr-prop-fail3.stan', line 27, column 2 to column 34)",
 " (in 'expr-prop-fail3.stan', line 28, column 2 to column 34)",
 " (in 'expr-prop-fail3.stan', line 29, column 2 to column 34)",
 " (in 'expr-prop-fail3.stan', line 32, column 2 to column 18)",
 " (in 'expr-prop-fail3.stan', line 35, column 4 to line 38, column 66)",
 " (in 'expr-prop-fail3.stan', line 34, column 2 to line 38, column 66)",
 " (in 'expr-prop-fail3.stan', line 41, column 2 to column 26)",
 " (in 'expr-prop-fail3.stan', line 42, column 2 to column 26)",
 " (in 'expr-prop-fail3.stan', line 43, column 2 to column 26)",
 " (in 'expr-prop-fail3.stan', line 44, column 2 to column 26)",
 " (in 'expr-prop-fail3.stan', line 45, column 2 to column 26)",
 " (in 'expr-prop-fail3.stan', line 46, column 2 to column 24)",
 " (in 'expr-prop-fail3.stan', line 47, column 2 to column 29)",
 " (in 'expr-prop-fail3.stan', line 2, column 2 to column 17)",
 " (in 'expr-prop-fail3.stan', line 3, column 2 to column 21)",
 " (in 'expr-prop-fail3.stan', line 4, column 2 to column 25)",
 " (in 'expr-prop-fail3.stan', line 5, column 2 to column 21)",
 " (in 'expr-prop-fail3.stan', line 6, column 2 to column 29)",
 " (in 'expr-prop-fail3.stan', line 7, column 2 to column 23)",
 " (in 'expr-prop-fail3.stan', line 8, column 31 to column 32)",
 " (in 'expr-prop-fail3.stan', line 8, column 2 to column 34)",
 " (in 'expr-prop-fail3.stan', line 9, column 39 to column 40)",
 " (in 'expr-prop-fail3.stan', line 9, column 2 to column 42)",
 " (in 'expr-prop-fail3.stan', line 10, column 26 to column 27)",
 " (in 'expr-prop-fail3.stan', line 10, column 2 to column 35)",
 " (in 'expr-prop-fail3.stan', line 11, column 31 to column 32)",
 " (in 'expr-prop-fail3.stan', line 11, column 2 to column 34)",
 " (in 'expr-prop-fail3.stan', line 12, column 26 to column 27)",
 " (in 'expr-prop-fail3.stan', line 12, column 2 to column 36)",
 " (in 'expr-prop-fail3.stan', line 13, column 47 to column 48)",
 " (in 'expr-prop-fail3.stan', line 13, column 2 to column 50)",
 " (in 'expr-prop-fail3.stan', line 14, column 35 to column 36)",
 " (in 'expr-prop-fail3.stan', line 14, column 2 to column 38)",
 " (in 'expr-prop-fail3.stan', line 15, column 9 to column 10)",
 " (in 'expr-prop-fail3.stan', line 15, column 2 to column 24)",
 " (in 'expr-prop-fail3.stan', line 16, column 25 to column 26)",
 " (in 'expr-prop-fail3.stan', line 16, column 2 to column 28)",
 " (in 'expr-prop-fail3.stan', line 19, column 9 to column 14)",
 " (in 'expr-prop-fail3.stan', line 20, column 9 to column 14)",
 " (in 'expr-prop-fail3.stan', line 21, column 9 to column 18)",
 " (in 'expr-prop-fail3.stan', line 22, column 9 to column 16)",
 " (in 'expr-prop-fail3.stan', line 23, column 9 to column 22)",
 " (in 'expr-prop-fail3.stan', line 32, column 9 to column 10)"};



class expr_prop_fail3_model final : public model_base_crtp<expr_prop_fail3_model> {

 private:
  int N;
  int n_age;
  int n_age_edu;
  int n_edu;
  int n_region_full;
  int n_state;
  std::vector<int> age;
  std::vector<int> age_edu;
  Eigen::Matrix<double, -1, 1> black;
  std::vector<int> edu;
  Eigen::Matrix<double, -1, 1> female;
  std::vector<int> region_full;
  std::vector<int> state;
  Eigen::Matrix<double, -1, 1> v_prev_full;
  std::vector<int> y;
 
 public:
  ~expr_prop_fail3_model() { }
  
  inline std::string model_name() const final { return "expr_prop_fail3_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_fail3_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail3_model_namespace::expr_prop_fail3_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 22;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min(); 
      
      current_statement__ = 22;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 22;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 23;
      context__.validate_dims("data initialization","n_age","int",
           std::vector<size_t>{});
      n_age = std::numeric_limits<int>::min(); 
      
      current_statement__ = 23;
      n_age = context__.vals_i("n_age")[(1 - 1)];
      current_statement__ = 23;
      check_greater_or_equal(function__, "n_age", n_age, 0);
      current_statement__ = 24;
      context__.validate_dims("data initialization","n_age_edu","int",
           std::vector<size_t>{});
      n_age_edu = std::numeric_limits<int>::min(); 
      
      current_statement__ = 24;
      n_age_edu = context__.vals_i("n_age_edu")[(1 - 1)];
      current_statement__ = 24;
      check_greater_or_equal(function__, "n_age_edu", n_age_edu, 0);
      current_statement__ = 25;
      context__.validate_dims("data initialization","n_edu","int",
           std::vector<size_t>{});
      n_edu = std::numeric_limits<int>::min(); 
      
      current_statement__ = 25;
      n_edu = context__.vals_i("n_edu")[(1 - 1)];
      current_statement__ = 25;
      check_greater_or_equal(function__, "n_edu", n_edu, 0);
      current_statement__ = 26;
      context__.validate_dims("data initialization","n_region_full","int",
           std::vector<size_t>{});
      n_region_full = std::numeric_limits<int>::min(); 
      
      current_statement__ = 26;
      n_region_full = context__.vals_i("n_region_full")[(1 - 1)];
      current_statement__ = 26;
      check_greater_or_equal(function__, "n_region_full", n_region_full, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization","n_state","int",
           std::vector<size_t>{});
      n_state = std::numeric_limits<int>::min(); 
      
      current_statement__ = 27;
      n_state = context__.vals_i("n_state")[(1 - 1)];
      current_statement__ = 27;
      check_greater_or_equal(function__, "n_state", n_state, 0);
      current_statement__ = 28;
      validate_non_negative_index("age", "N", N);
      current_statement__ = 29;
      context__.validate_dims("data initialization","age","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      age = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 29;
      age = context__.vals_i("age");
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 29;
        check_greater_or_equal(function__, "age[sym1__]", age[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 29;
        check_less_or_equal(function__, "age[sym1__]", age[(sym1__ - 1)],
                            n_age);
      }
      current_statement__ = 30;
      validate_non_negative_index("age_edu", "N", N);
      current_statement__ = 31;
      context__.validate_dims("data initialization","age_edu","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      age_edu = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 31;
      age_edu = context__.vals_i("age_edu");
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 31;
        check_greater_or_equal(function__, "age_edu[sym1__]",
                               age_edu[(sym1__ - 1)], 0);
      }
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 31;
        check_less_or_equal(function__, "age_edu[sym1__]",
                            age_edu[(sym1__ - 1)], n_age_edu);
      }
      current_statement__ = 32;
      validate_non_negative_index("black", "N", N);
      current_statement__ = 33;
      context__.validate_dims("data initialization","black","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      black = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> black_flat__;
        current_statement__ = 33;
        black_flat__ = context__.vals_r("black");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 33;
          assign(black, black_flat__[(pos__ - 1)],
            "assigning variable black", index_uni(sym1__));
          current_statement__ = 33;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 33;
        check_greater_or_equal(function__, "black[sym1__]",
                               black[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 33;
        check_less_or_equal(function__, "black[sym1__]", black[(sym1__ - 1)],
                            1);
      }
      current_statement__ = 34;
      validate_non_negative_index("edu", "N", N);
      current_statement__ = 35;
      context__.validate_dims("data initialization","edu","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      edu = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 35;
      edu = context__.vals_i("edu");
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 35;
        check_greater_or_equal(function__, "edu[sym1__]", edu[(sym1__ - 1)],
                               0);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 35;
        check_less_or_equal(function__, "edu[sym1__]", edu[(sym1__ - 1)],
                            n_edu);
      }
      current_statement__ = 36;
      validate_non_negative_index("female", "N", N);
      current_statement__ = 37;
      context__.validate_dims("data initialization","female","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      female = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> female_flat__;
        current_statement__ = 37;
        female_flat__ = context__.vals_r("female");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 37;
          assign(female, female_flat__[(pos__ - 1)],
            "assigning variable female", index_uni(sym1__));
          current_statement__ = 37;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 37;
        check_greater_or_equal(function__, "female[sym1__]",
                               female[(sym1__ - 1)], 0);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 37;
        check_less_or_equal(function__, "female[sym1__]",
                            female[(sym1__ - 1)], 1);
      }
      current_statement__ = 38;
      validate_non_negative_index("region_full", "N", N);
      current_statement__ = 39;
      context__.validate_dims("data initialization","region_full","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      region_full = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 39;
      region_full = context__.vals_i("region_full");
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 39;
        check_greater_or_equal(function__, "region_full[sym1__]",
                               region_full[(sym1__ - 1)], 0);
      }
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 39;
        check_less_or_equal(function__, "region_full[sym1__]",
                            region_full[(sym1__ - 1)], n_region_full);
      }
      current_statement__ = 40;
      validate_non_negative_index("state", "N", N);
      current_statement__ = 41;
      context__.validate_dims("data initialization","state","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      state = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 41;
      state = context__.vals_i("state");
      current_statement__ = 41;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 41;
        check_greater_or_equal(function__, "state[sym1__]",
                               state[(sym1__ - 1)], 0);
      }
      current_statement__ = 41;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 41;
        check_less_or_equal(function__, "state[sym1__]", state[(sym1__ - 1)],
                            n_state);
      }
      current_statement__ = 42;
      validate_non_negative_index("v_prev_full", "N", N);
      current_statement__ = 43;
      context__.validate_dims("data initialization","v_prev_full","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      v_prev_full = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> v_prev_full_flat__;
        current_statement__ = 43;
        v_prev_full_flat__ = context__.vals_r("v_prev_full");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 43;
          assign(v_prev_full, v_prev_full_flat__[(pos__ - 1)],
            "assigning variable v_prev_full", index_uni(sym1__));
          current_statement__ = 43;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 44;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 45;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 45;
      y = context__.vals_i("y");
      current_statement__ = 45;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 45;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);
      }
      current_statement__ = 45;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 45;
        check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 1);
      }
      current_statement__ = 46;
      validate_non_negative_index("a", "n_age", n_age);
      current_statement__ = 47;
      validate_non_negative_index("b", "n_edu", n_edu);
      current_statement__ = 48;
      validate_non_negative_index("c", "n_age_edu", n_age_edu);
      current_statement__ = 49;
      validate_non_negative_index("d", "n_state", n_state);
      current_statement__ = 50;
      validate_non_negative_index("e", "n_region_full", n_region_full);
      current_statement__ = 51;
      validate_non_negative_index("y_hat", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = n_age + n_edu + n_age_edu + n_state + n_region_full + 
      5 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail3_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> a;
      a = Eigen::Matrix<local_scalar_t__, -1, 1>(n_age);
      stan::math::fill(a, DUMMY_VAR__); 
      
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_age);
      Eigen::Matrix<local_scalar_t__, -1, 1> b;
      b = Eigen::Matrix<local_scalar_t__, -1, 1>(n_edu);
      stan::math::fill(b, DUMMY_VAR__); 
      
      current_statement__ = 2;
      b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_edu);
      Eigen::Matrix<local_scalar_t__, -1, 1> c;
      c = Eigen::Matrix<local_scalar_t__, -1, 1>(n_age_edu);
      stan::math::fill(c, DUMMY_VAR__); 
      
      current_statement__ = 3;
      c = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            n_age_edu);
      Eigen::Matrix<local_scalar_t__, -1, 1> d;
      d = Eigen::Matrix<local_scalar_t__, -1, 1>(n_state);
      stan::math::fill(d, DUMMY_VAR__); 
      
      current_statement__ = 4;
      d = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_state);
      Eigen::Matrix<local_scalar_t__, -1, 1> e;
      e = Eigen::Matrix<local_scalar_t__, -1, 1>(n_region_full);
      stan::math::fill(e, DUMMY_VAR__); 
      
      current_statement__ = 5;
      e = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            n_region_full);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(5);
      stan::math::fill(beta, DUMMY_VAR__); 
      
      current_statement__ = 6;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(5);
      local_scalar_t__ sigma_a;
      sigma_a = DUMMY_VAR__; 
      
      current_statement__ = 7;
      sigma_a = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      local_scalar_t__ sigma_b;
      sigma_b = DUMMY_VAR__; 
      
      current_statement__ = 8;
      sigma_b = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      local_scalar_t__ sigma_c;
      sigma_c = DUMMY_VAR__; 
      
      current_statement__ = 9;
      sigma_c = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      local_scalar_t__ sigma_d;
      sigma_d = DUMMY_VAR__; 
      
      current_statement__ = 10;
      sigma_d = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      local_scalar_t__ sigma_e;
      sigma_e = DUMMY_VAR__; 
      
      current_statement__ = 11;
      sigma_e = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat;
      y_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y_hat, DUMMY_VAR__); 
      
      current_statement__ = 14;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 13;
        assign(y_hat,
          (((((((((rvalue(beta, "beta", index_uni(1)) +
                    (rvalue(beta, "beta", index_uni(2)) *
                      rvalue(black, "black", index_uni(i)))) +
                   (rvalue(beta, "beta", index_uni(3)) *
                     rvalue(female, "female", index_uni(i)))) +
                  ((rvalue(beta, "beta", index_uni(5)) *
                     rvalue(female, "female", index_uni(i))) *
                    rvalue(black, "black", index_uni(i)))) +
                 (rvalue(beta, "beta", index_uni(4)) *
                   rvalue(v_prev_full, "v_prev_full", index_uni(i)))) +
                rvalue(a, "a", index_uni(rvalue(age, "age", index_uni(i)))))
               + rvalue(b, "b", index_uni(rvalue(edu, "edu", index_uni(i)))))
              +
              rvalue(c, "c",
                index_uni(rvalue(age_edu, "age_edu", index_uni(i))))) +
             rvalue(d, "d", index_uni(rvalue(state, "state", index_uni(i)))))
            +
            rvalue(e, "e",
              index_uni(rvalue(region_full, "region_full", index_uni(i))))),
          "assigning variable y_hat", index_uni(i));
      }
      {
        current_statement__ = 15;
        lp_accum__.add(normal_lpdf<propto__>(a, 0, sigma_a));
        current_statement__ = 16;
        lp_accum__.add(normal_lpdf<propto__>(b, 0, sigma_b));
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(c, 0, sigma_c));
        current_statement__ = 18;
        lp_accum__.add(normal_lpdf<propto__>(d, 0, sigma_d));
        current_statement__ = 19;
        lp_accum__.add(normal_lpdf<propto__>(e, 0, sigma_e));
        current_statement__ = 20;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0, 100));
        current_statement__ = 21;
        lp_accum__.add(bernoulli_logit_lpmf<propto__>(y, y_hat));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail3_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> a;
      a = Eigen::Matrix<double, -1, 1>(n_age);
      stan::math::fill(a, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_age);
      Eigen::Matrix<double, -1, 1> b;
      b = Eigen::Matrix<double, -1, 1>(n_edu);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_edu);
      Eigen::Matrix<double, -1, 1> c;
      c = Eigen::Matrix<double, -1, 1>(n_age_edu);
      stan::math::fill(c, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 3;
      c = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            n_age_edu);
      Eigen::Matrix<double, -1, 1> d;
      d = Eigen::Matrix<double, -1, 1>(n_state);
      stan::math::fill(d, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 4;
      d = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_state);
      Eigen::Matrix<double, -1, 1> e;
      e = Eigen::Matrix<double, -1, 1>(n_region_full);
      stan::math::fill(e, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 5;
      e = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            n_region_full);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 6;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(5);
      double sigma_a;
      sigma_a = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 7;
      sigma_a = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      double sigma_b;
      sigma_b = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 8;
      sigma_b = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      double sigma_c;
      sigma_c = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 9;
      sigma_c = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      double sigma_d;
      sigma_d = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 10;
      sigma_d = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      double sigma_e;
      sigma_e = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 11;
      sigma_e = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat;
      y_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y_hat, DUMMY_VAR__); 
      
      for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
        vars__.emplace_back(a[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
        vars__.emplace_back(b[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_age_edu; ++sym1__) {
        vars__.emplace_back(c[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
        vars__.emplace_back(d[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_region_full; ++sym1__) {
        vars__.emplace_back(e[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma_a);
      vars__.emplace_back(sigma_b);
      vars__.emplace_back(sigma_c);
      vars__.emplace_back(sigma_d);
      vars__.emplace_back(sigma_e);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 14;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 13;
        assign(y_hat,
          (((((((((rvalue(beta, "beta", index_uni(1)) +
                    (rvalue(beta, "beta", index_uni(2)) *
                      rvalue(black, "black", index_uni(i)))) +
                   (rvalue(beta, "beta", index_uni(3)) *
                     rvalue(female, "female", index_uni(i)))) +
                  ((rvalue(beta, "beta", index_uni(5)) *
                     rvalue(female, "female", index_uni(i))) *
                    rvalue(black, "black", index_uni(i)))) +
                 (rvalue(beta, "beta", index_uni(4)) *
                   rvalue(v_prev_full, "v_prev_full", index_uni(i)))) +
                rvalue(a, "a", index_uni(rvalue(age, "age", index_uni(i)))))
               + rvalue(b, "b", index_uni(rvalue(edu, "edu", index_uni(i)))))
              +
              rvalue(c, "c",
                index_uni(rvalue(age_edu, "age_edu", index_uni(i))))) +
             rvalue(d, "d", index_uni(rvalue(state, "state", index_uni(i)))))
            +
            rvalue(e, "e",
              index_uni(rvalue(region_full, "region_full", index_uni(i))))),
          "assigning variable y_hat", index_uni(i));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(y_hat[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> a;
      a = Eigen::Matrix<double, -1, 1>(n_age);
      stan::math::fill(a, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> a_flat__;
        current_statement__ = 1;
        a_flat__ = context__.vals_r("a");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
          current_statement__ = 1;
          assign(a, a_flat__[(pos__ - 1)],
            "assigning variable a", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> b;
      b = Eigen::Matrix<double, -1, 1>(n_edu);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> b_flat__;
        current_statement__ = 2;
        b_flat__ = context__.vals_r("b");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
          current_statement__ = 2;
          assign(b, b_flat__[(pos__ - 1)],
            "assigning variable b", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> c;
      c = Eigen::Matrix<double, -1, 1>(n_age_edu);
      stan::math::fill(c, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> c_flat__;
        current_statement__ = 3;
        c_flat__ = context__.vals_r("c");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_age_edu; ++sym1__) {
          current_statement__ = 3;
          assign(c, c_flat__[(pos__ - 1)],
            "assigning variable c", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> d;
      d = Eigen::Matrix<double, -1, 1>(n_state);
      stan::math::fill(d, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> d_flat__;
        current_statement__ = 4;
        d_flat__ = context__.vals_r("d");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
          current_statement__ = 4;
          assign(d, d_flat__[(pos__ - 1)],
            "assigning variable d", index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> e;
      e = Eigen::Matrix<double, -1, 1>(n_region_full);
      stan::math::fill(e, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> e_flat__;
        current_statement__ = 5;
        e_flat__ = context__.vals_r("e");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= n_region_full; ++sym1__) {
          current_statement__ = 5;
          assign(e, e_flat__[(pos__ - 1)],
            "assigning variable e", index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(5);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> beta_flat__;
        current_statement__ = 6;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 6;
          assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      double sigma_a;
      sigma_a = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 7;
      sigma_a = context__.vals_r("sigma_a")[(1 - 1)];
      double sigma_a_free__;
      sigma_a_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 7;
      sigma_a_free__ = stan::math::lub_free(sigma_a, 0, 100);
      double sigma_b;
      sigma_b = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 8;
      sigma_b = context__.vals_r("sigma_b")[(1 - 1)];
      double sigma_b_free__;
      sigma_b_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 8;
      sigma_b_free__ = stan::math::lub_free(sigma_b, 0, 100);
      double sigma_c;
      sigma_c = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 9;
      sigma_c = context__.vals_r("sigma_c")[(1 - 1)];
      double sigma_c_free__;
      sigma_c_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 9;
      sigma_c_free__ = stan::math::lub_free(sigma_c, 0, 100);
      double sigma_d;
      sigma_d = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 10;
      sigma_d = context__.vals_r("sigma_d")[(1 - 1)];
      double sigma_d_free__;
      sigma_d_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 10;
      sigma_d_free__ = stan::math::lub_free(sigma_d, 0, 100);
      double sigma_e;
      sigma_e = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 11;
      sigma_e = context__.vals_r("sigma_e")[(1 - 1)];
      double sigma_e_free__;
      sigma_e_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 11;
      sigma_e_free__ = stan::math::lub_free(sigma_e, 0, 100);
      for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
        vars__.emplace_back(a[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
        vars__.emplace_back(b[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_age_edu; ++sym1__) {
        vars__.emplace_back(c[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
        vars__.emplace_back(d[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_region_full; ++sym1__) {
        vars__.emplace_back(e[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma_a_free__);
      vars__.emplace_back(sigma_b_free__);
      vars__.emplace_back(sigma_c_free__);
      vars__.emplace_back(sigma_d_free__);
      vars__.emplace_back(sigma_e_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a", "b", "c", "d", "e", "beta",
      "sigma_a", "sigma_b", "sigma_c", "sigma_d", "sigma_e", "y_hat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(n_age)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(n_edu)},
      std::vector<size_t>{static_cast<size_t>(n_age_edu)},
      std::vector<size_t>{static_cast<size_t>(n_state)},
      std::vector<size_t>{static_cast<size_t>(n_region_full)},
      std::vector<size_t>{static_cast<size_t>(5)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_age_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_region_full; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "e" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_a");
    param_names__.emplace_back(std::string() + "sigma_b");
    param_names__.emplace_back(std::string() + "sigma_c");
    param_names__.emplace_back(std::string() + "sigma_d");
    param_names__.emplace_back(std::string() + "sigma_e");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_age_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_region_full; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "e" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_a");
    param_names__.emplace_back(std::string() + "sigma_b");
    param_names__.emplace_back(std::string() + "sigma_c");
    param_names__.emplace_back(std::string() + "sigma_d");
    param_names__.emplace_back(std::string() + "sigma_e");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_edu) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age_edu) + "},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_state) + "},\"block\":\"parameters\"},{\"name\":\"e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_region_full) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"sigma_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_edu) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age_edu) + "},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_state) + "},\"block\":\"parameters\"},{\"name\":\"e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_region_full) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"sigma_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = expr_prop_fail3_model_namespace::expr_prop_fail3_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_fail3_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-fail4.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_fail4_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 46> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-fail4.stan', line 12, column 2 to column 24)",
 " (in 'expr-prop-fail4.stan', line 13, column 2 to column 28)",
 " (in 'expr-prop-fail4.stan', line 16, column 2 to column 47)",
 " (in 'expr-prop-fail4.stan', line 17, column 2 to column 16)",
 " (in 'expr-prop-fail4.stan', line 18, column 2 to column 31)",
 " (in 'expr-prop-fail4.stan', line 19, column 2 to column 29)",
 " (in 'expr-prop-fail4.stan', line 20, column 2 to column 24)",
 " (in 'expr-prop-fail4.stan', line 27, column 2 to column 13)",
 " (in 'expr-prop-fail4.stan', line 28, column 2 to column 13)",
 " (in 'expr-prop-fail4.stan', line 29, column 2 to column 26)",
 " (in 'expr-prop-fail4.stan', line 30, column 2 to column 28)",
 " (in 'expr-prop-fail4.stan', line 31, column 2 to column 18)",
 " (in 'expr-prop-fail4.stan', line 32, column 2 to column 22)",
 " (in 'expr-prop-fail4.stan', line 34, column 2 to column 14)",
 " (in 'expr-prop-fail4.stan', line 35, column 2 to column 11)",
 " (in 'expr-prop-fail4.stan', line 37, column 2 to column 27)",
 " (in 'expr-prop-fail4.stan', line 38, column 2 to column 27)",
 " (in 'expr-prop-fail4.stan', line 40, column 4 to column 36)",
 " (in 'expr-prop-fail4.stan', line 39, column 17 to line 41, column 3)",
 " (in 'expr-prop-fail4.stan', line 39, column 2 to line 41, column 3)",
 " (in 'expr-prop-fail4.stan', line 42, column 2 to column 38)",
 " (in 'expr-prop-fail4.stan', line 43, column 2 to column 37)",
 " (in 'expr-prop-fail4.stan', line 44, column 2 to column 34)",
 " (in 'expr-prop-fail4.stan', line 47, column 4 to column 28)",
 " (in 'expr-prop-fail4.stan', line 48, column 4 to column 80)",
 " (in 'expr-prop-fail4.stan', line 46, column 17 to line 49, column 3)",
 " (in 'expr-prop-fail4.stan', line 46, column 2 to line 49, column 3)",
 " (in 'expr-prop-fail4.stan', line 23, column 2 to column 53)",
 " (in 'expr-prop-fail4.stan', line 24, column 2 to column 24)",
 " (in 'expr-prop-fail4.stan', line 2, column 2 to column 17)",
 " (in 'expr-prop-fail4.stan', line 3, column 2 to column 23)",
 " (in 'expr-prop-fail4.stan', line 4, column 30 to column 37)",
 " (in 'expr-prop-fail4.stan', line 4, column 2 to column 39)",
 " (in 'expr-prop-fail4.stan', line 5, column 30 to column 37)",
 " (in 'expr-prop-fail4.stan', line 5, column 2 to column 39)",
 " (in 'expr-prop-fail4.stan', line 6, column 18 to column 19)",
 " (in 'expr-prop-fail4.stan', line 6, column 2 to column 23)",
 " (in 'expr-prop-fail4.stan', line 9, column 9 to column 10)",
 " (in 'expr-prop-fail4.stan', line 9, column 2 to column 27)",
 " (in 'expr-prop-fail4.stan', line 13, column 9 to column 14)",
 " (in 'expr-prop-fail4.stan', line 17, column 9 to column 10)",
 " (in 'expr-prop-fail4.stan', line 31, column 9 to column 10)",
 " (in 'expr-prop-fail4.stan', line 32, column 9 to column 10)",
 " (in 'expr-prop-fail4.stan', line 34, column 9 to column 10)",
 " (in 'expr-prop-fail4.stan', line 35, column 8 to column 9)"};



class expr_prop_fail4_model final : public model_base_crtp<expr_prop_fail4_model> {

 private:
  int N;
  int N_edges;
  std::vector<int> node1;
  std::vector<int> node2;
  Eigen::Matrix<double, -1, 1> E;
  Eigen::Matrix<double, -1, 1> log_E;
  int phi_std_raw_1dim__;
 
 public:
  ~expr_prop_fail4_model() { }
  
  inline std::string model_name() const final { return "expr_prop_fail4_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_fail4_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail4_model_namespace::expr_prop_fail4_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 30;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min(); 
      
      current_statement__ = 30;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 30;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 31;
      context__.validate_dims("data initialization","N_edges","int",
           std::vector<size_t>{});
      N_edges = std::numeric_limits<int>::min(); 
      
      current_statement__ = 31;
      N_edges = context__.vals_i("N_edges")[(1 - 1)];
      current_statement__ = 31;
      check_greater_or_equal(function__, "N_edges", N_edges, 0);
      current_statement__ = 32;
      validate_non_negative_index("node1", "N_edges", N_edges);
      current_statement__ = 33;
      context__.validate_dims("data initialization","node1","int",
           std::vector<size_t>{static_cast<size_t>(N_edges)});
      node1 = std::vector<int>(N_edges, std::numeric_limits<int>::min()); 
      
      current_statement__ = 33;
      node1 = context__.vals_i("node1");
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 33;
        check_greater_or_equal(function__, "node1[sym1__]",
                               node1[(sym1__ - 1)], 1);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 33;
        check_less_or_equal(function__, "node1[sym1__]", node1[(sym1__ - 1)],
                            N);
      }
      current_statement__ = 34;
      validate_non_negative_index("node2", "N_edges", N_edges);
      current_statement__ = 35;
      context__.validate_dims("data initialization","node2","int",
           std::vector<size_t>{static_cast<size_t>(N_edges)});
      node2 = std::vector<int>(N_edges, std::numeric_limits<int>::min()); 
      
      current_statement__ = 35;
      node2 = context__.vals_i("node2");
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 35;
        check_greater_or_equal(function__, "node2[sym1__]",
                               node2[(sym1__ - 1)], 1);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 35;
        check_less_or_equal(function__, "node2[sym1__]", node2[(sym1__ - 1)],
                            N);
      }
      current_statement__ = 36;
      validate_non_negative_index("E", "N", N);
      current_statement__ = 37;
      context__.validate_dims("data initialization","E","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      E = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> E_flat__;
        current_statement__ = 37;
        E_flat__ = context__.vals_r("E");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 37;
          assign(E, E_flat__[(pos__ - 1)],
            "assigning variable E", index_uni(sym1__));
          current_statement__ = 37;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 37;
        check_greater_or_equal(function__, "E[sym1__]", E[(sym1__ - 1)], 0);
      }
      current_statement__ = 38;
      validate_non_negative_index("log_E", "N", N);
      current_statement__ = 39;
      log_E = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(log_E, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 39;
      assign(log_E, stan::math::log(E), "assigning variable log_E");
      current_statement__ = 40;
      phi_std_raw_1dim__ = std::numeric_limits<int>::min(); 
      
      current_statement__ = 40;
      phi_std_raw_1dim__ = (N - 1);
      current_statement__ = 40;
      validate_non_negative_index("phi_std_raw", "N - 1", phi_std_raw_1dim__);
      current_statement__ = 41;
      validate_non_negative_index("phi", "N", N);
      current_statement__ = 42;
      validate_non_negative_index("theta", "N", N);
      current_statement__ = 43;
      validate_non_negative_index("theta_std", "N", N);
      current_statement__ = 44;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 45;
      validate_non_negative_index("y", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + phi_std_raw_1dim__;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail4_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ tau_phi;
      tau_phi = DUMMY_VAR__; 
      
      current_statement__ = 1;
      tau_phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> phi_std_raw;
      phi_std_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(phi_std_raw_1dim__);
      stan::math::fill(phi_std_raw, DUMMY_VAR__); 
      
      current_statement__ = 2;
      phi_std_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      phi_std_raw_1dim__);
      local_scalar_t__ sigma_phi;
      sigma_phi = DUMMY_VAR__; 
      
      current_statement__ = 3;
      sigma_phi = inv_sqrt(tau_phi);
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      current_statement__ = 5;
      assign(phi, phi_std_raw,
        "assigning variable phi", index_min_max(1, (N - 1)));
      current_statement__ = 6;
      assign(phi, -sum(phi_std_raw), "assigning variable phi", index_uni(N));
      current_statement__ = 7;
      assign(phi, multiply(stan::model::deep_copy(phi), sigma_phi),
        "assigning variable phi");
      current_statement__ = 3;
      check_greater_or_equal(function__, "sigma_phi", sigma_phi, 0);
      {
        current_statement__ = 28;
        lp_accum__.add(
          (-0.5 *
            dot_self(
              subtract(rvalue(phi, "phi", index_multi(node1)),
                rvalue(phi, "phi", index_multi(node2))))));
        current_statement__ = 29;
        lp_accum__.add(gamma_lpdf<propto__>(tau_phi, 1, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail4_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double tau_phi;
      tau_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      tau_phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<double, -1, 1> phi_std_raw;
      phi_std_raw = Eigen::Matrix<double, -1, 1>(phi_std_raw_1dim__);
      stan::math::fill(phi_std_raw, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      phi_std_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      phi_std_raw_1dim__);
      double sigma_phi;
      sigma_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN()); 
      
      vars__.emplace_back(tau_phi);
      for (int sym1__ = 1; sym1__ <= phi_std_raw_1dim__; ++sym1__) {
        vars__.emplace_back(phi_std_raw[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 3;
      sigma_phi = inv_sqrt(tau_phi);
      current_statement__ = 5;
      assign(phi, phi_std_raw,
        "assigning variable phi", index_min_max(1, (N - 1)));
      current_statement__ = 6;
      assign(phi, -sum(phi_std_raw), "assigning variable phi", index_uni(N));
      current_statement__ = 7;
      assign(phi, multiply(stan::model::deep_copy(phi), sigma_phi),
        "assigning variable phi");
      current_statement__ = 3;
      check_greater_or_equal(function__, "sigma_phi", sigma_phi, 0);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(sigma_phi);
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(phi[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double beta0;
      beta0 = std::numeric_limits<double>::quiet_NaN(); 
      
      double beta1;
      beta1 = std::numeric_limits<double>::quiet_NaN(); 
      
      double tau_theta;
      tau_theta = std::numeric_limits<double>::quiet_NaN(); 
      
      double sigma_theta;
      sigma_theta = std::numeric_limits<double>::quiet_NaN(); 
      
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<double, -1, 1> theta_std;
      theta_std = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(theta_std, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<double, -1, 1> x;
      x = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN()); 
      
      std::vector<int> y;
      y = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 16;
      beta0 = normal_rng(0, 1, base_rng__);
      current_statement__ = 17;
      beta1 = normal_rng(0, 1, base_rng__);
      current_statement__ = 20;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 18;
        assign(theta_std, normal_rng(0, 1, base_rng__),
          "assigning variable theta_std", index_uni(i));
      }
      current_statement__ = 21;
      tau_theta = gamma_rng(3.2761, 1.81, base_rng__);
      current_statement__ = 22;
      sigma_theta = inv_sqrt(tau_theta);
      current_statement__ = 23;
      assign(theta, multiply(theta_std, sigma_theta),
        "assigning variable theta");
      current_statement__ = 27;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 24;
        assign(x, normal_rng(0, 1, base_rng__),
          "assigning variable x", index_uni(i));
        current_statement__ = 25;
        assign(y,
          poisson_log_rng(
            ((((rvalue(log_E, "log_E", index_uni(i)) + beta0) +
                (beta1 * rvalue(x, "x", index_uni(i)))) +
               rvalue(phi, "phi", index_uni(i))) +
              rvalue(theta, "theta", index_uni(i))), base_rng__),
          "assigning variable y", index_uni(i));
      }
      current_statement__ = 10;
      check_greater_or_equal(function__, "tau_theta", tau_theta, 0);
      current_statement__ = 11;
      check_greater_or_equal(function__, "sigma_theta", sigma_theta, 0);
      vars__.emplace_back(beta0);
      vars__.emplace_back(beta1);
      vars__.emplace_back(tau_theta);
      vars__.emplace_back(sigma_theta);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(theta_std[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(x[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(y[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double tau_phi;
      tau_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      tau_phi = context__.vals_r("tau_phi")[(1 - 1)];
      double tau_phi_free__;
      tau_phi_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      tau_phi_free__ = stan::math::lb_free(tau_phi, 0);
      Eigen::Matrix<double, -1, 1> phi_std_raw;
      phi_std_raw = Eigen::Matrix<double, -1, 1>(phi_std_raw_1dim__);
      stan::math::fill(phi_std_raw, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> phi_std_raw_flat__;
        current_statement__ = 2;
        phi_std_raw_flat__ = context__.vals_r("phi_std_raw");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= phi_std_raw_1dim__; ++sym1__) {
          current_statement__ = 2;
          assign(phi_std_raw, phi_std_raw_flat__[(pos__ - 1)],
            "assigning variable phi_std_raw", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(tau_phi_free__);
      for (int sym1__ = 1; sym1__ <= phi_std_raw_1dim__; ++sym1__) {
        vars__.emplace_back(phi_std_raw[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"tau_phi", "phi_std_raw", "sigma_phi",
      "phi", "beta0", "beta1", "tau_theta", "sigma_theta", "theta",
      "theta_std", "x", "y"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(phi_std_raw_1dim__)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "tau_phi");
    for (int sym1__ = 1; sym1__ <= phi_std_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_std_raw" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma_phi");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "beta0");
      param_names__.emplace_back(std::string() + "beta1");
      param_names__.emplace_back(std::string() + "tau_theta");
      param_names__.emplace_back(std::string() + "sigma_theta");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_std" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "tau_phi");
    for (int sym1__ = 1; sym1__ <= phi_std_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_std_raw" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma_phi");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "beta0");
      param_names__.emplace_back(std::string() + "beta1");
      param_names__.emplace_back(std::string() + "tau_theta");
      param_names__.emplace_back(std::string() + "sigma_theta");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_std" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"tau_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_std_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(phi_std_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_theta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_theta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_std\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"tau_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi_std_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(phi_std_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"tau_theta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_theta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_std\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = expr_prop_fail4_model_namespace::expr_prop_fail4_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_fail4_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-fail5.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_fail5_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 81> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-fail5.stan', line 71, column 2 to column 33)",
 " (in 'expr-prop-fail5.stan', line 72, column 2 to column 31)",
 " (in 'expr-prop-fail5.stan', line 73, column 2 to column 23)",
 " (in 'expr-prop-fail5.stan', line 74, column 2 to column 30)",
 " (in 'expr-prop-fail5.stan', line 80, column 2 to column 51)",
 " (in 'expr-prop-fail5.stan', line 81, column 2 to column 49)",
 " (in 'expr-prop-fail5.stan', line 82, column 2 to column 49)",
 " (in 'expr-prop-fail5.stan', line 83, column 2 to column 10)",
 " (in 'expr-prop-fail5.stan', line 86, column 2 to column 23)",
 " (in 'expr-prop-fail5.stan', line 89, column 6 to column 20)",
 " (in 'expr-prop-fail5.stan', line 90, column 6 to column 18)",
 " (in 'expr-prop-fail5.stan', line 88, column 32 to line 91, column 5)",
 " (in 'expr-prop-fail5.stan', line 88, column 4 to line 91, column 5)",
 " (in 'expr-prop-fail5.stan', line 93, column 6 to column 45)",
 " (in 'expr-prop-fail5.stan', line 94, column 6 to column 23)",
 " (in 'expr-prop-fail5.stan', line 92, column 38 to line 95, column 5)",
 " (in 'expr-prop-fail5.stan', line 92, column 4 to line 95, column 5)",
 " (in 'expr-prop-fail5.stan', line 87, column 20 to line 96, column 3)",
 " (in 'expr-prop-fail5.stan', line 87, column 2 to line 96, column 3)",
 " (in 'expr-prop-fail5.stan', line 98, column 2 to column 51)",
 " (in 'expr-prop-fail5.stan', line 124, column 2 to column 23)",
 " (in 'expr-prop-fail5.stan', line 126, column 2 to column 25)",
 " (in 'expr-prop-fail5.stan', line 109, column 2 to column 29)",
 " (in 'expr-prop-fail5.stan', line 115, column 8 to column 37)",
 " (in 'expr-prop-fail5.stan', line 116, column 8 to column 41)",
 " (in 'expr-prop-fail5.stan', line 114, column 40 to line 117, column 7)",
 " (in 'expr-prop-fail5.stan', line 114, column 6 to line 117, column 7)",
 " (in 'expr-prop-fail5.stan', line 118, column 6 to column 37)",
 " (in 'expr-prop-fail5.stan', line 113, column 22 to line 119, column 5)",
 " (in 'expr-prop-fail5.stan', line 113, column 4 to line 119, column 5)",
 " (in 'expr-prop-fail5.stan', line 112, column 20 to line 120, column 3)",
 " (in 'expr-prop-fail5.stan', line 112, column 2 to line 120, column 3)",
 " (in 'expr-prop-fail5.stan', line 52, column 2 to column 20)",
 " (in 'expr-prop-fail5.stan', line 53, column 2 to column 27)",
 " (in 'expr-prop-fail5.stan', line 54, column 25 to column 29)",
 " (in 'expr-prop-fail5.stan', line 54, column 31 to column 42)",
 " (in 'expr-prop-fail5.stan', line 54, column 2 to column 44)",
 " (in 'expr-prop-fail5.stan', line 58, column 2 to column 38)",
 " (in 'expr-prop-fail5.stan', line 60, column 39 to column 43)",
 " (in 'expr-prop-fail5.stan', line 60, column 2 to column 45)",
 " (in 'expr-prop-fail5.stan', line 61, column 38 to column 42)",
 " (in 'expr-prop-fail5.stan', line 61, column 2 to column 44)",
 " (in 'expr-prop-fail5.stan', line 65, column 4 to column 35)",
 " (in 'expr-prop-fail5.stan', line 64, column 2 to line 65, column 35)",
 " (in 'expr-prop-fail5.stan', line 67, column 4 to column 33)",
 " (in 'expr-prop-fail5.stan', line 66, column 2 to line 67, column 33)",
 " (in 'expr-prop-fail5.stan', line 73, column 9 to column 13)",
 " (in 'expr-prop-fail5.stan', line 80, column 26 to column 30)",
 " (in 'expr-prop-fail5.stan', line 80, column 32 to column 45)",
 " (in 'expr-prop-fail5.stan', line 81, column 26 to column 30)",
 " (in 'expr-prop-fail5.stan', line 81, column 32 to column 45)",
 " (in 'expr-prop-fail5.stan', line 82, column 26 to column 30)",
 " (in 'expr-prop-fail5.stan', line 82, column 32 to column 43)",
 " (in 'expr-prop-fail5.stan', line 8, column 8 to column 17)",
 " (in 'expr-prop-fail5.stan', line 7, column 6 to line 8, column 17)",
 " (in 'expr-prop-fail5.stan', line 6, column 4 to line 8, column 17)",
 " (in 'expr-prop-fail5.stan', line 9, column 4 to column 13)",
 " (in 'expr-prop-fail5.stan', line 5, column 31 to line 10, column 3)",
 " (in 'expr-prop-fail5.stan', line 15, column 6 to column 32)",
 " (in 'expr-prop-fail5.stan', line 19, column 8 to column 17)",
 " (in 'expr-prop-fail5.stan', line 18, column 6 to line 19, column 17)",
 " (in 'expr-prop-fail5.stan', line 13, column 37 to line 20, column 5)",
 " (in 'expr-prop-fail5.stan', line 13, column 4 to line 20, column 5)",
 " (in 'expr-prop-fail5.stan', line 21, column 4 to column 13)",
 " (in 'expr-prop-fail5.stan', line 12, column 30 to line 22, column 3)",
 " (in 'expr-prop-fail5.stan', line 26, column 11 to column 15)",
 " (in 'expr-prop-fail5.stan', line 26, column 17 to column 28)",
 " (in 'expr-prop-fail5.stan', line 26, column 4 to column 34)",
 " (in 'expr-prop-fail5.stan', line 29, column 6 to column 32)",
 " (in 'expr-prop-fail5.stan', line 32, column 8 to column 37)",
 " (in 'expr-prop-fail5.stan', line 33, column 8 to column 32)",
 " (in 'expr-prop-fail5.stan', line 41, column 8 to column 33)",
 " (in 'expr-prop-fail5.stan', line 42, column 8 to column 28)",
 " (in 'expr-prop-fail5.stan', line 43, column 8 to line 44, column 83)",
 " (in 'expr-prop-fail5.stan', line 30, column 37 to line 45, column 7)",
 " (in 'expr-prop-fail5.stan', line 30, column 6 to line 45, column 7)",
 " (in 'expr-prop-fail5.stan', line 28, column 22 to line 46, column 5)",
 " (in 'expr-prop-fail5.stan', line 28, column 4 to line 46, column 5)",
 " (in 'expr-prop-fail5.stan', line 47, column 4 to column 15)",
 " (in 'expr-prop-fail5.stan', line 25, column 47 to line 48, column 3)"};


int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 56;
    for (int k = 1; k <= size(y_i); ++k) {
      current_statement__ = 55;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 54;
        return k;
      } 
    }
    current_statement__ = 57;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct first_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return first_capture(y_i, pstream__);
}
};

int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 63;
    for (int k_rev = 0; k_rev <= (size(y_i) - 1); ++k_rev) {
      int k;
      k = std::numeric_limits<int>::min(); 
      
      current_statement__ = 59;
      k = (size(y_i) - k_rev);
      current_statement__ = 61;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 60;
        return k;
      } 
    }
    current_statement__ = 64;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct last_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return last_capture(y_i, pstream__);
}
};

template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
prob_uncaptured(const int& nind, const int& n_occasions, const T2__& p_arg__,
                const T3__& phi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 66;
    validate_non_negative_index("chi", "nind", nind);
    current_statement__ = 67;
    validate_non_negative_index("chi", "n_occasions", n_occasions);
    Eigen::Matrix<local_scalar_t__, -1, -1> chi;
    chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
    stan::math::fill(chi, DUMMY_VAR__); 
    
    current_statement__ = 78;
    for (int i = 1; i <= nind; ++i) {
      current_statement__ = 69;
      assign(chi, 1.0,
        "assigning variable chi", index_uni(i), index_uni(n_occasions));
      current_statement__ = 76;
      for (int t = 1; t <= (n_occasions - 1); ++t) {
        int t_curr;
        t_curr = std::numeric_limits<int>::min(); 
        
        int t_next;
        t_next = std::numeric_limits<int>::min(); 
        
        current_statement__ = 72;
        t_curr = (n_occasions - t);
        current_statement__ = 73;
        t_next = (t_curr + 1);
        current_statement__ = 74;
        assign(chi,
          ((1 - rvalue(phi, "phi", index_uni(i), index_uni(t_curr))) +
            ((rvalue(phi, "phi", index_uni(i), index_uni(t_curr)) *
               (1 - rvalue(p, "p", index_uni(i), index_uni((t_next - 1))))) *
              rvalue(chi, "chi", index_uni(i), index_uni(t_next)))),
          "assigning variable chi", index_uni(i), index_uni(t_curr));
      }
    }
    current_statement__ = 79;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct prob_uncaptured_functor__ {
template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
operator()(const int& nind, const int& n_occasions, const T2__& p,
           const T3__& phi, std::ostream* pstream__)  const 
{
return prob_uncaptured(nind, n_occasions, p, phi, pstream__);
}
};

class expr_prop_fail5_model final : public model_base_crtp<expr_prop_fail5_model> {

 private:
  int nind;
  int n_occasions;
  std::vector<std::vector<int>> y;
  int n_occ_minus_1;
  std::vector<int> first;
  std::vector<int> last;
 
 public:
  ~expr_prop_fail5_model() { }
  
  inline std::string model_name() const final { return "expr_prop_fail5_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_fail5_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail5_model_namespace::expr_prop_fail5_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 33;
      context__.validate_dims("data initialization","nind","int",
           std::vector<size_t>{});
      nind = std::numeric_limits<int>::min(); 
      
      current_statement__ = 33;
      nind = context__.vals_i("nind")[(1 - 1)];
      current_statement__ = 33;
      check_greater_or_equal(function__, "nind", nind, 0);
      current_statement__ = 34;
      context__.validate_dims("data initialization","n_occasions","int",
           std::vector<size_t>{});
      n_occasions = std::numeric_limits<int>::min(); 
      
      current_statement__ = 34;
      n_occasions = context__.vals_i("n_occasions")[(1 - 1)];
      current_statement__ = 34;
      check_greater_or_equal(function__, "n_occasions", n_occasions, 2);
      current_statement__ = 35;
      validate_non_negative_index("y", "nind", nind);
      current_statement__ = 36;
      validate_non_negative_index("y", "n_occasions", n_occasions);
      current_statement__ = 37;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(nind),
            static_cast<size_t>(n_occasions)});
      y = std::vector<std::vector<int>>(nind, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 37;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          current_statement__ = 37;
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            current_statement__ = 37;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 37;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 37;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 37;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 37;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 37;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 38;
      n_occ_minus_1 = std::numeric_limits<int>::min(); 
      
      current_statement__ = 38;
      n_occ_minus_1 = (n_occasions - 1);
      current_statement__ = 39;
      validate_non_negative_index("first", "nind", nind);
      current_statement__ = 40;
      first = std::vector<int>(nind, std::numeric_limits<int>::min()); 
      
      current_statement__ = 41;
      validate_non_negative_index("last", "nind", nind);
      current_statement__ = 42;
      last = std::vector<int>(nind, std::numeric_limits<int>::min()); 
      
      current_statement__ = 44;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 43;
        assign(first, first_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable first", index_uni(i));
      }
      current_statement__ = 46;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 45;
        assign(last, last_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable last", index_uni(i));
      }
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 40;
        check_greater_or_equal(function__, "first[sym1__]",
                               first[(sym1__ - 1)], 0);
      }
      current_statement__ = 40;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 40;
        check_less_or_equal(function__, "first[sym1__]", first[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 42;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 42;
        check_greater_or_equal(function__, "last[sym1__]",
                               last[(sym1__ - 1)], 0);
      }
      current_statement__ = 42;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 42;
        check_less_or_equal(function__, "last[sym1__]", last[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 47;
      validate_non_negative_index("epsilon", "nind", nind);
      current_statement__ = 48;
      validate_non_negative_index("phi", "nind", nind);
      current_statement__ = 49;
      validate_non_negative_index("phi", "n_occ_minus_1", n_occ_minus_1);
      current_statement__ = 50;
      validate_non_negative_index("p", "nind", nind);
      current_statement__ = 51;
      validate_non_negative_index("p", "n_occ_minus_1", n_occ_minus_1);
      current_statement__ = 52;
      validate_non_negative_index("chi", "nind", nind);
      current_statement__ = 53;
      validate_non_negative_index("chi", "n_occasions", n_occasions);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + nind + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail5_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mean_phi;
      mean_phi = DUMMY_VAR__; 
      
      current_statement__ = 1;
      mean_phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 1, lp__);
      local_scalar_t__ mean_p;
      mean_p = DUMMY_VAR__; 
      
      current_statement__ = 2;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> epsilon;
      epsilon = Eigen::Matrix<local_scalar_t__, -1, 1>(nind);
      stan::math::fill(epsilon, DUMMY_VAR__); 
      
      current_statement__ = 3;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  nind);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__; 
      
      current_statement__ = 4;
      sigma = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 5, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(p, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      local_scalar_t__ mu;
      mu = DUMMY_VAR__; 
      
      current_statement__ = 9;
      mu = logit(mean_phi);
      current_statement__ = 19;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 13;
        for (int t = 1; t <= (rvalue(first, "first", index_uni(i)) - 1); ++t) {
          current_statement__ = 10;
          assign(phi, 0, "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 11;
          assign(p, 0, "assigning variable p", index_uni(i), index_uni(t));
        }
        current_statement__ = 17;
        for (int t = rvalue(first, "first", index_uni(i));
             t <= n_occ_minus_1; ++t) {
          current_statement__ = 14;
          assign(phi,
            inv_logit((mu + rvalue(epsilon, "epsilon", index_uni(i)))),
            "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 15;
          assign(p, mean_p,
            "assigning variable p", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 20;
      assign(chi, prob_uncaptured(nind, n_occasions, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 5;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 6;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 6;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 7;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 7;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      {
        current_statement__ = 23;
        lp_accum__.add(normal_lpdf<propto__>(epsilon, 0, sigma));
        current_statement__ = 32;
        for (int i = 1; i <= nind; ++i) {
          current_statement__ = 30;
          if (logical_gt(rvalue(first, "first", index_uni(i)), 0)) {
            current_statement__ = 27;
            for (int t = (rvalue(first, "first", index_uni(i)) + 1);
                 t <= rvalue(last, "last", index_uni(i)); ++t) {
              current_statement__ = 24;
              lp_accum__.add(
                bernoulli_lpmf<propto__>(1,
                  rvalue(phi, "phi", index_uni(i), index_uni((t - 1)))));
              current_statement__ = 25;
              lp_accum__.add(
                bernoulli_lpmf<propto__>(
                  rvalue(y, "y", index_uni(i), index_uni(t)),
                  rvalue(p, "p", index_uni(i), index_uni((t - 1)))));
            }
            current_statement__ = 28;
            lp_accum__.add(
              bernoulli_lpmf<propto__>(1,
                rvalue(chi, "chi",
                  index_uni(i), index_uni(rvalue(last, "last", index_uni(i))))));
          } 
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail5_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mean_phi;
      mean_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 1, lp__);
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<double, -1, 1> epsilon;
      epsilon = Eigen::Matrix<double, -1, 1>(nind);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 3;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  nind);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      sigma = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 5, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<double, -1, -1> p;
      p = Eigen::Matrix<double, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN(); 
      
      vars__.emplace_back(mean_phi);
      vars__.emplace_back(mean_p);
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        vars__.emplace_back(epsilon[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 9;
      mu = logit(mean_phi);
      current_statement__ = 19;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 13;
        for (int t = 1; t <= (rvalue(first, "first", index_uni(i)) - 1); ++t) {
          current_statement__ = 10;
          assign(phi, 0, "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 11;
          assign(p, 0, "assigning variable p", index_uni(i), index_uni(t));
        }
        current_statement__ = 17;
        for (int t = rvalue(first, "first", index_uni(i));
             t <= n_occ_minus_1; ++t) {
          current_statement__ = 14;
          assign(phi,
            inv_logit((mu + rvalue(epsilon, "epsilon", index_uni(i)))),
            "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 15;
          assign(p, mean_p,
            "assigning variable p", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 20;
      assign(chi, prob_uncaptured(nind, n_occasions, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 5;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 6;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 6;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 7;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 7;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(phi, "phi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(p, "p", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(chi, "chi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        vars__.emplace_back(mu);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double sigma2;
      sigma2 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 22;
      sigma2 = square(sigma);
      current_statement__ = 21;
      check_greater_or_equal(function__, "sigma2", sigma2, 0);
      vars__.emplace_back(sigma2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double mean_phi;
      mean_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi = context__.vals_r("mean_phi")[(1 - 1)];
      double mean_phi_free__;
      mean_phi_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi_free__ = stan::math::lub_free(mean_phi, 0, 1);
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p = context__.vals_r("mean_p")[(1 - 1)];
      double mean_p_free__;
      mean_p_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p_free__ = stan::math::lub_free(mean_p, 0, 1);
      Eigen::Matrix<double, -1, 1> epsilon;
      epsilon = Eigen::Matrix<double, -1, 1>(nind);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> epsilon_flat__;
        current_statement__ = 3;
        epsilon_flat__ = context__.vals_r("epsilon");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
          current_statement__ = 3;
          assign(epsilon, epsilon_flat__[(pos__ - 1)],
            "assigning variable epsilon", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      sigma_free__ = stan::math::lub_free(sigma, 0, 5);
      vars__.emplace_back(mean_phi_free__);
      vars__.emplace_back(mean_p_free__);
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        vars__.emplace_back(epsilon[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mean_phi", "mean_p", "epsilon",
      "sigma", "phi", "p", "chi", "mu", "sigma2"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(nind)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occ_minus_1)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occ_minus_1)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occasions)},
      std::vector<size_t>{}, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_phi");
    param_names__.emplace_back(std::string() + "mean_p");
    for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "mu");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sigma2");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_phi");
    param_names__.emplace_back(std::string() + "mean_p");
    for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "mu");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sigma2");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nind) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nind) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = expr_prop_fail5_model_namespace::expr_prop_fail5_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_fail5_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-fail6.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_fail6_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 158> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-fail6.stan', line 163, column 2 to column 33)",
 " (in 'expr-prop-fail6.stan', line 164, column 2 to column 31)",
 " (in 'expr-prop-fail6.stan', line 165, column 2 to column 28)",
 " (in 'expr-prop-fail6.stan', line 166, column 2 to column 36)",
 " (in 'expr-prop-fail6.stan', line 167, column 2 to column 20)",
 " (in 'expr-prop-fail6.stan', line 168, column 2 to column 30)",
 " (in 'expr-prop-fail6.stan', line 174, column 2 to column 50)",
 " (in 'expr-prop-fail6.stan', line 175, column 2 to column 44)",
 " (in 'expr-prop-fail6.stan', line 176, column 2 to column 25)",
 " (in 'expr-prop-fail6.stan', line 177, column 2 to column 42)",
 " (in 'expr-prop-fail6.stan', line 178, column 2 to column 46)",
 " (in 'expr-prop-fail6.stan', line 181, column 2 to column 49)",
 " (in 'expr-prop-fail6.stan', line 183, column 4 to column 48)",
 " (in 'expr-prop-fail6.stan', line 182, column 2 to line 183, column 48)",
 " (in 'expr-prop-fail6.stan', line 188, column 2 to column 23)",
 " (in 'expr-prop-fail6.stan', line 192, column 4 to column 22)",
 " (in 'expr-prop-fail6.stan', line 194, column 4 to column 17)",
 " (in 'expr-prop-fail6.stan', line 196, column 6 to column 35)",
 " (in 'expr-prop-fail6.stan', line 197, column 6 to column 27)",
 " (in 'expr-prop-fail6.stan', line 195, column 35 to line 198, column 5)",
 " (in 'expr-prop-fail6.stan', line 195, column 4 to line 198, column 5)",
 " (in 'expr-prop-fail6.stan', line 199, column 4 to column 26)",
 " (in 'expr-prop-fail6.stan', line 191, column 2 to line 200, column 3)",
 " (in 'expr-prop-fail6.stan', line 203, column 2 to column 32)",
 " (in 'expr-prop-fail6.stan', line 219, column 2 to column 23)",
 " (in 'expr-prop-fail6.stan', line 220, column 2 to column 22)",
 " (in 'expr-prop-fail6.stan', line 221, column 2 to column 30)",
 " (in 'expr-prop-fail6.stan', line 222, column 2 to column 30)",
 " (in 'expr-prop-fail6.stan', line 223, column 2 to column 41)",
 " (in 'expr-prop-fail6.stan', line 225, column 2 to column 25)",
 " (in 'expr-prop-fail6.stan', line 229, column 4 to column 14)",
 " (in 'expr-prop-fail6.stan', line 238, column 6 to column 41)",
 " (in 'expr-prop-fail6.stan', line 237, column 11 to line 239, column 5)",
 " (in 'expr-prop-fail6.stan', line 231, column 6 to column 37)",
 " (in 'expr-prop-fail6.stan', line 233, column 8 to column 34)",
 " (in 'expr-prop-fail6.stan', line 234, column 8 to line 235, column 46)",
 " (in 'expr-prop-fail6.stan', line 232, column 31 to line 236, column 7)",
 " (in 'expr-prop-fail6.stan', line 232, column 6 to line 236, column 7)",
 " (in 'expr-prop-fail6.stan', line 230, column 28 to line 237, column 5)",
 " (in 'expr-prop-fail6.stan', line 230, column 4 to line 239, column 5)",
 " (in 'expr-prop-fail6.stan', line 228, column 17 to line 240, column 3)",
 " (in 'expr-prop-fail6.stan', line 228, column 2 to line 240, column 3)",
 " (in 'expr-prop-fail6.stan', line 244, column 16 to column 17)",
 " (in 'expr-prop-fail6.stan', line 244, column 19 to column 30)",
 " (in 'expr-prop-fail6.stan', line 244, column 4 to column 63)",
 " (in 'expr-prop-fail6.stan', line 245, column 13 to column 14)",
 " (in 'expr-prop-fail6.stan', line 245, column 4 to column 16)",
 " (in 'expr-prop-fail6.stan', line 246, column 15 to column 16)",
 " (in 'expr-prop-fail6.stan', line 246, column 4 to column 18)",
 " (in 'expr-prop-fail6.stan', line 249, column 6 to column 36)",
 " (in 'expr-prop-fail6.stan', line 252, column 8 to column 26)",
 " (in 'expr-prop-fail6.stan', line 251, column 6 to line 252, column 26)",
 " (in 'expr-prop-fail6.stan', line 248, column 19 to line 253, column 5)",
 " (in 'expr-prop-fail6.stan', line 248, column 4 to line 253, column 5)",
 " (in 'expr-prop-fail6.stan', line 255, column 6 to column 25)",
 " (in 'expr-prop-fail6.stan', line 256, column 6 to column 31)",
 " (in 'expr-prop-fail6.stan', line 254, column 29 to line 257, column 5)",
 " (in 'expr-prop-fail6.stan', line 254, column 4 to line 257, column 5)",
 " (in 'expr-prop-fail6.stan', line 259, column 6 to column 26)",
 " (in 'expr-prop-fail6.stan', line 260, column 6 to column 32)",
 " (in 'expr-prop-fail6.stan', line 258, column 19 to line 261, column 5)",
 " (in 'expr-prop-fail6.stan', line 258, column 4 to line 261, column 5)",
 " (in 'expr-prop-fail6.stan', line 262, column 4 to column 25)",
 " (in 'expr-prop-fail6.stan', line 243, column 2 to line 263, column 3)",
 " (in 'expr-prop-fail6.stan', line 211, column 2 to column 29)",
 " (in 'expr-prop-fail6.stan', line 212, column 2 to column 21)",
 " (in 'expr-prop-fail6.stan', line 215, column 2 to column 52)",
 " (in 'expr-prop-fail6.stan', line 147, column 2 to column 17)",
 " (in 'expr-prop-fail6.stan', line 148, column 2 to column 27)",
 " (in 'expr-prop-fail6.stan', line 149, column 25 to column 26)",
 " (in 'expr-prop-fail6.stan', line 149, column 28 to column 39)",
 " (in 'expr-prop-fail6.stan', line 149, column 2 to column 41)",
 " (in 'expr-prop-fail6.stan', line 153, column 39 to column 40)",
 " (in 'expr-prop-fail6.stan', line 153, column 2 to column 42)",
 " (in 'expr-prop-fail6.stan', line 154, column 38 to column 39)",
 " (in 'expr-prop-fail6.stan', line 154, column 2 to column 41)",
 " (in 'expr-prop-fail6.stan', line 157, column 4 to column 35)",
 " (in 'expr-prop-fail6.stan', line 156, column 2 to line 157, column 35)",
 " (in 'expr-prop-fail6.stan', line 159, column 4 to column 33)",
 " (in 'expr-prop-fail6.stan', line 158, column 2 to line 159, column 33)",
 " (in 'expr-prop-fail6.stan', line 166, column 18 to column 29)",
 " (in 'expr-prop-fail6.stan', line 167, column 9 to column 10)",
 " (in 'expr-prop-fail6.stan', line 174, column 26 to column 27)",
 " (in 'expr-prop-fail6.stan', line 174, column 29 to column 44)",
 " (in 'expr-prop-fail6.stan', line 175, column 26 to column 27)",
 " (in 'expr-prop-fail6.stan', line 175, column 29 to column 40)",
 " (in 'expr-prop-fail6.stan', line 176, column 10 to column 21)",
 " (in 'expr-prop-fail6.stan', line 177, column 26 to column 37)",
 " (in 'expr-prop-fail6.stan', line 178, column 26 to column 27)",
 " (in 'expr-prop-fail6.stan', line 178, column 29 to column 40)",
 " (in 'expr-prop-fail6.stan', line 221, column 17 to column 28)",
 " (in 'expr-prop-fail6.stan', line 222, column 17 to column 28)",
 " (in 'expr-prop-fail6.stan', line 223, column 25 to column 26)",
 " (in 'expr-prop-fail6.stan', line 223, column 28 to column 39)",
 " (in 'expr-prop-fail6.stan', line 17, column 8 to column 17)",
 " (in 'expr-prop-fail6.stan', line 16, column 6 to line 17, column 17)",
 " (in 'expr-prop-fail6.stan', line 15, column 4 to line 17, column 17)",
 " (in 'expr-prop-fail6.stan', line 18, column 4 to column 13)",
 " (in 'expr-prop-fail6.stan', line 14, column 31 to line 19, column 3)",
 " (in 'expr-prop-fail6.stan', line 30, column 6 to column 32)",
 " (in 'expr-prop-fail6.stan', line 33, column 8 to column 17)",
 " (in 'expr-prop-fail6.stan', line 32, column 6 to line 33, column 17)",
 " (in 'expr-prop-fail6.stan', line 29, column 37 to line 34, column 5)",
 " (in 'expr-prop-fail6.stan', line 29, column 4 to line 34, column 5)",
 " (in 'expr-prop-fail6.stan', line 35, column 4 to column 13)",
 " (in 'expr-prop-fail6.stan', line 28, column 30 to line 36, column 3)",
 " (in 'expr-prop-fail6.stan', line 49, column 4 to column 24)",
 " (in 'expr-prop-fail6.stan', line 50, column 4 to column 30)",
 " (in 'expr-prop-fail6.stan', line 51, column 11 to column 16)",
 " (in 'expr-prop-fail6.stan', line 51, column 18 to column 29)",
 " (in 'expr-prop-fail6.stan', line 51, column 4 to column 35)",
 " (in 'expr-prop-fail6.stan', line 54, column 6 to column 32)",
 " (in 'expr-prop-fail6.stan', line 56, column 8 to column 37)",
 " (in 'expr-prop-fail6.stan', line 57, column 8 to column 32)",
 " (in 'expr-prop-fail6.stan', line 59, column 8 to line 60, column 65)",
 " (in 'expr-prop-fail6.stan', line 55, column 37 to line 61, column 7)",
 " (in 'expr-prop-fail6.stan', line 55, column 6 to line 61, column 7)",
 " (in 'expr-prop-fail6.stan', line 53, column 23 to line 62, column 5)",
 " (in 'expr-prop-fail6.stan', line 53, column 4 to line 62, column 5)",
 " (in 'expr-prop-fail6.stan', line 63, column 4 to column 15)",
 " (in 'expr-prop-fail6.stan', line 48, column 47 to line 64, column 3)",
 " (in 'expr-prop-fail6.stan', line 82, column 4 to column 27)",
 " (in 'expr-prop-fail6.stan', line 83, column 4 to column 33)",
 " (in 'expr-prop-fail6.stan', line 84, column 11 to column 22)",
 " (in 'expr-prop-fail6.stan', line 84, column 4 to column 39)",
 " (in 'expr-prop-fail6.stan', line 87, column 13 to column 24)",
 " (in 'expr-prop-fail6.stan', line 87, column 6 to column 43)",
 " (in 'expr-prop-fail6.stan', line 124, column 15 to column 28)",
 " (in 'expr-prop-fail6.stan', line 124, column 8 to column 33)",
 " (in 'expr-prop-fail6.stan', line 127, column 8 to line 130, column 47)",
 " (in 'expr-prop-fail6.stan', line 133, column 10 to line 137, column 49)",
 " (in 'expr-prop-fail6.stan', line 132, column 8 to line 137, column 49)",
 " (in 'expr-prop-fail6.stan', line 139, column 8 to column 54)",
 " (in 'expr-prop-fail6.stan', line 140, column 8 to column 34)",
 " (in 'expr-prop-fail6.stan', line 123, column 13 to line 141, column 7)",
 " (in 'expr-prop-fail6.stan', line 91, column 8 to column 27)",
 " (in 'expr-prop-fail6.stan', line 97, column 17 to column 25)",
 " (in 'expr-prop-fail6.stan', line 97, column 10 to column 30)",
 " (in 'expr-prop-fail6.stan', line 100, column 10 to line 103, column 54)",
 " (in 'expr-prop-fail6.stan', line 106, column 12 to line 110, column 56)",
 " (in 'expr-prop-fail6.stan', line 105, column 10 to line 110, column 56)",
 " (in 'expr-prop-fail6.stan', line 111, column 10 to line 113, column 61)",
 " (in 'expr-prop-fail6.stan', line 114, column 10 to column 36)",
 " (in 'expr-prop-fail6.stan', line 96, column 15 to line 115, column 9)",
 " (in 'expr-prop-fail6.stan', line 95, column 10 to column 41)",
 " (in 'expr-prop-fail6.stan', line 94, column 27 to line 96, column 9)",
 " (in 'expr-prop-fail6.stan', line 94, column 8 to line 115, column 9)",
 " (in 'expr-prop-fail6.stan', line 118, column 10 to column 39)",
 " (in 'expr-prop-fail6.stan', line 119, column 10 to column 39)",
 " (in 'expr-prop-fail6.stan', line 117, column 42 to line 120, column 9)",
 " (in 'expr-prop-fail6.stan', line 117, column 8 to line 120, column 9)",
 " (in 'expr-prop-fail6.stan', line 122, column 8 to column 39)",
 " (in 'expr-prop-fail6.stan', line 89, column 20 to line 123, column 7)",
 " (in 'expr-prop-fail6.stan', line 89, column 6 to line 141, column 7)",
 " (in 'expr-prop-fail6.stan', line 86, column 23 to line 142, column 5)",
 " (in 'expr-prop-fail6.stan', line 86, column 4 to line 142, column 5)",
 " (in 'expr-prop-fail6.stan', line 81, column 42 to line 143, column 3)"};


int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 97;
    for (int k = 1; k <= size(y_i); ++k) {
      current_statement__ = 96;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 95;
        return k;
      } 
    }
    current_statement__ = 98;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct first_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return first_capture(y_i, pstream__);
}
};

int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 104;
    for (int k_rev = 0; k_rev <= (size(y_i) - 1); ++k_rev) {
      int k;
      k = std::numeric_limits<int>::min(); 
      
      current_statement__ = 100;
      k = (size(y_i) - k_rev);
      current_statement__ = 102;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 101;
        return k;
      } 
    }
    current_statement__ = 105;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct last_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return last_capture(y_i, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
prob_uncaptured(const T0__& p_arg__, const T1__& phi_arg__,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n_ind;
    n_ind = std::numeric_limits<int>::min(); 
    
    current_statement__ = 107;
    n_ind = rows(p);
    int n_occasions;
    n_occasions = std::numeric_limits<int>::min(); 
    
    current_statement__ = 108;
    n_occasions = cols(p);
    current_statement__ = 109;
    validate_non_negative_index("chi", "n_ind", n_ind);
    current_statement__ = 110;
    validate_non_negative_index("chi", "n_occasions", n_occasions);
    Eigen::Matrix<local_scalar_t__, -1, -1> chi;
    chi = Eigen::Matrix<local_scalar_t__, -1, -1>(n_ind, n_occasions);
    stan::math::fill(chi, DUMMY_VAR__); 
    
    current_statement__ = 119;
    for (int i = 1; i <= n_ind; ++i) {
      current_statement__ = 112;
      assign(chi, 1.0,
        "assigning variable chi", index_uni(i), index_uni(n_occasions));
      current_statement__ = 117;
      for (int t = 1; t <= (n_occasions - 1); ++t) {
        int t_curr;
        t_curr = std::numeric_limits<int>::min(); 
        
        current_statement__ = 113;
        t_curr = (n_occasions - t);
        int t_next;
        t_next = std::numeric_limits<int>::min(); 
        
        current_statement__ = 114;
        t_next = (t_curr + 1);
        current_statement__ = 115;
        assign(chi,
          ((1 - rvalue(phi, "phi", index_uni(i), index_uni(t_curr))) +
            ((rvalue(phi, "phi", index_uni(i), index_uni(t_curr)) *
               (1 - rvalue(p, "p", index_uni(i), index_uni(t_next)))) *
              rvalue(chi, "chi", index_uni(i), index_uni(t_next)))),
          "assigning variable chi", index_uni(i), index_uni(t_curr));
      }
    }
    current_statement__ = 120;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct prob_uncaptured_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
operator()(const T0__& p, const T1__& phi, std::ostream* pstream__)  const 
{
return prob_uncaptured(p, phi, pstream__);
}
};

template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
void
js_super_lp(const std::vector<std::vector<int>>& y,
            const std::vector<int>& first, const std::vector<int>& last,
            const T3__& p_arg__, const T4__& phi_arg__, const T5__& psi,
            const T6__& nu_arg__, const T7__& chi_arg__, T_lp__& lp__,
            T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          T5__,
          stan::value_type_t<T6__>,
          stan::value_type_t<T7__>>;
  int current_statement__ = 0; 
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  const auto& nu = to_ref(nu_arg__);
  const auto& chi = to_ref(chi_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n_ind;
    n_ind = std::numeric_limits<int>::min(); 
    
    current_statement__ = 122;
    n_ind = rvalue(dims(y), "dims(y)", index_uni(1));
    int n_occasions;
    n_occasions = std::numeric_limits<int>::min(); 
    
    current_statement__ = 123;
    n_occasions = rvalue(dims(y), "dims(y)", index_uni(2));
    current_statement__ = 124;
    validate_non_negative_index("qnu", "n_occasions", n_occasions);
    Eigen::Matrix<local_scalar_t__, -1, 1> qnu;
    qnu = Eigen::Matrix<local_scalar_t__, -1, 1>(n_occasions);
    stan::math::fill(qnu, DUMMY_VAR__); 
    
    current_statement__ = 125;
    assign(qnu, subtract(1.0, nu), "assigning variable qnu");
    current_statement__ = 156;
    for (int i = 1; i <= n_ind; ++i) {
      current_statement__ = 126;
      validate_non_negative_index("qp", "n_occasions", n_occasions);
      Eigen::Matrix<local_scalar_t__, -1, 1> qp;
      qp = Eigen::Matrix<local_scalar_t__, -1, 1>(n_occasions);
      stan::math::fill(qp, DUMMY_VAR__); 
      
      current_statement__ = 127;
      assign(qp, subtract(1.0, transpose(rvalue(p, "p", index_uni(i)))),
        "assigning variable qp");
      current_statement__ = 154;
      if (rvalue(first, "first", index_uni(i))) {
        current_statement__ = 136;
        lp_accum__.add(bernoulli_lpmf<propto__>(1, psi));
        current_statement__ = 147;
        if (logical_eq(rvalue(first, "first", index_uni(i)), 1)) {
          current_statement__ = 145;
          lp_accum__.add(
            bernoulli_lpmf<propto__>(1,
              (rvalue(nu, "nu", index_uni(1)) *
                rvalue(p, "p", index_uni(i), index_uni(1)))));
        } else {
          current_statement__ = 137;
          validate_non_negative_index("lp", "first[i]",
                                      rvalue(first, "first", index_uni(i)));
          Eigen::Matrix<local_scalar_t__, -1, 1> lp;
          lp = Eigen::Matrix<local_scalar_t__, -1, 1>(rvalue(first, "first",
                                                        index_uni(i)));
          stan::math::fill(lp, DUMMY_VAR__); 
          
          current_statement__ = 139;
          assign(lp,
            (((bernoulli_lpmf<false>(1, rvalue(nu, "nu", index_uni(1))) +
                bernoulli_lpmf<false>(1,
                  prod(
                    rvalue(qp, "qp",
                      index_min_max(1, (rvalue(first, "first", index_uni(i))
                                         - 1)))))) +
               bernoulli_lpmf<false>(1,
                 prod(
                   rvalue(phi, "phi",
                     index_uni(i),
                       index_min_max(1, (rvalue(first, "first", index_uni(i))
                                          - 1)))))) +
              bernoulli_lpmf<false>(1,
                rvalue(p, "p",
                  index_uni(i),
                    index_uni(rvalue(first, "first", index_uni(i)))))),
            "assigning variable lp", index_uni(1));
          current_statement__ = 141;
          for (int t = 2; t <= (rvalue(first, "first", index_uni(i)) - 1);
               ++t) {
            current_statement__ = 140;
            assign(lp,
              ((((bernoulli_lpmf<false>(1,
                    prod(rvalue(qnu, "qnu", index_min_max(1, (t - 1))))) +
                   bernoulli_lpmf<false>(1, rvalue(nu, "nu", index_uni(t))))
                  +
                  bernoulli_lpmf<false>(1,
                    prod(
                      rvalue(qp, "qp",
                        index_min_max(t, (rvalue(first, "first",
                                            index_uni(i)) - 1)))))) +
                 bernoulli_lpmf<false>(1,
                   prod(
                     rvalue(phi, "phi",
                       index_uni(i),
                         index_min_max(t, (rvalue(first, "first",
                                             index_uni(i)) - 1)))))) +
                bernoulli_lpmf<false>(1,
                  rvalue(p, "p",
                    index_uni(i),
                      index_uni(rvalue(first, "first", index_uni(i)))))),
              "assigning variable lp", index_uni(t));
          }
          current_statement__ = 142;
          assign(lp,
            ((bernoulli_lpmf<false>(1,
                prod(
                  rvalue(qnu, "qnu",
                    index_min_max(1, (rvalue(first, "first", index_uni(i)) -
                                       1))))) +
               bernoulli_lpmf<false>(1,
                 rvalue(nu, "nu",
                   index_uni(rvalue(first, "first", index_uni(i)))))) +
              bernoulli_lpmf<false>(1,
                rvalue(p, "p",
                  index_uni(i),
                    index_uni(rvalue(first, "first", index_uni(i)))))),
            "assigning variable lp", index_uni(rvalue(first, "first",
                                                 index_uni(i))));
          current_statement__ = 143;
          lp_accum__.add(log_sum_exp(lp));
        }
        current_statement__ = 151;
        for (int t = (rvalue(first, "first", index_uni(i)) + 1);
             t <= rvalue(last, "last", index_uni(i)); ++t) {
          current_statement__ = 148;
          lp_accum__.add(
            bernoulli_lpmf<propto__>(1,
              rvalue(phi, "phi", index_uni(i), index_uni((t - 1)))));
          current_statement__ = 149;
          lp_accum__.add(
            bernoulli_lpmf<propto__>(
              rvalue(y, "y", index_uni(i), index_uni(t)),
              rvalue(p, "p", index_uni(i), index_uni(t))));
        }
        current_statement__ = 152;
        lp_accum__.add(
          bernoulli_lpmf<propto__>(1,
            rvalue(chi, "chi",
              index_uni(i), index_uni(rvalue(last, "last", index_uni(i))))));
      } else {
        current_statement__ = 128;
        validate_non_negative_index("lp", "n_occasions + 1",
                                    (n_occasions + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> lp;
        lp = Eigen::Matrix<local_scalar_t__, -1, 1>((n_occasions + 1));
        stan::math::fill(lp, DUMMY_VAR__); 
        
        current_statement__ = 130;
        assign(lp,
          (((bernoulli_lpmf<false>(1, psi) +
              bernoulli_lpmf<false>(1, rvalue(nu, "nu", index_uni(1)))) +
             bernoulli_lpmf<false>(0,
               rvalue(p, "p", index_uni(i), index_uni(1)))) +
            bernoulli_lpmf<false>(1,
              rvalue(chi, "chi", index_uni(i), index_uni(1)))),
          "assigning variable lp", index_uni(1));
        current_statement__ = 132;
        for (int t = 2; t <= n_occasions; ++t) {
          current_statement__ = 131;
          assign(lp,
            ((((bernoulli_lpmf<false>(1, psi) +
                 bernoulli_lpmf<false>(1,
                   prod(rvalue(qnu, "qnu", index_min_max(1, (t - 1)))))) +
                bernoulli_lpmf<false>(1, rvalue(nu, "nu", index_uni(t)))) +
               bernoulli_lpmf<false>(0,
                 rvalue(p, "p", index_uni(i), index_uni(t)))) +
              bernoulli_lpmf<false>(1,
                rvalue(chi, "chi", index_uni(i), index_uni(t)))),
            "assigning variable lp", index_uni(t));
        }
        current_statement__ = 133;
        assign(lp, bernoulli_lpmf<false>(0, psi),
          "assigning variable lp", index_uni((n_occasions + 1)));
        current_statement__ = 134;
        lp_accum__.add(log_sum_exp(lp));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct js_super_lp_functor__ {
template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
void
operator()(const std::vector<std::vector<int>>& y,
           const std::vector<int>& first, const std::vector<int>& last,
           const T3__& p, const T4__& phi, const T5__& psi, const T6__& nu,
           const T7__& chi, T_lp__& lp__, T_lp_accum__& lp_accum__,
           std::ostream* pstream__)  const 
{
return js_super_lp<propto__>(y, first, last, p, phi, psi, nu, chi, lp__,
         lp_accum__, pstream__);
}
};

class expr_prop_fail6_model final : public model_base_crtp<expr_prop_fail6_model> {

 private:
  int M;
  int n_occasions;
  std::vector<std::vector<int>> y;
  std::vector<int> first;
  std::vector<int> last;
  int phi_2dim__;
 
 public:
  ~expr_prop_fail6_model() { }
  
  inline std::string model_name() const final { return "expr_prop_fail6_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_fail6_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail6_model_namespace::expr_prop_fail6_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 68;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min(); 
      
      current_statement__ = 68;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 68;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 69;
      context__.validate_dims("data initialization","n_occasions","int",
           std::vector<size_t>{});
      n_occasions = std::numeric_limits<int>::min(); 
      
      current_statement__ = 69;
      n_occasions = context__.vals_i("n_occasions")[(1 - 1)];
      current_statement__ = 69;
      check_greater_or_equal(function__, "n_occasions", n_occasions, 0);
      current_statement__ = 70;
      validate_non_negative_index("y", "M", M);
      current_statement__ = 71;
      validate_non_negative_index("y", "n_occasions", n_occasions);
      current_statement__ = 72;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(M),
            static_cast<size_t>(n_occasions)});
      y = std::vector<std::vector<int>>(M, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 72;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          current_statement__ = 72;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 72;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 72;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 72;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 72;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 72;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 72;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 72;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 72;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 73;
      validate_non_negative_index("first", "M", M);
      current_statement__ = 74;
      first = std::vector<int>(M, std::numeric_limits<int>::min()); 
      
      current_statement__ = 75;
      validate_non_negative_index("last", "M", M);
      current_statement__ = 76;
      last = std::vector<int>(M, std::numeric_limits<int>::min()); 
      
      current_statement__ = 78;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 77;
        assign(first, first_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable first", index_uni(i));
      }
      current_statement__ = 80;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 79;
        assign(last, last_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable last", index_uni(i));
      }
      current_statement__ = 74;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 74;
        check_greater_or_equal(function__, "first[sym1__]",
                               first[(sym1__ - 1)], 0);
      }
      current_statement__ = 74;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 74;
        check_less_or_equal(function__, "first[sym1__]", first[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 76;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 76;
        check_greater_or_equal(function__, "last[sym1__]",
                               last[(sym1__ - 1)], 0);
      }
      current_statement__ = 76;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 76;
        check_less_or_equal(function__, "last[sym1__]", last[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 81;
      validate_non_negative_index("beta", "n_occasions", n_occasions);
      current_statement__ = 82;
      validate_non_negative_index("epsilon", "M", M);
      current_statement__ = 83;
      validate_non_negative_index("phi", "M", M);
      current_statement__ = 84;
      phi_2dim__ = std::numeric_limits<int>::min(); 
      
      current_statement__ = 84;
      phi_2dim__ = (n_occasions - 1);
      current_statement__ = 84;
      validate_non_negative_index("phi", "n_occasions - 1", phi_2dim__);
      current_statement__ = 85;
      validate_non_negative_index("p", "M", M);
      current_statement__ = 86;
      validate_non_negative_index("p", "n_occasions", n_occasions);
      current_statement__ = 87;
      validate_non_negative_index("b", "n_occasions", n_occasions);
      current_statement__ = 88;
      validate_non_negative_index("nu", "n_occasions", n_occasions);
      current_statement__ = 89;
      validate_non_negative_index("chi", "M", M);
      current_statement__ = 90;
      validate_non_negative_index("chi", "n_occasions", n_occasions);
      current_statement__ = 91;
      validate_non_negative_index("N", "n_occasions", n_occasions);
      current_statement__ = 92;
      validate_non_negative_index("B", "n_occasions", n_occasions);
      current_statement__ = 93;
      validate_non_negative_index("z", "M", M);
      current_statement__ = 94;
      validate_non_negative_index("z", "n_occasions", n_occasions);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1 + n_occasions + M + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail6_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mean_phi;
      mean_phi = DUMMY_VAR__; 
      
      current_statement__ = 1;
      mean_phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 1, lp__);
      local_scalar_t__ mean_p;
      mean_p = DUMMY_VAR__; 
      
      current_statement__ = 2;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      local_scalar_t__ psi;
      psi = DUMMY_VAR__; 
      
      current_statement__ = 3;
      psi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(n_occasions);
      stan::math::fill(beta, DUMMY_VAR__); 
      
      current_statement__ = 4;
      beta = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
               0, lp__, n_occasions);
      Eigen::Matrix<local_scalar_t__, -1, 1> epsilon;
      epsilon = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
      stan::math::fill(epsilon, DUMMY_VAR__); 
      
      current_statement__ = 5;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(M);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__; 
      
      current_statement__ = 6;
      sigma = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 5, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(M, phi_2dim__);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, -1>(M, n_occasions);
      stan::math::fill(p, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, 1> b;
      b = Eigen::Matrix<local_scalar_t__, -1, 1>(n_occasions);
      stan::math::fill(b, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, 1> nu;
      nu = Eigen::Matrix<local_scalar_t__, -1, 1>(n_occasions);
      stan::math::fill(nu, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(M, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      current_statement__ = 12;
      assign(phi, rep_matrix(mean_phi, M, (n_occasions - 1)),
        "assigning variable phi");
      current_statement__ = 14;
      for (int t = 1; t <= n_occasions; ++t) {
        current_statement__ = 13;
        assign(p, inv_logit(add(logit(mean_p), epsilon)),
          "assigning variable p", index_omni(), index_uni(t));
      }
      current_statement__ = 15;
      assign(b, divide(beta, sum(beta)), "assigning variable b");
      {
        local_scalar_t__ cum_b;
        cum_b = DUMMY_VAR__; 
        
        current_statement__ = 16;
        cum_b = rvalue(b, "b", index_uni(1));
        current_statement__ = 17;
        assign(nu, rvalue(b, "b", index_uni(1)),
          "assigning variable nu", index_uni(1));
        current_statement__ = 21;
        for (int t = 2; t <= (n_occasions - 1); ++t) {
          current_statement__ = 18;
          assign(nu, (rvalue(b, "b", index_uni(t)) / (1.0 - cum_b)),
            "assigning variable nu", index_uni(t));
          current_statement__ = 19;
          cum_b = (cum_b + rvalue(b, "b", index_uni(t)));
        }
        current_statement__ = 22;
        assign(nu, 1.0, "assigning variable nu", index_uni(n_occasions));
      }
      current_statement__ = 24;
      assign(chi, prob_uncaptured(p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= phi_2dim__; ++sym2__) {
          current_statement__ = 7;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= phi_2dim__; ++sym2__) {
          current_statement__ = 7;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 8;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 8;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 9;
      check_simplex(function__, "b", b);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        current_statement__ = 10;
        check_greater_or_equal(function__, "nu[sym1__]", nu[(sym1__ - 1)], 0);
      }
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        current_statement__ = 10;
        check_less_or_equal(function__, "nu[sym1__]", nu[(sym1__ - 1)], 1);
      }
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 11;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 11;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      {
        current_statement__ = 65;
        lp_accum__.add(normal_lpdf<propto__>(epsilon, 0, sigma));
        current_statement__ = 66;
        lp_accum__.add(gamma_lpdf<propto__>(beta, 1, 1));
        current_statement__ = 67;
        js_super_lp<false>(y, first, last, p, phi, psi, nu,
          chi, lp__, lp_accum__, pstream__);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail6_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mean_phi;
      mean_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 1, lp__);
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      psi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              1, lp__);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(n_occasions);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 4;
      beta = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
               0, lp__, n_occasions);
      Eigen::Matrix<double, -1, 1> epsilon;
      epsilon = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 5;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(M);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 6;
      sigma = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 5, lp__);
      Eigen::Matrix<double, -1, -1> phi;
      phi = Eigen::Matrix<double, -1, -1>(M, phi_2dim__);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<double, -1, -1> p;
      p = Eigen::Matrix<double, -1, -1>(M, n_occasions);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<double, -1, 1> b;
      b = Eigen::Matrix<double, -1, 1>(n_occasions);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<local_scalar_t__, -1, 1> nu;
      nu = Eigen::Matrix<local_scalar_t__, -1, 1>(n_occasions);
      stan::math::fill(nu, DUMMY_VAR__); 
      
      Eigen::Matrix<double, -1, -1> chi;
      chi = Eigen::Matrix<double, -1, -1>(M, n_occasions);
      stan::math::fill(chi, std::numeric_limits<double>::quiet_NaN()); 
      
      vars__.emplace_back(mean_phi);
      vars__.emplace_back(mean_p);
      vars__.emplace_back(psi);
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(epsilon[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      assign(phi, rep_matrix(mean_phi, M, (n_occasions - 1)),
        "assigning variable phi");
      current_statement__ = 14;
      for (int t = 1; t <= n_occasions; ++t) {
        current_statement__ = 13;
        assign(p, inv_logit(add(logit(mean_p), epsilon)),
          "assigning variable p", index_omni(), index_uni(t));
      }
      current_statement__ = 15;
      assign(b, divide(beta, sum(beta)), "assigning variable b");
      {
        local_scalar_t__ cum_b;
        cum_b = DUMMY_VAR__; 
        
        current_statement__ = 16;
        cum_b = rvalue(b, "b", index_uni(1));
        current_statement__ = 17;
        assign(nu, rvalue(b, "b", index_uni(1)),
          "assigning variable nu", index_uni(1));
        current_statement__ = 21;
        for (int t = 2; t <= (n_occasions - 1); ++t) {
          current_statement__ = 18;
          assign(nu, (rvalue(b, "b", index_uni(t)) / (1.0 - cum_b)),
            "assigning variable nu", index_uni(t));
          current_statement__ = 19;
          cum_b = (cum_b + rvalue(b, "b", index_uni(t)));
        }
        current_statement__ = 22;
        assign(nu, 1.0, "assigning variable nu", index_uni(n_occasions));
      }
      current_statement__ = 24;
      assign(chi, prob_uncaptured(p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= phi_2dim__; ++sym2__) {
          current_statement__ = 7;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= phi_2dim__; ++sym2__) {
          current_statement__ = 7;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 8;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 8;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 9;
      check_simplex(function__, "b", b);
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        current_statement__ = 10;
        check_greater_or_equal(function__, "nu[sym1__]", nu[(sym1__ - 1)], 0);
      }
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        current_statement__ = 10;
        check_less_or_equal(function__, "nu[sym1__]", nu[(sym1__ - 1)], 1);
      }
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 11;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 11;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= phi_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(
              rvalue(phi, "phi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(
              rvalue(p, "p", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          vars__.emplace_back(b[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          vars__.emplace_back(nu[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(
              rvalue(chi, "chi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double sigma2;
      sigma2 = std::numeric_limits<double>::quiet_NaN(); 
      
      int Nsuper;
      Nsuper = std::numeric_limits<int>::min(); 
      
      std::vector<int> N;
      N = std::vector<int>(n_occasions, std::numeric_limits<int>::min()); 
      
      std::vector<int> B;
      B = std::vector<int>(n_occasions, std::numeric_limits<int>::min()); 
      
      std::vector<std::vector<int>> z;
      z = std::vector<std::vector<int>>(M, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
       
      
      current_statement__ = 30;
      sigma2 = square(sigma);
      current_statement__ = 42;
      for (int i = 1; i <= M; ++i) {
        int q;
        q = std::numeric_limits<int>::min(); 
        
        current_statement__ = 31;
        q = 1;
        current_statement__ = 40;
        if (bernoulli_rng(psi, base_rng__)) {
          current_statement__ = 34;
          assign(z,
            bernoulli_rng(rvalue(nu, "nu", index_uni(1)), base_rng__),
            "assigning variable z", index_uni(i), index_uni(1));
          current_statement__ = 38;
          for (int t = 2; t <= n_occasions; ++t) {
            current_statement__ = 35;
            q = (q * (1 - rvalue(z, "z", index_uni(i), index_uni((t - 1)))));
            current_statement__ = 36;
            assign(z,
              bernoulli_rng(
                ((rvalue(z, "z", index_uni(i), index_uni((t - 1))) *
                   rvalue(phi, "phi", index_uni(i), index_uni((t - 1)))) +
                  (q * rvalue(nu, "nu", index_uni(t)))), base_rng__),
              "assigning variable z", index_uni(i), index_uni(t));
          }
        } else {
          current_statement__ = 32;
          assign(z, rep_array(0, n_occasions),
            "assigning variable z", index_uni(i), index_omni());
        }
      }
      {
        current_statement__ = 43;
        validate_non_negative_index("recruit", "M", M);
        current_statement__ = 44;
        validate_non_negative_index("recruit", "n_occasions", n_occasions);
        std::vector<std::vector<int>> recruit;
        recruit = std::vector<std::vector<int>>(M, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
         
        
        current_statement__ = 45;
        assign(recruit, rep_array(0, M, n_occasions),
          "assigning variable recruit");
        current_statement__ = 46;
        validate_non_negative_index("Nind", "M", M);
        std::vector<int> Nind;
        Nind = std::vector<int>(M, std::numeric_limits<int>::min()); 
        
        current_statement__ = 48;
        validate_non_negative_index("Nalive", "M", M);
        std::vector<int> Nalive;
        Nalive = std::vector<int>(M, std::numeric_limits<int>::min()); 
        
        current_statement__ = 54;
        for (int i = 1; i <= M; ++i) {
          int f;
          f = std::numeric_limits<int>::min(); 
          
          current_statement__ = 50;
          f = first_capture(rvalue(z, "z", index_uni(i)), pstream__);
          current_statement__ = 52;
          if (logical_gt(f, 0)) {
            current_statement__ = 51;
            assign(recruit, 1,
              "assigning variable recruit", index_uni(i), index_uni(f));
          } 
        }
        current_statement__ = 58;
        for (int t = 1; t <= n_occasions; ++t) {
          current_statement__ = 55;
          assign(N, sum(rvalue(z, "z", index_omni(), index_uni(t))),
            "assigning variable N", index_uni(t));
          current_statement__ = 56;
          assign(B,
            sum(rvalue(recruit, "recruit", index_omni(), index_uni(t))),
            "assigning variable B", index_uni(t));
        }
        current_statement__ = 62;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 59;
          assign(Nind, sum(rvalue(z, "z", index_uni(i))),
            "assigning variable Nind", index_uni(i));
          current_statement__ = 60;
          assign(Nalive, logical_gt(rvalue(Nind, "Nind", index_uni(i)), 0),
            "assigning variable Nalive", index_uni(i));
        }
        current_statement__ = 63;
        Nsuper = sum(Nalive);
      }
      current_statement__ = 25;
      check_greater_or_equal(function__, "sigma2", sigma2, 0);
      current_statement__ = 26;
      check_greater_or_equal(function__, "Nsuper", Nsuper, 0);
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        current_statement__ = 27;
        check_greater_or_equal(function__, "N[sym1__]", N[(sym1__ - 1)], 0);
      }
      current_statement__ = 28;
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        current_statement__ = 28;
        check_greater_or_equal(function__, "B[sym1__]", B[(sym1__ - 1)], 0);
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 29;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 29;
          check_greater_or_equal(function__, "z[sym1__, sym2__]",
                                 z[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 29;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 29;
          check_less_or_equal(function__, "z[sym1__, sym2__]",
                              z[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      vars__.emplace_back(sigma2);
      vars__.emplace_back(Nsuper);
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        vars__.emplace_back(N[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        vars__.emplace_back(B[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double mean_phi;
      mean_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi = context__.vals_r("mean_phi")[(1 - 1)];
      double mean_phi_free__;
      mean_phi_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi_free__ = stan::math::lub_free(mean_phi, 0, 1);
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p = context__.vals_r("mean_p")[(1 - 1)];
      double mean_p_free__;
      mean_p_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p_free__ = stan::math::lub_free(mean_p, 0, 1);
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      psi = context__.vals_r("psi")[(1 - 1)];
      double psi_free__;
      psi_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      psi_free__ = stan::math::lub_free(psi, 0, 1);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(n_occasions);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> beta_flat__;
        current_statement__ = 4;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          current_statement__ = 4;
          assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> beta_free__;
      beta_free__ = Eigen::Matrix<double, -1, 1>(n_occasions);
      stan::math::fill(beta_free__, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        current_statement__ = 4;
        assign(beta_free__, stan::math::lb_free(beta[(sym1__ - 1)], 0),
          "assigning variable beta_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, 1> epsilon;
      epsilon = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> epsilon_flat__;
        current_statement__ = 5;
        epsilon_flat__ = context__.vals_r("epsilon");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 5;
          assign(epsilon, epsilon_flat__[(pos__ - 1)],
            "assigning variable epsilon", index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 6;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 6;
      sigma_free__ = stan::math::lub_free(sigma, 0, 5);
      vars__.emplace_back(mean_phi_free__);
      vars__.emplace_back(mean_p_free__);
      vars__.emplace_back(psi_free__);
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        vars__.emplace_back(beta_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(epsilon[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mean_phi", "mean_p", "psi", "beta",
      "epsilon", "sigma", "phi", "p", "b", "nu", "chi", "sigma2", "Nsuper",
      "N", "B", "z"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(M)}, std::vector<size_t>{
      },
      std::vector<size_t>{static_cast<size_t>(M),
                          static_cast<size_t>(phi_2dim__)},
      std::vector<size_t>{static_cast<size_t>(M),
                          static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(M),
                          static_cast<size_t>(n_occasions)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(M),
                          static_cast<size_t>(n_occasions)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_phi");
    param_names__.emplace_back(std::string() + "mean_p");
    param_names__.emplace_back(std::string() + "psi");
    for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= phi_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sigma2");
      param_names__.emplace_back(std::string() + "Nsuper");
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "N" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "B" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_phi");
    param_names__.emplace_back(std::string() + "mean_p");
    param_names__.emplace_back(std::string() + "psi");
    for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= phi_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= (n_occasions - 1); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sigma2");
      param_names__.emplace_back(std::string() + "Nsuper");
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "N" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "B" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_occasions) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(phi_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Nsuper\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"N\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"B\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_occasions) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(phi_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((n_occasions - 1)) + "},\"block\":\"transformed_parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"Nsuper\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"N\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"B\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = expr_prop_fail6_model_namespace::expr_prop_fail6_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_fail6_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-fail7.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_fail7_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 39> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-fail7.stan', line 20, column 2 to column 16)",
 " (in 'expr-prop-fail7.stan', line 21, column 2 to column 24)",
 " (in 'expr-prop-fail7.stan', line 40, column 2 to column 24)",
 " (in 'expr-prop-fail7.stan', line 42, column 11 to column 12)",
 " (in 'expr-prop-fail7.stan', line 42, column 4 to column 30)",
 " (in 'expr-prop-fail7.stan', line 44, column 6 to column 51)",
 " (in 'expr-prop-fail7.stan', line 43, column 4 to line 44, column 51)",
 " (in 'expr-prop-fail7.stan', line 45, column 4 to column 45)",
 " (in 'expr-prop-fail7.stan', line 41, column 17 to line 46, column 3)",
 " (in 'expr-prop-fail7.stan', line 41, column 2 to line 46, column 3)",
 " (in 'expr-prop-fail7.stan', line 25, column 2 to column 24)",
 " (in 'expr-prop-fail7.stan', line 28, column 6 to column 39)",
 " (in 'expr-prop-fail7.stan', line 27, column 4 to line 28, column 39)",
 " (in 'expr-prop-fail7.stan', line 26, column 2 to line 28, column 39)",
 " (in 'expr-prop-fail7.stan', line 32, column 11 to column 12)",
 " (in 'expr-prop-fail7.stan', line 32, column 4 to column 30)",
 " (in 'expr-prop-fail7.stan', line 34, column 6 to column 51)",
 " (in 'expr-prop-fail7.stan', line 33, column 4 to line 34, column 51)",
 " (in 'expr-prop-fail7.stan', line 35, column 4 to column 33)",
 " (in 'expr-prop-fail7.stan', line 31, column 17 to line 36, column 3)",
 " (in 'expr-prop-fail7.stan', line 31, column 2 to line 36, column 3)",
 " (in 'expr-prop-fail7.stan', line 12, column 2 to column 17)",
 " (in 'expr-prop-fail7.stan', line 13, column 2 to column 17)",
 " (in 'expr-prop-fail7.stan', line 14, column 2 to column 17)",
 " (in 'expr-prop-fail7.stan', line 15, column 25 to column 26)",
 " (in 'expr-prop-fail7.stan', line 15, column 27 to column 28)",
 " (in 'expr-prop-fail7.stan', line 15, column 2 to column 30)",
 " (in 'expr-prop-fail7.stan', line 16, column 18 to column 19)",
 " (in 'expr-prop-fail7.stan', line 16, column 2 to column 27)",
 " (in 'expr-prop-fail7.stan', line 17, column 26 to column 27)",
 " (in 'expr-prop-fail7.stan', line 17, column 18 to column 19)",
 " (in 'expr-prop-fail7.stan', line 17, column 2 to column 29)",
 " (in 'expr-prop-fail7.stan', line 20, column 10 to column 11)",
 " (in 'expr-prop-fail7.stan', line 21, column 19 to column 20)",
 " (in 'expr-prop-fail7.stan', line 21, column 21 to column 22)",
 " (in 'expr-prop-fail7.stan', line 21, column 10 to column 11)",
 " (in 'expr-prop-fail7.stan', line 40, column 21 to column 22)",
 " (in 'expr-prop-fail7.stan', line 40, column 9 to column 10)"};



class expr_prop_fail7_model final : public model_base_crtp<expr_prop_fail7_model> {

 private:
  int K;
  int I;
  int J;
  std::vector<std::vector<int>> y;
  Eigen::Matrix<double, -1, 1> alpha;
  std::vector<Eigen::Matrix<double, -1, 1>> beta;
 
 public:
  ~expr_prop_fail7_model() { }
  
  inline std::string model_name() const final { return "expr_prop_fail7_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_fail7_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail7_model_namespace::expr_prop_fail7_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 22;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min(); 
      
      current_statement__ = 22;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 22;
      check_greater_or_equal(function__, "K", K, 2);
      current_statement__ = 23;
      context__.validate_dims("data initialization","I","int",
           std::vector<size_t>{});
      I = std::numeric_limits<int>::min(); 
      
      current_statement__ = 23;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 23;
      check_greater_or_equal(function__, "I", I, 1);
      current_statement__ = 24;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min(); 
      
      current_statement__ = 24;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 24;
      check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 25;
      validate_non_negative_index("y", "I", I);
      current_statement__ = 26;
      validate_non_negative_index("y", "J", J);
      current_statement__ = 27;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(I),
            static_cast<size_t>(J)});
      y = std::vector<std::vector<int>>(I, std::vector<int>(J, std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 27;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 27;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 27;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 27;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        current_statement__ = 27;
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          current_statement__ = 27;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 27;
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        current_statement__ = 27;
        for (int sym2__ = 1; sym2__ <= J; ++sym2__) {
          current_statement__ = 27;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], K);
        }
      }
      current_statement__ = 28;
      validate_non_negative_index("alpha", "K", K);
      current_statement__ = 29;
      context__.validate_dims("data initialization","alpha","double",
           std::vector<size_t>{static_cast<size_t>(K)});
      alpha = Eigen::Matrix<double, -1, 1>(K); 
      
      {
        std::vector<double> alpha_flat__;
        current_statement__ = 29;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 29;
          assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", index_uni(sym1__));
          current_statement__ = 29;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 29;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 29;
        check_greater_or_equal(function__, "alpha[sym1__]",
                               alpha[(sym1__ - 1)], 0);
      }
      current_statement__ = 30;
      validate_non_negative_index("beta", "K", K);
      current_statement__ = 31;
      validate_non_negative_index("beta", "K", K);
      current_statement__ = 32;
      context__.validate_dims("data initialization","beta","double",
           std::vector<size_t>{static_cast<size_t>(K),
            static_cast<size_t>(K)});
      beta = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(K));
       
      
      {
        std::vector<double> beta_flat__;
        current_statement__ = 32;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 32;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 32;
            assign(beta, beta_flat__[(pos__ - 1)],
              "assigning variable beta", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 32;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 32;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 32;
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          current_statement__ = 32;
          check_greater_or_equal(function__, "beta[sym1__, sym2__]",
                                 beta[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 33;
      validate_positive_index("pi", "K", K);
      current_statement__ = 34;
      validate_non_negative_index("theta", "J", J);
      current_statement__ = 35;
      validate_non_negative_index("theta", "K", K);
      current_statement__ = 36;
      validate_positive_index("theta", "K", K);
      current_statement__ = 37;
      validate_non_negative_index("log_Pr_z", "I", I);
      current_statement__ = 38;
      validate_non_negative_index("log_Pr_z", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = (K - 1) + (J * K * (K - 1));
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail7_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> pi;
      pi = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(pi, DUMMY_VAR__); 
      
      current_statement__ = 1;
      pi = in__.template read_constrain_simplex<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
             lp__, K);
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> theta;
      theta = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(J, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(K)));
      stan::math::fill(theta, DUMMY_VAR__); 
      
      current_statement__ = 2;
      theta = in__.template read_constrain_simplex<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>, jacobian__>(
                lp__, J, K, K);
      {
        current_statement__ = 11;
        lp_accum__.add(dirichlet_lpdf<propto__>(pi, alpha));
        current_statement__ = 14;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 13;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 12;
            lp_accum__.add(
              dirichlet_lpdf<propto__>(
                rvalue(theta, "theta", index_uni(j), index_uni(k)),
                rvalue(beta, "beta", index_uni(k))));
          }
        }
        current_statement__ = 21;
        for (int i = 1; i <= I; ++i) {
          current_statement__ = 15;
          validate_non_negative_index("log_q", "K", K);
          Eigen::Matrix<local_scalar_t__, -1, 1> log_q;
          log_q = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
          stan::math::fill(log_q, DUMMY_VAR__); 
          
          current_statement__ = 16;
          assign(log_q, stan::math::log(pi), "assigning variable log_q");
          current_statement__ = 18;
          for (int j = 1; j <= J; ++j) {
            current_statement__ = 17;
            assign(log_q,
              add(stan::model::deep_copy(log_q),
                to_vector(
                  stan::math::log(
                    rvalue(theta, "theta",
                      index_uni(j), index_omni(),
                        index_uni(rvalue(y, "y", index_uni(i), index_uni(j))))))),
              "assigning variable log_q");
          }
          current_statement__ = 19;
          lp_accum__.add(log_sum_exp(log_q));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail7_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> pi;
      pi = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(pi, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 1;
      pi = in__.template read_constrain_simplex<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
             lp__, K);
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> theta;
      theta = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(J, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(K)));
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      theta = in__.template read_constrain_simplex<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>, jacobian__>(
                lp__, J, K, K);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(pi[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
            vars__.emplace_back(
              theta[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> log_Pr_z;
      log_Pr_z = std::vector<Eigen::Matrix<double, -1, 1>>(I, Eigen::Matrix<double, -1, 1>(K));
      stan::math::fill(log_Pr_z, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 10;
      for (int i = 1; i <= I; ++i) {
        current_statement__ = 4;
        validate_non_negative_index("log_q", "K", K);
        Eigen::Matrix<double, -1, 1> log_q;
        log_q = Eigen::Matrix<double, -1, 1>(K);
        stan::math::fill(log_q, std::numeric_limits<double>::quiet_NaN()); 
        
        current_statement__ = 5;
        assign(log_q, stan::math::log(pi), "assigning variable log_q");
        current_statement__ = 7;
        for (int j = 1; j <= J; ++j) {
          current_statement__ = 6;
          assign(log_q,
            add(stan::model::deep_copy(log_q),
              to_vector(
                stan::math::log(
                  rvalue(theta, "theta",
                    index_uni(j), index_omni(),
                      index_uni(rvalue(y, "y", index_uni(i), index_uni(j))))))),
            "assigning variable log_q");
        }
        current_statement__ = 8;
        assign(log_Pr_z, subtract(log_q, log_sum_exp(log_q)),
          "assigning variable log_Pr_z", index_uni(i));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          vars__.emplace_back(log_Pr_z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> pi;
      pi = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(pi, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> pi_flat__;
        current_statement__ = 1;
        pi_flat__ = context__.vals_r("pi");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          assign(pi, pi_flat__[(pos__ - 1)],
            "assigning variable pi", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> pi_free__;
      pi_free__ = Eigen::Matrix<double, -1, 1>((K - 1));
      stan::math::fill(pi_free__, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 1;
      assign(pi_free__, stan::math::simplex_free(pi),
        "assigning variable pi_free__");
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> theta;
      theta = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(J, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(K)));
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> theta_flat__;
        current_statement__ = 2;
        theta_flat__ = context__.vals_r("theta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 2;
            for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
              current_statement__ = 2;
              assign(theta, theta_flat__[(pos__ - 1)],
                "assigning variable theta", index_uni(sym3__),
                                              index_uni(sym2__),
                                              index_uni(sym1__));
              current_statement__ = 2;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> theta_free__;
      theta_free__ = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(J, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(
      (K - 1))));
      stan::math::fill(theta_free__, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          current_statement__ = 2;
          assign(theta_free__,
            stan::math::simplex_free(theta[(sym1__ - 1)][(sym2__ - 1)]),
            "assigning variable theta_free__", index_uni(sym1__),
                                                 index_uni(sym2__));
        }
      }
      for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
        vars__.emplace_back(pi_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= (K - 1); ++sym3__) {
            vars__.emplace_back(
              theta_free__[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)]);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"pi", "theta", "log_Pr_z"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(K)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(J), static_cast<size_t>(K),
                          static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(K)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pi" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_Pr_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "pi" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            for (int sym3__ = 1; sym3__ <= J; ++sym3__) {
              {
                param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
              } 
            }
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_Pr_z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"parameters\"},{\"name\":\"log_Pr_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"pi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((K - 1)) + "},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((K - 1)) + "}}},\"block\":\"parameters\"},{\"name\":\"log_Pr_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = expr_prop_fail7_model_namespace::expr_prop_fail7_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_fail7_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp expr-prop-fail8.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace expr_prop_fail8_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 25> locations_array__ = 
{" (found before start of program)",
 " (in 'expr-prop-fail8.stan', line 11, column 2 to column 13)",
 " (in 'expr-prop-fail8.stan', line 12, column 2 to column 13)",
 " (in 'expr-prop-fail8.stan', line 14, column 2 to column 26)",
 " (in 'expr-prop-fail8.stan', line 15, column 2 to column 24)",
 " (in 'expr-prop-fail8.stan', line 17, column 2 to column 22)",
 " (in 'expr-prop-fail8.stan', line 18, column 2 to column 24)",
 " (in 'expr-prop-fail8.stan', line 21, column 2 to column 47)",
 " (in 'expr-prop-fail8.stan', line 22, column 2 to column 16)",
 " (in 'expr-prop-fail8.stan', line 23, column 2 to column 25)",
 " (in 'expr-prop-fail8.stan', line 24, column 2 to column 24)",
 " (in 'expr-prop-fail8.stan', line 27, column 2 to column 33)",
 " (in 'expr-prop-fail8.stan', line 2, column 2 to column 17)",
 " (in 'expr-prop-fail8.stan', line 3, column 2 to column 23)",
 " (in 'expr-prop-fail8.stan', line 4, column 30 to column 37)",
 " (in 'expr-prop-fail8.stan', line 4, column 2 to column 39)",
 " (in 'expr-prop-fail8.stan', line 5, column 30 to column 37)",
 " (in 'expr-prop-fail8.stan', line 5, column 2 to column 39)",
 " (in 'expr-prop-fail8.stan', line 7, column 17 to column 18)",
 " (in 'expr-prop-fail8.stan', line 7, column 2 to column 20)",
 " (in 'expr-prop-fail8.stan', line 8, column 9 to column 10)",
 " (in 'expr-prop-fail8.stan', line 8, column 2 to column 14)",
 " (in 'expr-prop-fail8.stan', line 17, column 9 to column 10)",
 " (in 'expr-prop-fail8.stan', line 18, column 9 to column 10)",
 " (in 'expr-prop-fail8.stan', line 22, column 9 to column 10)"};



class expr_prop_fail8_model final : public model_base_crtp<expr_prop_fail8_model> {

 private:
  int N;
  int N_edges;
  std::vector<int> node1;
  std::vector<int> node2;
  std::vector<int> y;
  Eigen::Matrix<double, -1, 1> x;
 
 public:
  ~expr_prop_fail8_model() { }
  
  inline std::string model_name() const final { return "expr_prop_fail8_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  expr_prop_fail8_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail8_model_namespace::expr_prop_fail8_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 12;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min(); 
      
      current_statement__ = 12;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 12;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 13;
      context__.validate_dims("data initialization","N_edges","int",
           std::vector<size_t>{});
      N_edges = std::numeric_limits<int>::min(); 
      
      current_statement__ = 13;
      N_edges = context__.vals_i("N_edges")[(1 - 1)];
      current_statement__ = 13;
      check_greater_or_equal(function__, "N_edges", N_edges, 0);
      current_statement__ = 14;
      validate_non_negative_index("node1", "N_edges", N_edges);
      current_statement__ = 15;
      context__.validate_dims("data initialization","node1","int",
           std::vector<size_t>{static_cast<size_t>(N_edges)});
      node1 = std::vector<int>(N_edges, std::numeric_limits<int>::min()); 
      
      current_statement__ = 15;
      node1 = context__.vals_i("node1");
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 15;
        check_greater_or_equal(function__, "node1[sym1__]",
                               node1[(sym1__ - 1)], 1);
      }
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 15;
        check_less_or_equal(function__, "node1[sym1__]", node1[(sym1__ - 1)],
                            N);
      }
      current_statement__ = 16;
      validate_non_negative_index("node2", "N_edges", N_edges);
      current_statement__ = 17;
      context__.validate_dims("data initialization","node2","int",
           std::vector<size_t>{static_cast<size_t>(N_edges)});
      node2 = std::vector<int>(N_edges, std::numeric_limits<int>::min()); 
      
      current_statement__ = 17;
      node2 = context__.vals_i("node2");
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 17;
        check_greater_or_equal(function__, "node2[sym1__]",
                               node2[(sym1__ - 1)], 1);
      }
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= N_edges; ++sym1__) {
        current_statement__ = 17;
        check_less_or_equal(function__, "node2[sym1__]", node2[(sym1__ - 1)],
                            N);
      }
      current_statement__ = 18;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 19;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 19;
      y = context__.vals_i("y");
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 19;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);
      }
      current_statement__ = 20;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 21;
      context__.validate_dims("data initialization","x","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      x = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> x_flat__;
        current_statement__ = 21;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 21;
          assign(x, x_flat__[(pos__ - 1)],
            "assigning variable x", index_uni(sym1__));
          current_statement__ = 21;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 22;
      validate_non_negative_index("theta_std", "N", N);
      current_statement__ = 23;
      validate_non_negative_index("phi_std_raw", "N", N);
      current_statement__ = 24;
      validate_non_negative_index("phi", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1 + 1 + N + N;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail8_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ beta0;
      beta0 = DUMMY_VAR__; 
      
      current_statement__ = 1;
      beta0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta1;
      beta1 = DUMMY_VAR__; 
      
      current_statement__ = 2;
      beta1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ tau_theta;
      tau_theta = DUMMY_VAR__; 
      
      current_statement__ = 3;
      tau_theta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      local_scalar_t__ tau_phi;
      tau_phi = DUMMY_VAR__; 
      
      current_statement__ = 4;
      tau_phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_std;
      theta_std = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(theta_std, DUMMY_VAR__); 
      
      current_statement__ = 5;
      theta_std = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    N);
      Eigen::Matrix<local_scalar_t__, -1, 1> phi_std_raw;
      phi_std_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(phi_std_raw, DUMMY_VAR__); 
      
      current_statement__ = 6;
      phi_std_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      N);
      local_scalar_t__ sigma_phi;
      sigma_phi = DUMMY_VAR__; 
      
      current_statement__ = 7;
      sigma_phi = inv_sqrt(tau_phi);
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      current_statement__ = 9;
      assign(phi, phi_std_raw, "assigning variable phi", index_min_max(1, N));
      current_statement__ = 10;
      assign(phi, multiply(stan::model::deep_copy(phi), sigma_phi),
        "assigning variable phi");
      current_statement__ = 7;
      check_greater_or_equal(function__, "sigma_phi", sigma_phi, 0);
      {
        current_statement__ = 11;
        lp_accum__.add(dot_self(rvalue(phi, "phi", index_multi(node1))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "expr_prop_fail8_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double beta0;
      beta0 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      beta0 = in__.template read<local_scalar_t__>();
      double beta1;
      beta1 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      beta1 = in__.template read<local_scalar_t__>();
      double tau_theta;
      tau_theta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      tau_theta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                    0, lp__);
      double tau_phi;
      tau_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      tau_phi = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      Eigen::Matrix<double, -1, 1> theta_std;
      theta_std = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(theta_std, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 5;
      theta_std = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    N);
      Eigen::Matrix<double, -1, 1> phi_std_raw;
      phi_std_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(phi_std_raw, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 6;
      phi_std_raw = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                      N);
      double sigma_phi;
      sigma_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN()); 
      
      vars__.emplace_back(beta0);
      vars__.emplace_back(beta1);
      vars__.emplace_back(tau_theta);
      vars__.emplace_back(tau_phi);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(theta_std[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(phi_std_raw[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      sigma_phi = inv_sqrt(tau_phi);
      current_statement__ = 9;
      assign(phi, phi_std_raw, "assigning variable phi", index_min_max(1, N));
      current_statement__ = 10;
      assign(phi, multiply(stan::model::deep_copy(phi), sigma_phi),
        "assigning variable phi");
      current_statement__ = 7;
      check_greater_or_equal(function__, "sigma_phi", sigma_phi, 0);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(sigma_phi);
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(phi[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double beta0;
      beta0 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      beta0 = context__.vals_r("beta0")[(1 - 1)];
      double beta1;
      beta1 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      beta1 = context__.vals_r("beta1")[(1 - 1)];
      double tau_theta;
      tau_theta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      tau_theta = context__.vals_r("tau_theta")[(1 - 1)];
      double tau_theta_free__;
      tau_theta_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      tau_theta_free__ = stan::math::lb_free(tau_theta, 0);
      double tau_phi;
      tau_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      tau_phi = context__.vals_r("tau_phi")[(1 - 1)];
      double tau_phi_free__;
      tau_phi_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      tau_phi_free__ = stan::math::lb_free(tau_phi, 0);
      Eigen::Matrix<double, -1, 1> theta_std;
      theta_std = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(theta_std, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> theta_std_flat__;
        current_statement__ = 5;
        theta_std_flat__ = context__.vals_r("theta_std");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          assign(theta_std, theta_std_flat__[(pos__ - 1)],
            "assigning variable theta_std", index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> phi_std_raw;
      phi_std_raw = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(phi_std_raw, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> phi_std_raw_flat__;
        current_statement__ = 6;
        phi_std_raw_flat__ = context__.vals_r("phi_std_raw");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          assign(phi_std_raw, phi_std_raw_flat__[(pos__ - 1)],
            "assigning variable phi_std_raw", index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(beta0);
      vars__.emplace_back(beta1);
      vars__.emplace_back(tau_theta_free__);
      vars__.emplace_back(tau_phi_free__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(theta_std[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(phi_std_raw[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"beta0", "beta1", "tau_theta",
      "tau_phi", "theta_std", "phi_std_raw", "sigma_phi", "phi"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta0");
    param_names__.emplace_back(std::string() + "beta1");
    param_names__.emplace_back(std::string() + "tau_theta");
    param_names__.emplace_back(std::string() + "tau_phi");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_std" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_std_raw" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma_phi");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta0");
    param_names__.emplace_back(std::string() + "beta1");
    param_names__.emplace_back(std::string() + "tau_theta");
    param_names__.emplace_back(std::string() + "tau_phi");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta_std" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_std_raw" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma_phi");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_std\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"phi_std_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sigma_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_std\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"phi_std_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"parameters\"},{\"name\":\"sigma_phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = expr_prop_fail8_model_namespace::expr_prop_fail8_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return expr_prop_fail8_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp fails-test.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace fails_test_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 76> locations_array__ = 
{" (found before start of program)",
 " (in 'fails-test.stan', line 71, column 2 to column 31)",
 " (in 'fails-test.stan', line 72, column 2 to column 40)",
 " (in 'fails-test.stan', line 76, column 2 to column 51)",
 " (in 'fails-test.stan', line 77, column 2 to column 49)",
 " (in 'fails-test.stan', line 78, column 2 to column 49)",
 " (in 'fails-test.stan', line 83, column 6 to column 20)",
 " (in 'fails-test.stan', line 84, column 6 to column 18)",
 " (in 'fails-test.stan', line 82, column 32 to line 85, column 5)",
 " (in 'fails-test.stan', line 82, column 4 to line 85, column 5)",
 " (in 'fails-test.stan', line 87, column 6 to column 32)",
 " (in 'fails-test.stan', line 88, column 6 to column 23)",
 " (in 'fails-test.stan', line 86, column 38 to line 89, column 5)",
 " (in 'fails-test.stan', line 86, column 4 to line 89, column 5)",
 " (in 'fails-test.stan', line 81, column 20 to line 90, column 3)",
 " (in 'fails-test.stan', line 81, column 2 to line 90, column 3)",
 " (in 'fails-test.stan', line 92, column 2 to column 51)",
 " (in 'fails-test.stan', line 105, column 8 to column 37)",
 " (in 'fails-test.stan', line 106, column 8 to column 41)",
 " (in 'fails-test.stan', line 104, column 40 to line 107, column 7)",
 " (in 'fails-test.stan', line 104, column 6 to line 107, column 7)",
 " (in 'fails-test.stan', line 108, column 6 to column 37)",
 " (in 'fails-test.stan', line 103, column 22 to line 109, column 5)",
 " (in 'fails-test.stan', line 103, column 4 to line 109, column 5)",
 " (in 'fails-test.stan', line 102, column 20 to line 110, column 3)",
 " (in 'fails-test.stan', line 102, column 2 to line 110, column 3)",
 " (in 'fails-test.stan', line 50, column 2 to column 20)",
 " (in 'fails-test.stan', line 51, column 2 to column 27)",
 " (in 'fails-test.stan', line 52, column 25 to column 29)",
 " (in 'fails-test.stan', line 52, column 31 to column 42)",
 " (in 'fails-test.stan', line 52, column 2 to column 44)",
 " (in 'fails-test.stan', line 53, column 2 to column 23)",
 " (in 'fails-test.stan', line 54, column 31 to column 35)",
 " (in 'fails-test.stan', line 54, column 37 to column 52)",
 " (in 'fails-test.stan', line 54, column 2 to column 54)",
 " (in 'fails-test.stan', line 58, column 2 to column 38)",
 " (in 'fails-test.stan', line 60, column 39 to column 43)",
 " (in 'fails-test.stan', line 60, column 2 to column 45)",
 " (in 'fails-test.stan', line 61, column 38 to column 42)",
 " (in 'fails-test.stan', line 61, column 2 to column 44)",
 " (in 'fails-test.stan', line 65, column 4 to column 35)",
 " (in 'fails-test.stan', line 64, column 2 to line 65, column 35)",
 " (in 'fails-test.stan', line 67, column 4 to column 33)",
 " (in 'fails-test.stan', line 66, column 2 to line 67, column 33)",
 " (in 'fails-test.stan', line 72, column 26 to column 33)",
 " (in 'fails-test.stan', line 76, column 26 to column 30)",
 " (in 'fails-test.stan', line 76, column 32 to column 45)",
 " (in 'fails-test.stan', line 77, column 26 to column 30)",
 " (in 'fails-test.stan', line 77, column 32 to column 45)",
 " (in 'fails-test.stan', line 78, column 26 to column 30)",
 " (in 'fails-test.stan', line 78, column 32 to column 43)",
 " (in 'fails-test.stan', line 8, column 8 to column 17)",
 " (in 'fails-test.stan', line 7, column 6 to line 8, column 17)",
 " (in 'fails-test.stan', line 6, column 4 to line 8, column 17)",
 " (in 'fails-test.stan', line 9, column 4 to column 13)",
 " (in 'fails-test.stan', line 5, column 31 to line 10, column 3)",
 " (in 'fails-test.stan', line 15, column 6 to column 32)",
 " (in 'fails-test.stan', line 19, column 8 to column 17)",
 " (in 'fails-test.stan', line 18, column 6 to line 19, column 17)",
 " (in 'fails-test.stan', line 13, column 37 to line 20, column 5)",
 " (in 'fails-test.stan', line 13, column 4 to line 20, column 5)",
 " (in 'fails-test.stan', line 21, column 4 to column 13)",
 " (in 'fails-test.stan', line 12, column 30 to line 22, column 3)",
 " (in 'fails-test.stan', line 26, column 11 to column 15)",
 " (in 'fails-test.stan', line 26, column 17 to column 28)",
 " (in 'fails-test.stan', line 26, column 4 to column 34)",
 " (in 'fails-test.stan', line 29, column 6 to column 32)",
 " (in 'fails-test.stan', line 32, column 8 to column 37)",
 " (in 'fails-test.stan', line 33, column 8 to column 32)",
 " (in 'fails-test.stan', line 41, column 8 to line 42, column 83)",
 " (in 'fails-test.stan', line 30, column 37 to line 43, column 7)",
 " (in 'fails-test.stan', line 30, column 6 to line 43, column 7)",
 " (in 'fails-test.stan', line 28, column 22 to line 44, column 5)",
 " (in 'fails-test.stan', line 28, column 4 to line 44, column 5)",
 " (in 'fails-test.stan', line 45, column 4 to column 15)",
 " (in 'fails-test.stan', line 25, column 47 to line 46, column 3)"};


int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 53;
    for (int k = 1; k <= size(y_i); ++k) {
      current_statement__ = 52;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 51;
        return k;
      } 
    }
    current_statement__ = 54;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct first_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return first_capture(y_i, pstream__);
}
};

int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 60;
    for (int k_rev = 0; k_rev <= (size(y_i) - 1); ++k_rev) {
      int k;
      k = std::numeric_limits<int>::min(); 
      
      current_statement__ = 56;
      k = (size(y_i) - k_rev);
      current_statement__ = 58;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 57;
        return k;
      } 
    }
    current_statement__ = 61;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct last_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return last_capture(y_i, pstream__);
}
};

template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
prob_uncaptured(const int& nind, const int& n_occasions, const T2__& p_arg__,
                const T3__& phi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 63;
    validate_non_negative_index("chi", "nind", nind);
    current_statement__ = 64;
    validate_non_negative_index("chi", "n_occasions", n_occasions);
    Eigen::Matrix<local_scalar_t__, -1, -1> chi;
    chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
    stan::math::fill(chi, DUMMY_VAR__); 
    
    current_statement__ = 73;
    for (int i = 1; i <= nind; ++i) {
      current_statement__ = 66;
      assign(chi, 1.0,
        "assigning variable chi", index_uni(i), index_uni(n_occasions));
      current_statement__ = 71;
      for (int t = 1; t <= (n_occasions - 1); ++t) {
        int t_curr;
        t_curr = std::numeric_limits<int>::min(); 
        
        current_statement__ = 67;
        t_curr = (n_occasions - t);
        int t_next;
        t_next = std::numeric_limits<int>::min(); 
        
        current_statement__ = 68;
        t_next = (t_curr + 1);
        current_statement__ = 69;
        assign(chi,
          ((1 - rvalue(phi, "phi", index_uni(i), index_uni(t_curr))) +
            ((rvalue(phi, "phi", index_uni(i), index_uni(t_curr)) *
               (1 - rvalue(p, "p", index_uni(i), index_uni((t_next - 1))))) *
              rvalue(chi, "chi", index_uni(i), index_uni(t_next)))),
          "assigning variable chi", index_uni(i), index_uni(t_curr));
      }
    }
    current_statement__ = 74;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct prob_uncaptured_functor__ {
template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
operator()(const int& nind, const int& n_occasions, const T2__& p,
           const T3__& phi, std::ostream* pstream__)  const 
{
return prob_uncaptured(nind, n_occasions, p, phi, pstream__);
}
};

class fails_test_model final : public model_base_crtp<fails_test_model> {

 private:
  int nind;
  int n_occasions;
  std::vector<std::vector<int>> y;
  int max_age;
  std::vector<std::vector<int>> x;
  int n_occ_minus_1;
  std::vector<int> first;
  std::vector<int> last;
 
 public:
  ~fails_test_model() { }
  
  inline std::string model_name() const final { return "fails_test_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  fails_test_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "fails_test_model_namespace::fails_test_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization","nind","int",
           std::vector<size_t>{});
      nind = std::numeric_limits<int>::min(); 
      
      current_statement__ = 26;
      nind = context__.vals_i("nind")[(1 - 1)];
      current_statement__ = 26;
      check_greater_or_equal(function__, "nind", nind, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization","n_occasions","int",
           std::vector<size_t>{});
      n_occasions = std::numeric_limits<int>::min(); 
      
      current_statement__ = 27;
      n_occasions = context__.vals_i("n_occasions")[(1 - 1)];
      current_statement__ = 27;
      check_greater_or_equal(function__, "n_occasions", n_occasions, 2);
      current_statement__ = 28;
      validate_non_negative_index("y", "nind", nind);
      current_statement__ = 29;
      validate_non_negative_index("y", "n_occasions", n_occasions);
      current_statement__ = 30;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(nind),
            static_cast<size_t>(n_occasions)});
      y = std::vector<std::vector<int>>(nind, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 30;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          current_statement__ = 30;
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            current_statement__ = 30;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 30;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 30;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 30;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 31;
      context__.validate_dims("data initialization","max_age","int",
           std::vector<size_t>{});
      max_age = std::numeric_limits<int>::min(); 
      
      current_statement__ = 31;
      max_age = context__.vals_i("max_age")[(1 - 1)];
      current_statement__ = 31;
      check_greater_or_equal(function__, "max_age", max_age, 1);
      current_statement__ = 32;
      validate_non_negative_index("x", "nind", nind);
      current_statement__ = 33;
      validate_non_negative_index("x", "n_occasions - 1", (n_occasions - 1));
      current_statement__ = 34;
      context__.validate_dims("data initialization","x","int",
           std::vector<size_t>{static_cast<size_t>(nind),
            static_cast<size_t>((n_occasions - 1))});
      x = std::vector<std::vector<int>>(nind, std::vector<int>((n_occasions -
                                                                 1), std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> x_flat__;
        current_statement__ = 34;
        x_flat__ = context__.vals_i("x");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= (n_occasions - 1); ++sym1__) {
          current_statement__ = 34;
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            current_statement__ = 34;
            assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 34;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= (n_occasions - 1); ++sym2__) {
          current_statement__ = 34;
          check_greater_or_equal(function__, "x[sym1__, sym2__]",
                                 x[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 34;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 34;
        for (int sym2__ = 1; sym2__ <= (n_occasions - 1); ++sym2__) {
          current_statement__ = 34;
          check_less_or_equal(function__, "x[sym1__, sym2__]",
                              x[(sym1__ - 1)][(sym2__ - 1)], max_age);
        }
      }
      current_statement__ = 35;
      n_occ_minus_1 = std::numeric_limits<int>::min(); 
      
      current_statement__ = 35;
      n_occ_minus_1 = (n_occasions - 1);
      current_statement__ = 36;
      validate_non_negative_index("first", "nind", nind);
      current_statement__ = 37;
      first = std::vector<int>(nind, std::numeric_limits<int>::min()); 
      
      current_statement__ = 38;
      validate_non_negative_index("last", "nind", nind);
      current_statement__ = 39;
      last = std::vector<int>(nind, std::numeric_limits<int>::min()); 
      
      current_statement__ = 41;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 40;
        assign(first, first_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable first", index_uni(i));
      }
      current_statement__ = 43;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 42;
        assign(last, last_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable last", index_uni(i));
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 37;
        check_greater_or_equal(function__, "first[sym1__]",
                               first[(sym1__ - 1)], 0);
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 37;
        check_less_or_equal(function__, "first[sym1__]", first[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 39;
        check_greater_or_equal(function__, "last[sym1__]",
                               last[(sym1__ - 1)], 0);
      }
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 39;
        check_less_or_equal(function__, "last[sym1__]", last[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 44;
      validate_non_negative_index("beta", "max_age", max_age);
      current_statement__ = 45;
      validate_non_negative_index("phi", "nind", nind);
      current_statement__ = 46;
      validate_non_negative_index("phi", "n_occ_minus_1", n_occ_minus_1);
      current_statement__ = 47;
      validate_non_negative_index("p", "nind", nind);
      current_statement__ = 48;
      validate_non_negative_index("p", "n_occ_minus_1", n_occ_minus_1);
      current_statement__ = 49;
      validate_non_negative_index("chi", "nind", nind);
      current_statement__ = 50;
      validate_non_negative_index("chi", "n_occasions", n_occasions);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + max_age;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "fails_test_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mean_p;
      mean_p = DUMMY_VAR__; 
      
      current_statement__ = 1;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(max_age);
      stan::math::fill(beta, DUMMY_VAR__); 
      
      current_statement__ = 2;
      beta = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
               0, 1, lp__, max_age);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(p, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      current_statement__ = 15;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 9;
        for (int t = 1; t <= (rvalue(first, "first", index_uni(i)) - 1); ++t) {
          current_statement__ = 6;
          assign(phi, 0, "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 7;
          assign(p, 0, "assigning variable p", index_uni(i), index_uni(t));
        }
        current_statement__ = 13;
        for (int t = rvalue(first, "first", index_uni(i));
             t <= n_occ_minus_1; ++t) {
          current_statement__ = 10;
          assign(phi,
            rvalue(beta, "beta",
              index_uni(rvalue(x, "x", index_uni(i), index_uni(t)))),
            "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 11;
          assign(p, mean_p,
            "assigning variable p", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 16;
      assign(chi, prob_uncaptured(nind, n_occasions, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      {
        current_statement__ = 25;
        for (int i = 1; i <= nind; ++i) {
          current_statement__ = 23;
          if (logical_gt(rvalue(first, "first", index_uni(i)), 0)) {
            current_statement__ = 20;
            for (int t = (rvalue(first, "first", index_uni(i)) + 1);
                 t <= rvalue(last, "last", index_uni(i)); ++t) {
              current_statement__ = 17;
              lp_accum__.add(
                bernoulli_lpmf<propto__>(1,
                  rvalue(phi, "phi", index_uni(i), index_uni((t - 1)))));
              current_statement__ = 18;
              lp_accum__.add(
                bernoulli_lpmf<propto__>(
                  rvalue(y, "y", index_uni(i), index_uni(t)),
                  rvalue(p, "p", index_uni(i), index_uni((t - 1)))));
            }
            current_statement__ = 21;
            lp_accum__.add(
              bernoulli_lpmf<propto__>(1,
                rvalue(chi, "chi",
                  index_uni(i), index_uni(rvalue(last, "last", index_uni(i))))));
          } 
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "fails_test_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(max_age);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      beta = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
               0, 1, lp__, max_age);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<double, -1, -1> p;
      p = Eigen::Matrix<double, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      vars__.emplace_back(mean_p);
      for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 9;
        for (int t = 1; t <= (rvalue(first, "first", index_uni(i)) - 1); ++t) {
          current_statement__ = 6;
          assign(phi, 0, "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 7;
          assign(p, 0, "assigning variable p", index_uni(i), index_uni(t));
        }
        current_statement__ = 13;
        for (int t = rvalue(first, "first", index_uni(i));
             t <= n_occ_minus_1; ++t) {
          current_statement__ = 10;
          assign(phi,
            rvalue(beta, "beta",
              index_uni(rvalue(x, "x", index_uni(i), index_uni(t)))),
            "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 11;
          assign(p, mean_p,
            "assigning variable p", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 16;
      assign(chi, prob_uncaptured(nind, n_occasions, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(phi, "phi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(p, "p", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(chi, "chi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_p = context__.vals_r("mean_p")[(1 - 1)];
      double mean_p_free__;
      mean_p_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_p_free__ = stan::math::lub_free(mean_p, 0, 1);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(max_age);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> beta_flat__;
        current_statement__ = 2;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
          current_statement__ = 2;
          assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> beta_free__;
      beta_free__ = Eigen::Matrix<double, -1, 1>(max_age);
      stan::math::fill(beta_free__, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
        current_statement__ = 2;
        assign(beta_free__, stan::math::lub_free(beta[(sym1__ - 1)], 0, 1),
          "assigning variable beta_free__", index_uni(sym1__));
      }
      vars__.emplace_back(mean_p_free__);
      for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
        vars__.emplace_back(beta_free__[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mean_p", "beta", "phi", "p", "chi"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(max_age)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occ_minus_1)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occ_minus_1)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occasions)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_p");
    for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_p");
    for (int sym1__ = 1; sym1__ <= max_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_age) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(max_age) + "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = fails_test_model_namespace::fails_test_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return fails_test_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp inlining-fail2.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace inlining_fail2_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 158> locations_array__ = 
{" (found before start of program)",
 " (in 'inlining-fail2.stan', line 177, column 2 to column 33)",
 " (in 'inlining-fail2.stan', line 178, column 2 to column 31)",
 " (in 'inlining-fail2.stan', line 179, column 2 to column 45)",
 " (in 'inlining-fail2.stan', line 180, column 2 to column 32)",
 " (in 'inlining-fail2.stan', line 181, column 2 to column 30)",
 " (in 'inlining-fail2.stan', line 187, column 2 to column 50)",
 " (in 'inlining-fail2.stan', line 188, column 2 to column 44)",
 " (in 'inlining-fail2.stan', line 189, column 2 to column 46)",
 " (in 'inlining-fail2.stan', line 194, column 6 to column 58)",
 " (in 'inlining-fail2.stan', line 193, column 4 to line 194, column 58)",
 " (in 'inlining-fail2.stan', line 192, column 2 to line 194, column 58)",
 " (in 'inlining-fail2.stan', line 195, column 2 to column 41)",
 " (in 'inlining-fail2.stan', line 198, column 2 to column 32)",
 " (in 'inlining-fail2.stan', line 213, column 2 to column 14)",
 " (in 'inlining-fail2.stan', line 214, column 2 to column 11)",
 " (in 'inlining-fail2.stan', line 215, column 2 to column 24)",
 " (in 'inlining-fail2.stan', line 216, column 2 to column 13)",
 " (in 'inlining-fail2.stan', line 217, column 2 to column 21)",
 " (in 'inlining-fail2.stan', line 218, column 2 to column 21)",
 " (in 'inlining-fail2.stan', line 219, column 2 to column 24)",
 " (in 'inlining-fail2.stan', line 223, column 4 to column 14)",
 " (in 'inlining-fail2.stan', line 224, column 4 to column 13)",
 " (in 'inlining-fail2.stan', line 226, column 4 to column 38)",
 " (in 'inlining-fail2.stan', line 228, column 6 to column 32)",
 " (in 'inlining-fail2.stan', line 229, column 6 to line 230, column 26)",
 " (in 'inlining-fail2.stan', line 231, column 6 to column 35)",
 " (in 'inlining-fail2.stan', line 227, column 29 to line 232, column 5)",
 " (in 'inlining-fail2.stan', line 227, column 4 to line 232, column 5)",
 " (in 'inlining-fail2.stan', line 222, column 17 to line 233, column 3)",
 " (in 'inlining-fail2.stan', line 222, column 2 to line 233, column 3)",
 " (in 'inlining-fail2.stan', line 237, column 11 to column 22)",
 " (in 'inlining-fail2.stan', line 237, column 4 to column 49)",
 " (in 'inlining-fail2.stan', line 238, column 16 to column 17)",
 " (in 'inlining-fail2.stan', line 238, column 19 to column 30)",
 " (in 'inlining-fail2.stan', line 238, column 4 to column 63)",
 " (in 'inlining-fail2.stan', line 239, column 13 to column 14)",
 " (in 'inlining-fail2.stan', line 239, column 4 to column 16)",
 " (in 'inlining-fail2.stan', line 240, column 15 to column 16)",
 " (in 'inlining-fail2.stan', line 240, column 4 to column 18)",
 " (in 'inlining-fail2.stan', line 242, column 4 to column 27)",
 " (in 'inlining-fail2.stan', line 243, column 4 to column 21)",
 " (in 'inlining-fail2.stan', line 244, column 4 to column 20)",
 " (in 'inlining-fail2.stan', line 247, column 6 to column 36)",
 " (in 'inlining-fail2.stan', line 250, column 8 to column 26)",
 " (in 'inlining-fail2.stan', line 249, column 6 to line 250, column 26)",
 " (in 'inlining-fail2.stan', line 246, column 19 to line 251, column 5)",
 " (in 'inlining-fail2.stan', line 246, column 4 to line 251, column 5)",
 " (in 'inlining-fail2.stan', line 253, column 6 to column 25)",
 " (in 'inlining-fail2.stan', line 254, column 6 to column 31)",
 " (in 'inlining-fail2.stan', line 252, column 29 to line 255, column 5)",
 " (in 'inlining-fail2.stan', line 252, column 4 to line 255, column 5)",
 " (in 'inlining-fail2.stan', line 257, column 6 to column 26)",
 " (in 'inlining-fail2.stan', line 258, column 6 to column 31)",
 " (in 'inlining-fail2.stan', line 256, column 19 to line 259, column 5)",
 " (in 'inlining-fail2.stan', line 256, column 4 to line 259, column 5)",
 " (in 'inlining-fail2.stan', line 260, column 4 to column 25)",
 " (in 'inlining-fail2.stan', line 236, column 2 to line 261, column 3)",
 " (in 'inlining-fail2.stan', line 206, column 2 to column 29)",
 " (in 'inlining-fail2.stan', line 209, column 2 to column 53)",
 " (in 'inlining-fail2.stan', line 161, column 2 to column 17)",
 " (in 'inlining-fail2.stan', line 162, column 2 to column 27)",
 " (in 'inlining-fail2.stan', line 163, column 25 to column 26)",
 " (in 'inlining-fail2.stan', line 163, column 28 to column 39)",
 " (in 'inlining-fail2.stan', line 163, column 2 to column 41)",
 " (in 'inlining-fail2.stan', line 167, column 39 to column 40)",
 " (in 'inlining-fail2.stan', line 167, column 2 to column 42)",
 " (in 'inlining-fail2.stan', line 168, column 38 to column 39)",
 " (in 'inlining-fail2.stan', line 168, column 2 to column 41)",
 " (in 'inlining-fail2.stan', line 171, column 4 to column 35)",
 " (in 'inlining-fail2.stan', line 170, column 2 to line 171, column 35)",
 " (in 'inlining-fail2.stan', line 173, column 4 to column 33)",
 " (in 'inlining-fail2.stan', line 172, column 2 to line 173, column 33)",
 " (in 'inlining-fail2.stan', line 179, column 26 to column 37)",
 " (in 'inlining-fail2.stan', line 180, column 9 to column 22)",
 " (in 'inlining-fail2.stan', line 187, column 26 to column 27)",
 " (in 'inlining-fail2.stan', line 187, column 29 to column 44)",
 " (in 'inlining-fail2.stan', line 188, column 26 to column 27)",
 " (in 'inlining-fail2.stan', line 188, column 29 to column 40)",
 " (in 'inlining-fail2.stan', line 189, column 26 to column 27)",
 " (in 'inlining-fail2.stan', line 189, column 29 to column 40)",
 " (in 'inlining-fail2.stan', line 215, column 9 to column 20)",
 " (in 'inlining-fail2.stan', line 217, column 8 to column 19)",
 " (in 'inlining-fail2.stan', line 218, column 8 to column 19)",
 " (in 'inlining-fail2.stan', line 219, column 8 to column 9)",
 " (in 'inlining-fail2.stan', line 219, column 11 to column 22)",
 " (in 'inlining-fail2.stan', line 17, column 8 to column 17)",
 " (in 'inlining-fail2.stan', line 16, column 6 to line 17, column 17)",
 " (in 'inlining-fail2.stan', line 15, column 4 to line 17, column 17)",
 " (in 'inlining-fail2.stan', line 18, column 4 to column 13)",
 " (in 'inlining-fail2.stan', line 14, column 31 to line 19, column 3)",
 " (in 'inlining-fail2.stan', line 30, column 6 to column 32)",
 " (in 'inlining-fail2.stan', line 33, column 8 to column 17)",
 " (in 'inlining-fail2.stan', line 32, column 6 to line 33, column 17)",
 " (in 'inlining-fail2.stan', line 29, column 37 to line 34, column 5)",
 " (in 'inlining-fail2.stan', line 29, column 4 to line 34, column 5)",
 " (in 'inlining-fail2.stan', line 35, column 4 to column 13)",
 " (in 'inlining-fail2.stan', line 28, column 30 to line 36, column 3)",
 " (in 'inlining-fail2.stan', line 49, column 4 to column 24)",
 " (in 'inlining-fail2.stan', line 50, column 4 to column 30)",
 " (in 'inlining-fail2.stan', line 51, column 11 to column 16)",
 " (in 'inlining-fail2.stan', line 51, column 18 to column 29)",
 " (in 'inlining-fail2.stan', line 51, column 4 to column 35)",
 " (in 'inlining-fail2.stan', line 54, column 6 to column 32)",
 " (in 'inlining-fail2.stan', line 56, column 8 to column 37)",
 " (in 'inlining-fail2.stan', line 57, column 8 to column 32)",
 " (in 'inlining-fail2.stan', line 59, column 8 to line 60, column 65)",
 " (in 'inlining-fail2.stan', line 55, column 37 to line 61, column 7)",
 " (in 'inlining-fail2.stan', line 55, column 6 to line 61, column 7)",
 " (in 'inlining-fail2.stan', line 53, column 23 to line 62, column 5)",
 " (in 'inlining-fail2.stan', line 53, column 4 to line 62, column 5)",
 " (in 'inlining-fail2.stan', line 63, column 4 to column 15)",
 " (in 'inlining-fail2.stan', line 48, column 47 to line 64, column 3)",
 " (in 'inlining-fail2.stan', line 80, column 4 to column 27)",
 " (in 'inlining-fail2.stan', line 81, column 4 to column 33)",
 " (in 'inlining-fail2.stan', line 82, column 11 to column 22)",
 " (in 'inlining-fail2.stan', line 82, column 4 to column 45)",
 " (in 'inlining-fail2.stan', line 85, column 13 to column 24)",
 " (in 'inlining-fail2.stan', line 85, column 6 to column 43)",
 " (in 'inlining-fail2.stan', line 119, column 15 to column 28)",
 " (in 'inlining-fail2.stan', line 119, column 8 to column 33)",
 " (in 'inlining-fail2.stan', line 122, column 8 to line 124, column 47)",
 " (in 'inlining-fail2.stan', line 127, column 10 to line 130, column 49)",
 " (in 'inlining-fail2.stan', line 126, column 8 to line 130, column 49)",
 " (in 'inlining-fail2.stan', line 132, column 8 to column 63)",
 " (in 'inlining-fail2.stan', line 133, column 8 to column 34)",
 " (in 'inlining-fail2.stan', line 118, column 13 to line 134, column 7)",
 " (in 'inlining-fail2.stan', line 92, column 17 to column 25)",
 " (in 'inlining-fail2.stan', line 92, column 10 to column 30)",
 " (in 'inlining-fail2.stan', line 95, column 10 to line 98, column 54)",
 " (in 'inlining-fail2.stan', line 101, column 12 to line 105, column 56)",
 " (in 'inlining-fail2.stan', line 100, column 10 to line 105, column 56)",
 " (in 'inlining-fail2.stan', line 106, column 10 to line 108, column 61)",
 " (in 'inlining-fail2.stan', line 109, column 10 to column 36)",
 " (in 'inlining-fail2.stan', line 91, column 15 to line 110, column 9)",
 " (in 'inlining-fail2.stan', line 90, column 10 to column 44)",
 " (in 'inlining-fail2.stan', line 89, column 27 to line 91, column 9)",
 " (in 'inlining-fail2.stan', line 89, column 8 to line 110, column 9)",
 " (in 'inlining-fail2.stan', line 113, column 10 to column 39)",
 " (in 'inlining-fail2.stan', line 114, column 10 to column 39)",
 " (in 'inlining-fail2.stan', line 112, column 42 to line 115, column 9)",
 " (in 'inlining-fail2.stan', line 112, column 8 to line 115, column 9)",
 " (in 'inlining-fail2.stan', line 117, column 8 to column 39)",
 " (in 'inlining-fail2.stan', line 87, column 20 to line 118, column 7)",
 " (in 'inlining-fail2.stan', line 87, column 6 to line 134, column 7)",
 " (in 'inlining-fail2.stan', line 84, column 23 to line 135, column 5)",
 " (in 'inlining-fail2.stan', line 84, column 4 to line 135, column 5)",
 " (in 'inlining-fail2.stan', line 79, column 34 to line 136, column 3)",
 " (in 'inlining-fail2.stan', line 148, column 4 to column 24)",
 " (in 'inlining-fail2.stan', line 149, column 11 to column 12)",
 " (in 'inlining-fail2.stan', line 149, column 4 to column 24)",
 " (in 'inlining-fail2.stan', line 150, column 4 to column 31)",
 " (in 'inlining-fail2.stan', line 153, column 6 to column 55)",
 " (in 'inlining-fail2.stan', line 154, column 6 to column 64)",
 " (in 'inlining-fail2.stan', line 152, column 19 to line 155, column 5)",
 " (in 'inlining-fail2.stan', line 152, column 4 to line 155, column 5)",
 " (in 'inlining-fail2.stan', line 156, column 4 to column 26)",
 " (in 'inlining-fail2.stan', line 147, column 33 to line 157, column 3)"};


int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 88;
    for (int k = 1; k <= size(y_i); ++k) {
      current_statement__ = 87;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 86;
        return k;
      } 
    }
    current_statement__ = 89;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct first_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return first_capture(y_i, pstream__);
}
};

int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 95;
    for (int k_rev = 0; k_rev <= (size(y_i) - 1); ++k_rev) {
      int k;
      k = std::numeric_limits<int>::min(); 
      
      current_statement__ = 91;
      k = (size(y_i) - k_rev);
      current_statement__ = 93;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 92;
        return k;
      } 
    }
    current_statement__ = 96;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct last_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return last_capture(y_i, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
prob_uncaptured(const T0__& p_arg__, const T1__& phi_arg__,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  int current_statement__ = 0; 
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n_ind;
    n_ind = std::numeric_limits<int>::min(); 
    
    current_statement__ = 98;
    n_ind = rows(p);
    int n_occasions;
    n_occasions = std::numeric_limits<int>::min(); 
    
    current_statement__ = 99;
    n_occasions = cols(p);
    current_statement__ = 100;
    validate_non_negative_index("chi", "n_ind", n_ind);
    current_statement__ = 101;
    validate_non_negative_index("chi", "n_occasions", n_occasions);
    Eigen::Matrix<local_scalar_t__, -1, -1> chi;
    chi = Eigen::Matrix<local_scalar_t__, -1, -1>(n_ind, n_occasions);
    stan::math::fill(chi, DUMMY_VAR__); 
    
    current_statement__ = 110;
    for (int i = 1; i <= n_ind; ++i) {
      current_statement__ = 103;
      assign(chi, 1.0,
        "assigning variable chi", index_uni(i), index_uni(n_occasions));
      current_statement__ = 108;
      for (int t = 1; t <= (n_occasions - 1); ++t) {
        int t_curr;
        t_curr = std::numeric_limits<int>::min(); 
        
        current_statement__ = 104;
        t_curr = (n_occasions - t);
        int t_next;
        t_next = std::numeric_limits<int>::min(); 
        
        current_statement__ = 105;
        t_next = (t_curr + 1);
        current_statement__ = 106;
        assign(chi,
          ((1 - rvalue(phi, "phi", index_uni(i), index_uni(t_curr))) +
            ((rvalue(phi, "phi", index_uni(i), index_uni(t_curr)) *
               (1 - rvalue(p, "p", index_uni(i), index_uni(t_next)))) *
              rvalue(chi, "chi", index_uni(i), index_uni(t_next)))),
          "assigning variable chi", index_uni(i), index_uni(t_curr));
      }
    }
    current_statement__ = 111;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct prob_uncaptured_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>, -1, -1>
operator()(const T0__& p, const T1__& phi, std::ostream* pstream__)  const 
{
return prob_uncaptured(p, phi, pstream__);
}
};

template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T6__, typename T_lp__, typename T_lp_accum__>
void
jolly_seber_lp(const std::vector<std::vector<int>>& y,
               const std::vector<int>& first, const std::vector<int>& last,
               const T3__& p_arg__, const T4__& phi_arg__,
               const T5__& gamma_arg__, const T6__& chi_arg__, T_lp__& lp__,
               T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>,
          stan::value_type_t<T6__>>;
  int current_statement__ = 0; 
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  const auto& gamma = to_ref(gamma_arg__);
  const auto& chi = to_ref(chi_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int n_ind;
    n_ind = std::numeric_limits<int>::min(); 
    
    current_statement__ = 113;
    n_ind = rvalue(dims(y), "dims(y)", index_uni(1));
    int n_occasions;
    n_occasions = std::numeric_limits<int>::min(); 
    
    current_statement__ = 114;
    n_occasions = rvalue(dims(y), "dims(y)", index_uni(2));
    current_statement__ = 115;
    validate_non_negative_index("qgamma", "n_occasions", n_occasions);
    Eigen::Matrix<local_scalar_t__, -1, 1> qgamma;
    qgamma = Eigen::Matrix<local_scalar_t__, -1, 1>(n_occasions);
    stan::math::fill(qgamma, DUMMY_VAR__); 
    
    current_statement__ = 116;
    assign(qgamma, subtract(1.0, gamma), "assigning variable qgamma");
    current_statement__ = 146;
    for (int i = 1; i <= n_ind; ++i) {
      current_statement__ = 117;
      validate_non_negative_index("qp", "n_occasions", n_occasions);
      Eigen::Matrix<local_scalar_t__, -1, 1> qp;
      qp = Eigen::Matrix<local_scalar_t__, -1, 1>(n_occasions);
      stan::math::fill(qp, DUMMY_VAR__); 
      
      current_statement__ = 118;
      assign(qp, subtract(1.0, transpose(rvalue(p, "p", index_uni(i)))),
        "assigning variable qp");
      current_statement__ = 144;
      if (rvalue(first, "first", index_uni(i))) {
        current_statement__ = 137;
        if (logical_eq(rvalue(first, "first", index_uni(i)), 1)) {
          current_statement__ = 135;
          lp_accum__.add(
            bernoulli_lpmf<propto__>(1,
              (rvalue(gamma, "gamma", index_uni(1)) *
                rvalue(p, "p", index_uni(i), index_uni(1)))));
        } else {
          current_statement__ = 127;
          validate_non_negative_index("lp", "first[i]",
                                      rvalue(first, "first", index_uni(i)));
          Eigen::Matrix<local_scalar_t__, -1, 1> lp;
          lp = Eigen::Matrix<local_scalar_t__, -1, 1>(rvalue(first, "first",
                                                        index_uni(i)));
          stan::math::fill(lp, DUMMY_VAR__); 
          
          current_statement__ = 129;
          assign(lp,
            (((bernoulli_lpmf<false>(1, rvalue(gamma, "gamma", index_uni(1)))
                +
                bernoulli_lpmf<false>(1,
                  prod(
                    rvalue(qp, "qp",
                      index_min_max(1, (rvalue(first, "first", index_uni(i))
                                         - 1)))))) +
               bernoulli_lpmf<false>(1,
                 prod(
                   rvalue(phi, "phi",
                     index_uni(i),
                       index_min_max(1, (rvalue(first, "first", index_uni(i))
                                          - 1)))))) +
              bernoulli_lpmf<false>(1,
                rvalue(p, "p",
                  index_uni(i),
                    index_uni(rvalue(first, "first", index_uni(i)))))),
            "assigning variable lp", index_uni(1));
          current_statement__ = 131;
          for (int t = 2; t <= (rvalue(first, "first", index_uni(i)) - 1);
               ++t) {
            current_statement__ = 130;
            assign(lp,
              ((((bernoulli_lpmf<false>(1,
                    prod(rvalue(qgamma, "qgamma", index_min_max(1, (t - 1)))))
                   +
                   bernoulli_lpmf<false>(1,
                     rvalue(gamma, "gamma", index_uni(t)))) +
                  bernoulli_lpmf<false>(1,
                    prod(
                      rvalue(qp, "qp",
                        index_min_max(t, (rvalue(first, "first",
                                            index_uni(i)) - 1)))))) +
                 bernoulli_lpmf<false>(1,
                   prod(
                     rvalue(phi, "phi",
                       index_uni(i),
                         index_min_max(t, (rvalue(first, "first",
                                             index_uni(i)) - 1)))))) +
                bernoulli_lpmf<false>(1,
                  rvalue(p, "p",
                    index_uni(i),
                      index_uni(rvalue(first, "first", index_uni(i)))))),
              "assigning variable lp", index_uni(t));
          }
          current_statement__ = 132;
          assign(lp,
            ((bernoulli_lpmf<false>(1,
                prod(
                  rvalue(qgamma, "qgamma",
                    index_min_max(1, (rvalue(first, "first", index_uni(i)) -
                                       1))))) +
               bernoulli_lpmf<false>(1,
                 rvalue(gamma, "gamma",
                   index_uni(rvalue(first, "first", index_uni(i)))))) +
              bernoulli_lpmf<false>(1,
                rvalue(p, "p",
                  index_uni(i),
                    index_uni(rvalue(first, "first", index_uni(i)))))),
            "assigning variable lp", index_uni(rvalue(first, "first",
                                                 index_uni(i))));
          current_statement__ = 133;
          lp_accum__.add(log_sum_exp(lp));
        }
        current_statement__ = 141;
        for (int t = (rvalue(first, "first", index_uni(i)) + 1);
             t <= rvalue(last, "last", index_uni(i)); ++t) {
          current_statement__ = 138;
          lp_accum__.add(
            bernoulli_lpmf<propto__>(1,
              rvalue(phi, "phi", index_uni(i), index_uni((t - 1)))));
          current_statement__ = 139;
          lp_accum__.add(
            bernoulli_lpmf<propto__>(
              rvalue(y, "y", index_uni(i), index_uni(t)),
              rvalue(p, "p", index_uni(i), index_uni(t))));
        }
        current_statement__ = 142;
        lp_accum__.add(
          bernoulli_lpmf<propto__>(1,
            rvalue(chi, "chi",
              index_uni(i), index_uni(rvalue(last, "last", index_uni(i))))));
      } else {
        current_statement__ = 119;
        validate_non_negative_index("lp", "n_occasions + 1",
                                    (n_occasions + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> lp;
        lp = Eigen::Matrix<local_scalar_t__, -1, 1>((n_occasions + 1));
        stan::math::fill(lp, DUMMY_VAR__); 
        
        current_statement__ = 121;
        assign(lp,
          ((bernoulli_lpmf<false>(1, rvalue(gamma, "gamma", index_uni(1))) +
             bernoulli_lpmf<false>(0,
               rvalue(p, "p", index_uni(i), index_uni(1)))) +
            bernoulli_lpmf<false>(1,
              rvalue(chi, "chi", index_uni(i), index_uni(1)))),
          "assigning variable lp", index_uni(1));
        current_statement__ = 123;
        for (int t = 2; t <= n_occasions; ++t) {
          current_statement__ = 122;
          assign(lp,
            (((bernoulli_lpmf<false>(1,
                 prod(rvalue(qgamma, "qgamma", index_min_max(1, (t - 1))))) +
                bernoulli_lpmf<false>(1,
                  rvalue(gamma, "gamma", index_uni(t)))) +
               bernoulli_lpmf<false>(0,
                 rvalue(p, "p", index_uni(i), index_uni(t)))) +
              bernoulli_lpmf<false>(1,
                rvalue(chi, "chi", index_uni(i), index_uni(t)))),
            "assigning variable lp", index_uni(t));
        }
        current_statement__ = 124;
        assign(lp, bernoulli_lpmf<false>(1, prod(qgamma)),
          "assigning variable lp", index_uni((n_occasions + 1)));
        current_statement__ = 125;
        lp_accum__.add(log_sum_exp(lp));
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct jolly_seber_lp_functor__ {
template <bool propto__, typename T3__, typename T4__, typename T5__,
typename T6__, typename T_lp__, typename T_lp_accum__>
void
operator()(const std::vector<std::vector<int>>& y,
           const std::vector<int>& first, const std::vector<int>& last,
           const T3__& p, const T4__& phi, const T5__& gamma,
           const T6__& chi, T_lp__& lp__, T_lp_accum__& lp_accum__,
           std::ostream* pstream__)  const 
{
return jolly_seber_lp<propto__>(y, first, last, p, phi, gamma, chi, lp__,
         lp_accum__, pstream__);
}
};

template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
seq_cprob(const T0__& gamma_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  int current_statement__ = 0; 
  const auto& gamma = to_ref(gamma_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    int N;
    N = std::numeric_limits<int>::min(); 
    
    current_statement__ = 148;
    N = rows(gamma);
    current_statement__ = 149;
    validate_non_negative_index("log_cprob", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> log_cprob;
    log_cprob = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(log_cprob, DUMMY_VAR__); 
    
    local_scalar_t__ log_residual_prob;
    log_residual_prob = DUMMY_VAR__; 
    
    current_statement__ = 151;
    log_residual_prob = 0;
    current_statement__ = 155;
    for (int n = 1; n <= N; ++n) {
      current_statement__ = 152;
      assign(log_cprob,
        (stan::math::log(rvalue(gamma, "gamma", index_uni(n))) +
          log_residual_prob), "assigning variable log_cprob", index_uni(n));
      current_statement__ = 153;
      log_residual_prob = (log_residual_prob +
                            stan::math::log(
                              (1 - rvalue(gamma, "gamma", index_uni(n)))));
    }
    current_statement__ = 156;
    return stan::math::exp(log_cprob);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct seq_cprob_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& gamma, std::ostream* pstream__)  const 
{
return seq_cprob(gamma, pstream__);
}
};

class inlining_fail2_model final : public model_base_crtp<inlining_fail2_model> {

 private:
  int M;
  int n_occasions;
  std::vector<std::vector<int>> y;
  std::vector<int> first;
  std::vector<int> last;
  int epsilon_1dim__;
  int phi_2dim__;
 
 public:
  ~inlining_fail2_model() { }
  
  inline std::string model_name() const final { return "inlining_fail2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  inlining_fail2_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "inlining_fail2_model_namespace::inlining_fail2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 60;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min(); 
      
      current_statement__ = 60;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 60;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 61;
      context__.validate_dims("data initialization","n_occasions","int",
           std::vector<size_t>{});
      n_occasions = std::numeric_limits<int>::min(); 
      
      current_statement__ = 61;
      n_occasions = context__.vals_i("n_occasions")[(1 - 1)];
      current_statement__ = 61;
      check_greater_or_equal(function__, "n_occasions", n_occasions, 0);
      current_statement__ = 62;
      validate_non_negative_index("y", "M", M);
      current_statement__ = 63;
      validate_non_negative_index("y", "n_occasions", n_occasions);
      current_statement__ = 64;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(M),
            static_cast<size_t>(n_occasions)});
      y = std::vector<std::vector<int>>(M, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 64;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          current_statement__ = 64;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 64;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 64;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 64;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 64;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 64;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 64;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 64;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 64;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 65;
      validate_non_negative_index("first", "M", M);
      current_statement__ = 66;
      first = std::vector<int>(M, std::numeric_limits<int>::min()); 
      
      current_statement__ = 67;
      validate_non_negative_index("last", "M", M);
      current_statement__ = 68;
      last = std::vector<int>(M, std::numeric_limits<int>::min()); 
      
      current_statement__ = 70;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 69;
        assign(first, first_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable first", index_uni(i));
      }
      current_statement__ = 72;
      for (int i = 1; i <= M; ++i) {
        current_statement__ = 71;
        assign(last, last_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable last", index_uni(i));
      }
      current_statement__ = 66;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 66;
        check_greater_or_equal(function__, "first[sym1__]",
                               first[(sym1__ - 1)], 0);
      }
      current_statement__ = 66;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 66;
        check_less_or_equal(function__, "first[sym1__]", first[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 68;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 68;
        check_greater_or_equal(function__, "last[sym1__]",
                               last[(sym1__ - 1)], 0);
      }
      current_statement__ = 68;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 68;
        check_less_or_equal(function__, "last[sym1__]", last[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 73;
      validate_non_negative_index("gamma", "n_occasions", n_occasions);
      current_statement__ = 74;
      epsilon_1dim__ = std::numeric_limits<int>::min(); 
      
      current_statement__ = 74;
      epsilon_1dim__ = (n_occasions - 1);
      current_statement__ = 74;
      validate_non_negative_index("epsilon", "n_occasions - 1",
                                  epsilon_1dim__);
      current_statement__ = 75;
      validate_non_negative_index("phi", "M", M);
      current_statement__ = 76;
      phi_2dim__ = std::numeric_limits<int>::min(); 
      
      current_statement__ = 76;
      phi_2dim__ = (n_occasions - 1);
      current_statement__ = 76;
      validate_non_negative_index("phi", "n_occasions - 1", phi_2dim__);
      current_statement__ = 77;
      validate_non_negative_index("p", "M", M);
      current_statement__ = 78;
      validate_non_negative_index("p", "n_occasions", n_occasions);
      current_statement__ = 79;
      validate_non_negative_index("chi", "M", M);
      current_statement__ = 80;
      validate_non_negative_index("chi", "n_occasions", n_occasions);
      current_statement__ = 81;
      validate_non_negative_index("b", "n_occasions", n_occasions);
      current_statement__ = 82;
      validate_non_negative_index("N", "n_occasions", n_occasions);
      current_statement__ = 83;
      validate_non_negative_index("B", "n_occasions", n_occasions);
      current_statement__ = 84;
      validate_non_negative_index("z", "M", M);
      current_statement__ = 85;
      validate_non_negative_index("z", "n_occasions", n_occasions);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + n_occasions + epsilon_1dim__ + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "inlining_fail2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mean_phi;
      mean_phi = DUMMY_VAR__; 
      
      current_statement__ = 1;
      mean_phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 1, lp__);
      local_scalar_t__ mean_p;
      mean_p = DUMMY_VAR__; 
      
      current_statement__ = 2;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
      gamma = Eigen::Matrix<local_scalar_t__, -1, 1>(n_occasions);
      stan::math::fill(gamma, DUMMY_VAR__); 
      
      current_statement__ = 3;
      gamma = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, 1, lp__, n_occasions);
      Eigen::Matrix<local_scalar_t__, -1, 1> epsilon;
      epsilon = Eigen::Matrix<local_scalar_t__, -1, 1>(epsilon_1dim__);
      stan::math::fill(epsilon, DUMMY_VAR__); 
      
      current_statement__ = 4;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  epsilon_1dim__);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__; 
      
      current_statement__ = 5;
      sigma = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 5, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(M, phi_2dim__);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, -1>(M, n_occasions);
      stan::math::fill(p, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(M, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      current_statement__ = 11;
      for (int t = 1; t <= (n_occasions - 1); ++t) {
        current_statement__ = 10;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 9;
          assign(phi,
            inv_logit(
              (logit(mean_phi) + rvalue(epsilon, "epsilon", index_uni(t)))),
            "assigning variable phi", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 12;
      assign(p, rep_matrix(mean_p, M, n_occasions), "assigning variable p");
      current_statement__ = 13;
      assign(chi, prob_uncaptured(p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= phi_2dim__; ++sym2__) {
          current_statement__ = 6;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= phi_2dim__; ++sym2__) {
          current_statement__ = 6;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 7;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 7;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 8;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 8;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      {
        current_statement__ = 58;
        lp_accum__.add(normal_lpdf<propto__>(epsilon, 0, sigma));
        current_statement__ = 59;
        jolly_seber_lp<false>(y, first, last, p, phi, gamma,
          chi, lp__, lp_accum__, pstream__);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "inlining_fail2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mean_phi;
      mean_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 1, lp__);
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(n_occasions);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 3;
      gamma = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, 1, lp__, n_occasions);
      Eigen::Matrix<double, -1, 1> epsilon;
      epsilon = Eigen::Matrix<double, -1, 1>(epsilon_1dim__);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 4;
      epsilon = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                  epsilon_1dim__);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      sigma = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                0, 5, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(M, phi_2dim__);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<double, -1, -1> p;
      p = Eigen::Matrix<double, -1, -1>(M, n_occasions);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(M, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      vars__.emplace_back(mean_phi);
      vars__.emplace_back(mean_p);
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        vars__.emplace_back(gamma[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= epsilon_1dim__; ++sym1__) {
        vars__.emplace_back(epsilon[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      for (int t = 1; t <= (n_occasions - 1); ++t) {
        current_statement__ = 10;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 9;
          assign(phi,
            inv_logit(
              (logit(mean_phi) + rvalue(epsilon, "epsilon", index_uni(t)))),
            "assigning variable phi", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 12;
      assign(p, rep_matrix(mean_p, M, n_occasions), "assigning variable p");
      current_statement__ = 13;
      assign(chi, prob_uncaptured(p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= phi_2dim__; ++sym2__) {
          current_statement__ = 6;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= phi_2dim__; ++sym2__) {
          current_statement__ = 6;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 7;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 7;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 8;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 8;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= phi_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(
              rvalue(phi, "phi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(
              rvalue(p, "p", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(
              rvalue(chi, "chi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double sigma2;
      sigma2 = std::numeric_limits<double>::quiet_NaN(); 
      
      double psi;
      psi = std::numeric_limits<double>::quiet_NaN(); 
      
      Eigen::Matrix<double, -1, 1> b;
      b = Eigen::Matrix<double, -1, 1>(n_occasions);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN()); 
      
      int Nsuper;
      Nsuper = std::numeric_limits<int>::min(); 
      
      std::vector<int> N;
      N = std::vector<int>(n_occasions, std::numeric_limits<int>::min()); 
      
      std::vector<int> B;
      B = std::vector<int>(n_occasions, std::numeric_limits<int>::min()); 
      
      std::vector<std::vector<int>> z;
      z = std::vector<std::vector<int>>(M, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
       
      
      current_statement__ = 30;
      for (int i = 1; i <= M; ++i) {
        int q;
        q = std::numeric_limits<int>::min(); 
        
        current_statement__ = 21;
        q = 1;
        double mu2;
        mu2 = std::numeric_limits<double>::quiet_NaN(); 
        
        current_statement__ = 23;
        assign(z,
          bernoulli_rng(rvalue(gamma, "gamma", index_uni(1)), base_rng__),
          "assigning variable z", index_uni(i), index_uni(1));
        current_statement__ = 28;
        for (int t = 2; t <= n_occasions; ++t) {
          current_statement__ = 24;
          q = (q * (1 - rvalue(z, "z", index_uni(i), index_uni((t - 1)))));
          current_statement__ = 25;
          mu2 = ((rvalue(phi, "phi", index_uni(i), index_uni((t - 1))) *
                   rvalue(z, "z", index_uni(i), index_uni((t - 1)))) +
                  (rvalue(gamma, "gamma", index_uni(t)) * q));
          current_statement__ = 26;
          assign(z, bernoulli_rng(mu2, base_rng__),
            "assigning variable z", index_uni(i), index_uni(t));
        }
      }
      {
        current_statement__ = 31;
        validate_non_negative_index("cprob", "n_occasions", n_occasions);
        Eigen::Matrix<double, -1, 1> cprob;
        cprob = Eigen::Matrix<double, -1, 1>(n_occasions);
        stan::math::fill(cprob, std::numeric_limits<double>::quiet_NaN()); 
        
        current_statement__ = 32;
        assign(cprob, seq_cprob(gamma, pstream__), "assigning variable cprob");
        current_statement__ = 33;
        validate_non_negative_index("recruit", "M", M);
        current_statement__ = 34;
        validate_non_negative_index("recruit", "n_occasions", n_occasions);
        std::vector<std::vector<int>> recruit;
        recruit = std::vector<std::vector<int>>(M, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
         
        
        current_statement__ = 35;
        assign(recruit, rep_array(0, M, n_occasions),
          "assigning variable recruit");
        current_statement__ = 36;
        validate_non_negative_index("Nind", "M", M);
        std::vector<int> Nind;
        Nind = std::vector<int>(M, std::numeric_limits<int>::min()); 
        
        current_statement__ = 38;
        validate_non_negative_index("Nalive", "M", M);
        std::vector<int> Nalive;
        Nalive = std::vector<int>(M, std::numeric_limits<int>::min()); 
        
        current_statement__ = 40;
        sigma2 = square(sigma);
        current_statement__ = 41;
        psi = sum(cprob);
        current_statement__ = 42;
        assign(b, divide(cprob, psi), "assigning variable b");
        current_statement__ = 47;
        for (int i = 1; i <= M; ++i) {
          int f;
          f = std::numeric_limits<int>::min(); 
          
          current_statement__ = 43;
          f = first_capture(rvalue(z, "z", index_uni(i)), pstream__);
          current_statement__ = 45;
          if (logical_gt(f, 0)) {
            current_statement__ = 44;
            assign(recruit, 1,
              "assigning variable recruit", index_uni(i), index_uni(f));
          } 
        }
        current_statement__ = 51;
        for (int t = 1; t <= n_occasions; ++t) {
          current_statement__ = 48;
          assign(N, sum(rvalue(z, "z", index_omni(), index_uni(t))),
            "assigning variable N", index_uni(t));
          current_statement__ = 49;
          assign(B,
            sum(rvalue(recruit, "recruit", index_omni(), index_uni(t))),
            "assigning variable B", index_uni(t));
        }
        current_statement__ = 55;
        for (int i = 1; i <= M; ++i) {
          current_statement__ = 52;
          assign(Nind, sum(rvalue(z, "z", index_uni(i))),
            "assigning variable Nind", index_uni(i));
          current_statement__ = 53;
          assign(Nalive,
            (1 - logical_negation(rvalue(Nind, "Nind", index_uni(i)))),
            "assigning variable Nalive", index_uni(i));
        }
        current_statement__ = 56;
        Nsuper = sum(Nalive);
      }
      vars__.emplace_back(sigma2);
      vars__.emplace_back(psi);
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        vars__.emplace_back(b[(sym1__ - 1)]);
      }
      vars__.emplace_back(Nsuper);
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        vars__.emplace_back(N[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        vars__.emplace_back(B[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          vars__.emplace_back(z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double mean_phi;
      mean_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi = context__.vals_r("mean_phi")[(1 - 1)];
      double mean_phi_free__;
      mean_phi_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi_free__ = stan::math::lub_free(mean_phi, 0, 1);
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p = context__.vals_r("mean_p")[(1 - 1)];
      double mean_p_free__;
      mean_p_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p_free__ = stan::math::lub_free(mean_p, 0, 1);
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(n_occasions);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> gamma_flat__;
        current_statement__ = 3;
        gamma_flat__ = context__.vals_r("gamma");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          current_statement__ = 3;
          assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> gamma_free__;
      gamma_free__ = Eigen::Matrix<double, -1, 1>(n_occasions);
      stan::math::fill(gamma_free__, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        current_statement__ = 3;
        assign(gamma_free__, stan::math::lub_free(gamma[(sym1__ - 1)], 0, 1),
          "assigning variable gamma_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, 1> epsilon;
      epsilon = Eigen::Matrix<double, -1, 1>(epsilon_1dim__);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> epsilon_flat__;
        current_statement__ = 4;
        epsilon_flat__ = context__.vals_r("epsilon");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= epsilon_1dim__; ++sym1__) {
          current_statement__ = 4;
          assign(epsilon, epsilon_flat__[(pos__ - 1)],
            "assigning variable epsilon", index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      sigma_free__ = stan::math::lub_free(sigma, 0, 5);
      vars__.emplace_back(mean_phi_free__);
      vars__.emplace_back(mean_p_free__);
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        vars__.emplace_back(gamma_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= epsilon_1dim__; ++sym1__) {
        vars__.emplace_back(epsilon[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mean_phi", "mean_p", "gamma",
      "epsilon", "sigma", "phi", "p", "chi", "sigma2", "psi", "b", "Nsuper",
      "N", "B", "z"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(epsilon_1dim__)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(M),
                          static_cast<size_t>(phi_2dim__)},
      std::vector<size_t>{static_cast<size_t>(M),
                          static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(M),
                          static_cast<size_t>(n_occasions)},
      std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n_occasions)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(n_occasions)},
      std::vector<size_t>{static_cast<size_t>(M),
                          static_cast<size_t>(n_occasions)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_phi");
    param_names__.emplace_back(std::string() + "mean_p");
    for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= epsilon_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= phi_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sigma2");
      param_names__.emplace_back(std::string() + "psi");
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "Nsuper");
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "N" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "B" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_phi");
    param_names__.emplace_back(std::string() + "mean_p");
    for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= epsilon_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= phi_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "sigma2");
      param_names__.emplace_back(std::string() + "psi");
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "Nsuper");
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "N" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "B" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_occasions) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(epsilon_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(phi_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_occasions) + "},\"block\":\"generated_quantities\"},{\"name\":\"Nsuper\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"N\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"B\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_occasions) + "},\"block\":\"parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(epsilon_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(phi_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(M) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"psi\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_occasions) + "},\"block\":\"generated_quantities\"},{\"name\":\"Nsuper\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"N\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"B\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_occasions) + ",\"element_type\":{\"name\":\"int\"}}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = inlining_fail2_model_namespace::inlining_fail2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return inlining_fail2_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp lcm-experiment.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace lcm_experiment_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 8> locations_array__ = 
{" (found before start of program)",
 " (in 'lcm-experiment.stan', line 2, column 2 to column 8)",
 " (in 'lcm-experiment.stan', line 5, column 2 to column 13)",
 " (in 'lcm-experiment.stan', line 6, column 2 to column 9)",
 " (in 'lcm-experiment.stan', line 8, column 4 to column 27)",
 " (in 'lcm-experiment.stan', line 9, column 4 to column 35)",
 " (in 'lcm-experiment.stan', line 7, column 2 to line 10, column 3)",
 " (in 'lcm-experiment.stan', line 11, column 2 to column 38)"};



class lcm_experiment_model final : public model_base_crtp<lcm_experiment_model> {

 private:
  int j;
  double z;
  double x;
  double i;
 
 public:
  ~lcm_experiment_model() { }
  
  inline std::string model_name() const final { return "lcm_experiment_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  lcm_experiment_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_experiment_model_namespace::lcm_experiment_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 1;
      context__.validate_dims("data initialization","j","int",
           std::vector<size_t>{});
      j = std::numeric_limits<int>::min(); 
      
      current_statement__ = 1;
      j = context__.vals_i("j")[(1 - 1)];
      current_statement__ = 2;
      z = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      z = 1;
      current_statement__ = 3;
      x = std::numeric_limits<double>::quiet_NaN(); 
      
      {
        current_statement__ = 4;
        x = normal_rng(123, 1, base_rng__);
        current_statement__ = 5;
        z = normal_rng(((stan::math::sqrt(j) * 2) + 1), 1, base_rng__);
      }
      current_statement__ = 7;
      i = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 7;
      i = normal_rng(((stan::math::sqrt(j) * 2) + 1), 1, base_rng__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_experiment_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_experiment_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = lcm_experiment_model_namespace::lcm_experiment_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return lcm_experiment_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp lcm-experiment2.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace lcm_experiment2_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 9> locations_array__ = 
{" (found before start of program)",
 " (in 'lcm-experiment2.stan', line 2, column 2 to column 9)",
 " (in 'lcm-experiment2.stan', line 5, column 2 to column 18)",
 " (in 'lcm-experiment2.stan', line 7, column 4 to column 11)",
 " (in 'lcm-experiment2.stan', line 6, column 17 to line 8, column 3)",
 " (in 'lcm-experiment2.stan', line 6, column 2 to line 8, column 3)",
 " (in 'lcm-experiment2.stan', line 10, column 4 to column 11)",
 " (in 'lcm-experiment2.stan', line 9, column 2 to line 10, column 11)",
 " (in 'lcm-experiment2.stan', line 11, column 2 to column 14)"};



class lcm_experiment2_model final : public model_base_crtp<lcm_experiment2_model> {

 private:
  
 
 public:
  ~lcm_experiment2_model() { }
  
  inline std::string model_name() const final { return "lcm_experiment2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  lcm_experiment2_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_experiment2_model_namespace::lcm_experiment2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_experiment2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ x;
      x = DUMMY_VAR__; 
      
      current_statement__ = 1;
      x = in__.template read<local_scalar_t__>();
      {
        local_scalar_t__ y;
        y = DUMMY_VAR__; 
        
        current_statement__ = 2;
        y = stan::math::log(x);
        current_statement__ = 5;
        for (int j = 1; j <= 1; ++j) { current_statement__ = 3;
                                       y = (y + 1);}
        {
          current_statement__ = 6;
          y = (y + 1);
        }
        current_statement__ = 8;
        lp_accum__.add(y);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_experiment2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double x;
      x = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      x = in__.template read<local_scalar_t__>();
      vars__.emplace_back(x);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double x;
      x = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      x = context__.vals_r("x")[(1 - 1)];
      vars__.emplace_back(x);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"x"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = lcm_experiment2_model_namespace::lcm_experiment2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return lcm_experiment2_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp lcm-fails.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace lcm_fails_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 7> locations_array__ = 
{" (found before start of program)",
 " (in 'lcm-fails.stan', line 6, column 2 to column 16)",
 " (in 'lcm-fails.stan', line 9, column 2 to column 22)",
 " (in 'lcm-fails.stan', line 2, column 2 to column 17)",
 " (in 'lcm-fails.stan', line 3, column 9 to column 10)",
 " (in 'lcm-fails.stan', line 3, column 2 to column 12)",
 " (in 'lcm-fails.stan', line 6, column 13 to column 14)"};



class lcm_fails_model final : public model_base_crtp<lcm_fails_model> {

 private:
  int J;
  std::vector<double> y;
 
 public:
  ~lcm_fails_model() { }
  
  inline std::string model_name() const final { return "lcm_fails_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  lcm_fails_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_fails_model_namespace::lcm_fails_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 3;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min(); 
      
      current_statement__ = 3;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 3;
      check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 4;
      validate_non_negative_index("y", "J", J);
      current_statement__ = 5;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(J)});
      y = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 5;
      y = context__.vals_r("y");
      current_statement__ = 6;
      validate_non_negative_index("theta", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = J;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_fails_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(J, DUMMY_VAR__); 
      
      current_statement__ = 1;
      theta = in__.template read<std::vector<local_scalar_t__>>(J);
      {
        current_statement__ = 2;
        lp_accum__.add(normal_lpdf<propto__>(y, theta, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_fails_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> theta;
      theta = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 1;
      theta = in__.template read<std::vector<local_scalar_t__>>(J);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      std::vector<double> theta;
      theta = std::vector<double>(J, std::numeric_limits<double>::quiet_NaN());
       
      
      current_statement__ = 1;
      theta = context__.vals_r("theta");
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"theta"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(J)
                                                                   }};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(J) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = lcm_fails_model_namespace::lcm_fails_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return lcm_fails_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp lcm-fails2.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace lcm_fails2_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 71> locations_array__ = 
{" (found before start of program)",
 " (in 'lcm-fails2.stan', line 69, column 2 to column 33)",
 " (in 'lcm-fails2.stan', line 70, column 2 to column 31)",
 " (in 'lcm-fails2.stan', line 74, column 2 to column 51)",
 " (in 'lcm-fails2.stan', line 75, column 2 to column 49)",
 " (in 'lcm-fails2.stan', line 76, column 2 to column 49)",
 " (in 'lcm-fails2.stan', line 81, column 6 to column 20)",
 " (in 'lcm-fails2.stan', line 82, column 6 to column 18)",
 " (in 'lcm-fails2.stan', line 80, column 32 to line 83, column 5)",
 " (in 'lcm-fails2.stan', line 80, column 4 to line 83, column 5)",
 " (in 'lcm-fails2.stan', line 85, column 6 to column 27)",
 " (in 'lcm-fails2.stan', line 86, column 6 to column 23)",
 " (in 'lcm-fails2.stan', line 84, column 38 to line 87, column 5)",
 " (in 'lcm-fails2.stan', line 84, column 4 to line 87, column 5)",
 " (in 'lcm-fails2.stan', line 79, column 20 to line 88, column 3)",
 " (in 'lcm-fails2.stan', line 79, column 2 to line 88, column 3)",
 " (in 'lcm-fails2.stan', line 90, column 2 to column 51)",
 " (in 'lcm-fails2.stan', line 103, column 8 to column 37)",
 " (in 'lcm-fails2.stan', line 104, column 8 to column 41)",
 " (in 'lcm-fails2.stan', line 102, column 40 to line 105, column 7)",
 " (in 'lcm-fails2.stan', line 102, column 6 to line 105, column 7)",
 " (in 'lcm-fails2.stan', line 106, column 6 to column 37)",
 " (in 'lcm-fails2.stan', line 101, column 22 to line 107, column 5)",
 " (in 'lcm-fails2.stan', line 101, column 4 to line 107, column 5)",
 " (in 'lcm-fails2.stan', line 100, column 20 to line 108, column 3)",
 " (in 'lcm-fails2.stan', line 100, column 2 to line 108, column 3)",
 " (in 'lcm-fails2.stan', line 50, column 2 to column 20)",
 " (in 'lcm-fails2.stan', line 51, column 2 to column 27)",
 " (in 'lcm-fails2.stan', line 52, column 25 to column 29)",
 " (in 'lcm-fails2.stan', line 52, column 31 to column 42)",
 " (in 'lcm-fails2.stan', line 52, column 2 to column 44)",
 " (in 'lcm-fails2.stan', line 56, column 2 to column 38)",
 " (in 'lcm-fails2.stan', line 58, column 39 to column 43)",
 " (in 'lcm-fails2.stan', line 58, column 2 to column 45)",
 " (in 'lcm-fails2.stan', line 59, column 38 to column 42)",
 " (in 'lcm-fails2.stan', line 59, column 2 to column 44)",
 " (in 'lcm-fails2.stan', line 63, column 4 to column 35)",
 " (in 'lcm-fails2.stan', line 62, column 2 to line 63, column 35)",
 " (in 'lcm-fails2.stan', line 65, column 4 to column 33)",
 " (in 'lcm-fails2.stan', line 64, column 2 to line 65, column 33)",
 " (in 'lcm-fails2.stan', line 74, column 26 to column 30)",
 " (in 'lcm-fails2.stan', line 74, column 32 to column 45)",
 " (in 'lcm-fails2.stan', line 75, column 26 to column 30)",
 " (in 'lcm-fails2.stan', line 75, column 32 to column 45)",
 " (in 'lcm-fails2.stan', line 76, column 26 to column 30)",
 " (in 'lcm-fails2.stan', line 76, column 32 to column 43)",
 " (in 'lcm-fails2.stan', line 8, column 8 to column 17)",
 " (in 'lcm-fails2.stan', line 7, column 6 to line 8, column 17)",
 " (in 'lcm-fails2.stan', line 6, column 4 to line 8, column 17)",
 " (in 'lcm-fails2.stan', line 9, column 4 to column 13)",
 " (in 'lcm-fails2.stan', line 5, column 31 to line 10, column 3)",
 " (in 'lcm-fails2.stan', line 15, column 6 to column 32)",
 " (in 'lcm-fails2.stan', line 19, column 8 to column 17)",
 " (in 'lcm-fails2.stan', line 18, column 6 to line 19, column 17)",
 " (in 'lcm-fails2.stan', line 13, column 37 to line 20, column 5)",
 " (in 'lcm-fails2.stan', line 13, column 4 to line 20, column 5)",
 " (in 'lcm-fails2.stan', line 21, column 4 to column 13)",
 " (in 'lcm-fails2.stan', line 12, column 30 to line 22, column 3)",
 " (in 'lcm-fails2.stan', line 26, column 11 to column 15)",
 " (in 'lcm-fails2.stan', line 26, column 17 to column 28)",
 " (in 'lcm-fails2.stan', line 26, column 4 to column 34)",
 " (in 'lcm-fails2.stan', line 29, column 6 to column 32)",
 " (in 'lcm-fails2.stan', line 32, column 8 to column 37)",
 " (in 'lcm-fails2.stan', line 33, column 8 to column 32)",
 " (in 'lcm-fails2.stan', line 41, column 8 to line 42, column 83)",
 " (in 'lcm-fails2.stan', line 30, column 37 to line 43, column 7)",
 " (in 'lcm-fails2.stan', line 30, column 6 to line 43, column 7)",
 " (in 'lcm-fails2.stan', line 28, column 22 to line 44, column 5)",
 " (in 'lcm-fails2.stan', line 28, column 4 to line 44, column 5)",
 " (in 'lcm-fails2.stan', line 45, column 4 to column 15)",
 " (in 'lcm-fails2.stan', line 25, column 47 to line 46, column 3)"};


int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 48;
    for (int k = 1; k <= size(y_i); ++k) {
      current_statement__ = 47;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 46;
        return k;
      } 
    }
    current_statement__ = 49;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct first_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return first_capture(y_i, pstream__);
}
};

int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 55;
    for (int k_rev = 0; k_rev <= (size(y_i) - 1); ++k_rev) {
      int k;
      k = std::numeric_limits<int>::min(); 
      
      current_statement__ = 51;
      k = (size(y_i) - k_rev);
      current_statement__ = 53;
      if (rvalue(y_i, "y_i", index_uni(k))) {
        current_statement__ = 52;
        return k;
      } 
    }
    current_statement__ = 56;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct last_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return last_capture(y_i, pstream__);
}
};

template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
prob_uncaptured(const int& nind, const int& n_occasions, const T2__& p_arg__,
                const T3__& phi_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  int current_statement__ = 0; 
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 58;
    validate_non_negative_index("chi", "nind", nind);
    current_statement__ = 59;
    validate_non_negative_index("chi", "n_occasions", n_occasions);
    Eigen::Matrix<local_scalar_t__, -1, -1> chi;
    chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
    stan::math::fill(chi, DUMMY_VAR__); 
    
    current_statement__ = 68;
    for (int i = 1; i <= nind; ++i) {
      current_statement__ = 61;
      assign(chi, 1.0,
        "assigning variable chi", index_uni(i), index_uni(n_occasions));
      current_statement__ = 66;
      for (int t = 1; t <= (n_occasions - 1); ++t) {
        int t_curr;
        t_curr = std::numeric_limits<int>::min(); 
        
        current_statement__ = 62;
        t_curr = (n_occasions - t);
        int t_next;
        t_next = std::numeric_limits<int>::min(); 
        
        current_statement__ = 63;
        t_next = (t_curr + 1);
        current_statement__ = 64;
        assign(chi,
          ((1 - rvalue(phi, "phi", index_uni(i), index_uni(t_curr))) +
            ((rvalue(phi, "phi", index_uni(i), index_uni(t_curr)) *
               (1 - rvalue(p, "p", index_uni(i), index_uni((t_next - 1))))) *
              rvalue(chi, "chi", index_uni(i), index_uni(t_next)))),
          "assigning variable chi", index_uni(i), index_uni(t_curr));
      }
    }
    current_statement__ = 69;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct prob_uncaptured_functor__ {
template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
operator()(const int& nind, const int& n_occasions, const T2__& p,
           const T3__& phi, std::ostream* pstream__)  const 
{
return prob_uncaptured(nind, n_occasions, p, phi, pstream__);
}
};

class lcm_fails2_model final : public model_base_crtp<lcm_fails2_model> {

 private:
  int nind;
  int n_occasions;
  std::vector<std::vector<int>> y;
  int n_occ_minus_1;
  std::vector<int> first;
  std::vector<int> last;
 
 public:
  ~lcm_fails2_model() { }
  
  inline std::string model_name() const final { return "lcm_fails2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  lcm_fails2_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_fails2_model_namespace::lcm_fails2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization","nind","int",
           std::vector<size_t>{});
      nind = std::numeric_limits<int>::min(); 
      
      current_statement__ = 26;
      nind = context__.vals_i("nind")[(1 - 1)];
      current_statement__ = 26;
      check_greater_or_equal(function__, "nind", nind, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization","n_occasions","int",
           std::vector<size_t>{});
      n_occasions = std::numeric_limits<int>::min(); 
      
      current_statement__ = 27;
      n_occasions = context__.vals_i("n_occasions")[(1 - 1)];
      current_statement__ = 27;
      check_greater_or_equal(function__, "n_occasions", n_occasions, 2);
      current_statement__ = 28;
      validate_non_negative_index("y", "nind", nind);
      current_statement__ = 29;
      validate_non_negative_index("y", "n_occasions", n_occasions);
      current_statement__ = 30;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(nind),
            static_cast<size_t>(n_occasions)});
      y = std::vector<std::vector<int>>(nind, std::vector<int>(n_occasions, std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 30;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          current_statement__ = 30;
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            current_statement__ = 30;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 30;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 30;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 30;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 31;
      n_occ_minus_1 = std::numeric_limits<int>::min(); 
      
      current_statement__ = 31;
      n_occ_minus_1 = (n_occasions - 1);
      current_statement__ = 32;
      validate_non_negative_index("first", "nind", nind);
      current_statement__ = 33;
      first = std::vector<int>(nind, std::numeric_limits<int>::min()); 
      
      current_statement__ = 34;
      validate_non_negative_index("last", "nind", nind);
      current_statement__ = 35;
      last = std::vector<int>(nind, std::numeric_limits<int>::min()); 
      
      current_statement__ = 37;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 36;
        assign(first, first_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable first", index_uni(i));
      }
      current_statement__ = 39;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 38;
        assign(last, last_capture(rvalue(y, "y", index_uni(i)), pstream__),
          "assigning variable last", index_uni(i));
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 33;
        check_greater_or_equal(function__, "first[sym1__]",
                               first[(sym1__ - 1)], 0);
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 33;
        check_less_or_equal(function__, "first[sym1__]", first[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 35;
        check_greater_or_equal(function__, "last[sym1__]",
                               last[(sym1__ - 1)], 0);
      }
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 35;
        check_less_or_equal(function__, "last[sym1__]", last[(sym1__ - 1)],
                            n_occasions);
      }
      current_statement__ = 40;
      validate_non_negative_index("phi", "nind", nind);
      current_statement__ = 41;
      validate_non_negative_index("phi", "n_occ_minus_1", n_occ_minus_1);
      current_statement__ = 42;
      validate_non_negative_index("p", "nind", nind);
      current_statement__ = 43;
      validate_non_negative_index("p", "n_occ_minus_1", n_occ_minus_1);
      current_statement__ = 44;
      validate_non_negative_index("chi", "nind", nind);
      current_statement__ = 45;
      validate_non_negative_index("chi", "n_occasions", n_occasions);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_fails2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mean_phi;
      mean_phi = DUMMY_VAR__; 
      
      current_statement__ = 1;
      mean_phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 1, lp__);
      local_scalar_t__ mean_p;
      mean_p = DUMMY_VAR__; 
      
      current_statement__ = 2;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(phi, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(p, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, -1>(nind, n_occasions);
      stan::math::fill(chi, DUMMY_VAR__); 
      
      current_statement__ = 15;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 9;
        for (int t = 1; t <= (rvalue(first, "first", index_uni(i)) - 1); ++t) {
          current_statement__ = 6;
          assign(phi, 0, "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 7;
          assign(p, 0, "assigning variable p", index_uni(i), index_uni(t));
        }
        current_statement__ = 13;
        for (int t = rvalue(first, "first", index_uni(i));
             t <= n_occ_minus_1; ++t) {
          current_statement__ = 10;
          assign(phi, mean_phi,
            "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 11;
          assign(p, mean_p,
            "assigning variable p", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 16;
      assign(chi, prob_uncaptured(nind, n_occasions, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      {
        current_statement__ = 25;
        for (int i = 1; i <= nind; ++i) {
          current_statement__ = 23;
          if (logical_gt(rvalue(first, "first", index_uni(i)), 0)) {
            current_statement__ = 20;
            for (int t = (rvalue(first, "first", index_uni(i)) + 1);
                 t <= rvalue(last, "last", index_uni(i)); ++t) {
              current_statement__ = 17;
              lp_accum__.add(
                bernoulli_lpmf<propto__>(1,
                  rvalue(phi, "phi", index_uni(i), index_uni((t - 1)))));
              current_statement__ = 18;
              lp_accum__.add(
                bernoulli_lpmf<propto__>(
                  rvalue(y, "y", index_uni(i), index_uni(t)),
                  rvalue(p, "p", index_uni(i), index_uni((t - 1)))));
            }
            current_statement__ = 21;
            lp_accum__.add(
              bernoulli_lpmf<propto__>(1,
                rvalue(chi, "chi",
                  index_uni(i), index_uni(rvalue(last, "last", index_uni(i))))));
          } 
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lcm_fails2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mean_phi;
      mean_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 1, lp__);
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                 0, 1, lp__);
      Eigen::Matrix<double, -1, -1> phi;
      phi = Eigen::Matrix<double, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<double, -1, -1> p;
      p = Eigen::Matrix<double, -1, -1>(nind, n_occ_minus_1);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<double, -1, -1> chi;
      chi = Eigen::Matrix<double, -1, -1>(nind, n_occasions);
      stan::math::fill(chi, std::numeric_limits<double>::quiet_NaN()); 
      
      vars__.emplace_back(mean_phi);
      vars__.emplace_back(mean_p);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      for (int i = 1; i <= nind; ++i) {
        current_statement__ = 9;
        for (int t = 1; t <= (rvalue(first, "first", index_uni(i)) - 1); ++t) {
          current_statement__ = 6;
          assign(phi, 0, "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 7;
          assign(p, 0, "assigning variable p", index_uni(i), index_uni(t));
        }
        current_statement__ = 13;
        for (int t = rvalue(first, "first", index_uni(i));
             t <= n_occ_minus_1; ++t) {
          current_statement__ = 10;
          assign(phi, mean_phi,
            "assigning variable phi", index_uni(i), index_uni(t));
          current_statement__ = 11;
          assign(p, mean_p,
            "assigning variable p", index_uni(i), index_uni(t));
        }
      }
      current_statement__ = 16;
      assign(chi, prob_uncaptured(nind, n_occasions, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_greater_or_equal(function__, "phi[sym1__, sym2__]",
                                 rvalue(phi, "phi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 3;
          check_less_or_equal(function__, "phi[sym1__, sym2__]",
                              rvalue(phi, "phi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_greater_or_equal(function__, "p[sym1__, sym2__]",
                                 rvalue(p, "p",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= n_occ_minus_1; ++sym2__) {
          current_statement__ = 4;
          check_less_or_equal(function__, "p[sym1__, sym2__]",
                              rvalue(p, "p",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_greater_or_equal(function__, "chi[sym1__, sym2__]",
                                 rvalue(chi, "chi",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= nind; ++sym1__) {
        current_statement__ = 5;
        for (int sym2__ = 1; sym2__ <= n_occasions; ++sym2__) {
          current_statement__ = 5;
          check_less_or_equal(function__, "chi[sym1__, sym2__]",
                              rvalue(chi, "chi",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(phi, "phi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(p, "p", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            vars__.emplace_back(
              rvalue(chi, "chi", index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double mean_phi;
      mean_phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi = context__.vals_r("mean_phi")[(1 - 1)];
      double mean_phi_free__;
      mean_phi_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mean_phi_free__ = stan::math::lub_free(mean_phi, 0, 1);
      double mean_p;
      mean_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p = context__.vals_r("mean_p")[(1 - 1)];
      double mean_p_free__;
      mean_p_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      mean_p_free__ = stan::math::lub_free(mean_p, 0, 1);
      vars__.emplace_back(mean_phi_free__);
      vars__.emplace_back(mean_p_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mean_phi", "mean_p", "phi", "p",
      "chi"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occ_minus_1)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occ_minus_1)},
      std::vector<size_t>{static_cast<size_t>(nind),
                          static_cast<size_t>(n_occasions)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_phi");
    param_names__.emplace_back(std::string() + "mean_p");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mean_phi");
    param_names__.emplace_back(std::string() + "mean_p");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occ_minus_1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= n_occasions; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nind; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mean_phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mean_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occ_minus_1) + "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nind) + ",\"cols\":" + std::to_string(n_occasions) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = lcm_fails2_model_namespace::lcm_fails2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return lcm_fails2_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp lupdf-inlining.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace lupdf_inlining_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 14> locations_array__ = 
{" (found before start of program)",
 " (in 'lupdf-inlining.stan', line 16, column 4 to column 12)",
 " (in 'lupdf-inlining.stan', line 19, column 4 to column 32)",
 " (in 'lupdf-inlining.stan', line 26, column 4 to column 30)",
 " (in 'lupdf-inlining.stan', line 27, column 4 to column 31)",
 " (in 'lupdf-inlining.stan', line 22, column 4 to column 29)",
 " (in 'lupdf-inlining.stan', line 23, column 4 to column 31)",
 " (in 'lupdf-inlining.stan', line 13, column 4 to column 10)",
 " (in 'lupdf-inlining.stan', line 3, column 8 to column 36)",
 " (in 'lupdf-inlining.stan', line 2, column 35 to line 4, column 5)",
 " (in 'lupdf-inlining.stan', line 6, column 8 to column 35)",
 " (in 'lupdf-inlining.stan', line 5, column 34 to line 7, column 5)",
 " (in 'lupdf-inlining.stan', line 9, column 8 to column 32)",
 " (in 'lupdf-inlining.stan', line 8, column 26 to line 10, column 5)"};


template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
foo_lpdf(const T0__& x, const T1__& mu, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 8;
    return normal_lpdf<propto__>(x, mu, 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& x, const T1__& mu, std::ostream* pstream__)  const 
{
return foo_lpdf<propto__>(x, mu, pstream__);
}
};

template <bool propto__, typename T1__>
stan::promote_args_t<T1__>
bar_lpmf(const int& n, const T1__& mu, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 10;
    return poisson_lpmf<propto__>(n, mu);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct bar_lpmf_functor__ {
template <bool propto__, typename T1__>
stan::promote_args_t<T1__>
operator()(const int& n, const T1__& mu, std::ostream* pstream__)  const 
{
return bar_lpmf<propto__>(n, mu, pstream__);
}
};

template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
baz_lpdf(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 12;
    return foo_lpdf<propto__>(x, 0.5, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct baz_lpdf_functor__ {
template <bool propto__, typename T0__>
stan::promote_args_t<T0__>
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return baz_lpdf<propto__>(x, pstream__);
}
};

class lupdf_inlining_model final : public model_base_crtp<lupdf_inlining_model> {

 private:
  int n;
 
 public:
  ~lupdf_inlining_model() { }
  
  inline std::string model_name() const final { return "lupdf_inlining_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  lupdf_inlining_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "lupdf_inlining_model_namespace::lupdf_inlining_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 7;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min(); 
      
      current_statement__ = 7;
      n = context__.vals_i("n")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lupdf_inlining_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu;
      mu = DUMMY_VAR__; 
      
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ tp;
      tp = DUMMY_VAR__; 
      
      current_statement__ = 2;
      tp = foo_lpdf<false>(mu, 1.0, pstream__);
      {
        current_statement__ = 5;
        lp_accum__.add(baz_lpdf<propto__>(mu, pstream__));
        current_statement__ = 6;
        lp_accum__.add(bar_lpmf<propto__>(n, mu, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "lupdf_inlining_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      double tp;
      tp = std::numeric_limits<double>::quiet_NaN(); 
      
      vars__.emplace_back(mu);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 2;
      tp = foo_lpdf<false>(mu, 1.0, pstream__);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(tp);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double lbaz;
      lbaz = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      lbaz = baz_lpdf<false>(mu, pstream__);
      double lbar;
      lbar = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      lbar = bar_lpmf<false>(n, mu, pstream__);
      vars__.emplace_back(lbaz);
      vars__.emplace_back(lbar);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double mu;
      mu = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      mu = context__.vals_r("mu")[(1 - 1)];
      vars__.emplace_back(mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu", "tp", "lbaz", "lbar"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "lbaz");
      param_names__.emplace_back(std::string() + "lbar");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp");
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "lbaz");
      param_names__.emplace_back(std::string() + "lbar");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tp\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lbaz\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"lbar\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tp\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lbaz\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"lbar\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = lupdf_inlining_model_namespace::lupdf_inlining_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return lupdf_inlining_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp off-dce.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace off_dce_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 55> locations_array__ = 
{" (found before start of program)",
 " (in 'off-dce.stan', line 23, column 2 to column 17)",
 " (in 'off-dce.stan', line 24, column 2 to column 16)",
 " (in 'off-dce.stan', line 25, column 2 to column 15)",
 " (in 'off-dce.stan', line 26, column 2 to column 14)",
 " (in 'off-dce.stan', line 30, column 2 to column 22)",
 " (in 'off-dce.stan', line 31, column 2 to column 23)",
 " (in 'off-dce.stan', line 33, column 2 to column 39)",
 " (in 'off-dce.stan', line 34, column 2 to column 48)",
 " (in 'off-dce.stan', line 58, column 2 to column 13)",
 " (in 'off-dce.stan', line 59, column 2 to column 18)",
 " (in 'off-dce.stan', line 60, column 2 to column 11)",
 " (in 'off-dce.stan', line 70, column 6 to column 21)",
 " (in 'off-dce.stan', line 71, column 6 to column 15)",
 " (in 'off-dce.stan', line 69, column 11 to line 72, column 5)",
 " (in 'off-dce.stan', line 64, column 6 to column 41)",
 " (in 'off-dce.stan', line 65, column 13 to column 14)",
 " (in 'off-dce.stan', line 65, column 6 to column 44)",
 " (in 'off-dce.stan', line 66, column 6 to column 26)",
 " (in 'off-dce.stan', line 67, column 6 to column 55)",
 " (in 'off-dce.stan', line 68, column 6 to column 39)",
 " (in 'off-dce.stan', line 63, column 23 to line 69, column 5)",
 " (in 'off-dce.stan', line 63, column 4 to line 72, column 5)",
 " (in 'off-dce.stan', line 62, column 17 to line 73, column 3)",
 " (in 'off-dce.stan', line 62, column 2 to line 73, column 3)",
 " (in 'off-dce.stan', line 74, column 2 to column 18)",
 " (in 'off-dce.stan', line 49, column 6 to line 52, column 68)",
 " (in 'off-dce.stan', line 47, column 11 to line 53, column 5)",
 " (in 'off-dce.stan', line 45, column 6 to column 40)",
 " (in 'off-dce.stan', line 46, column 6 to column 41)",
 " (in 'off-dce.stan', line 44, column 18 to line 47, column 5)",
 " (in 'off-dce.stan', line 44, column 4 to line 53, column 5)",
 " (in 'off-dce.stan', line 43, column 17 to line 54, column 3)",
 " (in 'off-dce.stan', line 43, column 2 to line 54, column 3)",
 " (in 'off-dce.stan', line 4, column 2 to column 17)",
 " (in 'off-dce.stan', line 5, column 2 to column 17)",
 " (in 'off-dce.stan', line 6, column 25 to column 26)",
 " (in 'off-dce.stan', line 6, column 28 to column 29)",
 " (in 'off-dce.stan', line 6, column 2 to column 31)",
 " (in 'off-dce.stan', line 7, column 9 to column 10)",
 " (in 'off-dce.stan', line 7, column 2 to column 14)",
 " (in 'off-dce.stan', line 11, column 29 to column 30)",
 " (in 'off-dce.stan', line 11, column 2 to column 32)",
 " (in 'off-dce.stan', line 12, column 2 to column 31)",
 " (in 'off-dce.stan', line 14, column 2 to column 14)",
 " (in 'off-dce.stan', line 16, column 4 to column 25)",
 " (in 'off-dce.stan', line 18, column 6 to column 28)",
 " (in 'off-dce.stan', line 17, column 4 to line 18, column 28)",
 " (in 'off-dce.stan', line 15, column 17 to line 19, column 3)",
 " (in 'off-dce.stan', line 15, column 2 to line 19, column 3)",
 " (in 'off-dce.stan', line 30, column 9 to column 10)",
 " (in 'off-dce.stan', line 31, column 9 to column 10)",
 " (in 'off-dce.stan', line 31, column 12 to column 13)",
 " (in 'off-dce.stan', line 59, column 15 to column 16)",
 " (in 'off-dce.stan', line 60, column 8 to column 9)"};



class off_dce_model final : public model_base_crtp<off_dce_model> {

 private:
  int R;
  int T;
  std::vector<std::vector<int>> y;
  Eigen::Matrix<double, -1, 1> X;
  std::vector<int> sum_y;
  int occ_obs;
 
 public:
  ~off_dce_model() { }
  
  inline std::string model_name() const final { return "off_dce_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  off_dce_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "off_dce_model_namespace::off_dce_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 34;
      context__.validate_dims("data initialization","R","int",
           std::vector<size_t>{});
      R = std::numeric_limits<int>::min(); 
      
      current_statement__ = 34;
      R = context__.vals_i("R")[(1 - 1)];
      current_statement__ = 34;
      check_greater_or_equal(function__, "R", R, 1);
      current_statement__ = 35;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min(); 
      
      current_statement__ = 35;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 35;
      check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 36;
      validate_non_negative_index("y", "R", R);
      current_statement__ = 37;
      validate_non_negative_index("y", "T", T);
      current_statement__ = 38;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(R),
            static_cast<size_t>(T)});
      y = std::vector<std::vector<int>>(R, std::vector<int>(T, std::numeric_limits<int>::min()));
       
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 38;
        y_flat__ = context__.vals_i("y");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            current_statement__ = 38;
            assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 38;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 38;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 38;
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          current_statement__ = 38;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);
        }
      }
      current_statement__ = 38;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 38;
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          current_statement__ = 38;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], 1);
        }
      }
      current_statement__ = 39;
      validate_non_negative_index("X", "R", R);
      current_statement__ = 40;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(R)});
      X = Eigen::Matrix<double, -1, 1>(R); 
      
      {
        std::vector<double> X_flat__;
        current_statement__ = 40;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          current_statement__ = 40;
          assign(X, X_flat__[(pos__ - 1)],
            "assigning variable X", index_uni(sym1__));
          current_statement__ = 40;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 41;
      validate_non_negative_index("sum_y", "R", R);
      current_statement__ = 42;
      sum_y = std::vector<int>(R, std::numeric_limits<int>::min()); 
      
      current_statement__ = 43;
      occ_obs = std::numeric_limits<int>::min(); 
      
      current_statement__ = 44;
      occ_obs = 0;
      current_statement__ = 49;
      for (int i = 1; i <= R; ++i) {
        current_statement__ = 45;
        assign(sum_y, sum(rvalue(y, "y", index_uni(i))),
          "assigning variable sum_y", index_uni(i));
        current_statement__ = 47;
        if (rvalue(sum_y, "sum_y", index_uni(i))) {
          current_statement__ = 46;
          occ_obs = (occ_obs + 1);
        } 
      }
      current_statement__ = 42;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 42;
        check_greater_or_equal(function__, "sum_y[sym1__]",
                               sum_y[(sym1__ - 1)], 0);
      }
      current_statement__ = 42;
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        current_statement__ = 42;
        check_less_or_equal(function__, "sum_y[sym1__]", sum_y[(sym1__ - 1)],
                            T);
      }
      current_statement__ = 43;
      check_greater_or_equal(function__, "occ_obs", occ_obs, 0);
      current_statement__ = 43;
      check_less_or_equal(function__, "occ_obs", occ_obs, R);
      current_statement__ = 50;
      validate_non_negative_index("logit_psi", "R", R);
      current_statement__ = 51;
      validate_non_negative_index("logit_p", "R", R);
      current_statement__ = 52;
      validate_non_negative_index("logit_p", "T", T);
      current_statement__ = 53;
      validate_non_negative_index("psi_con", "R", R);
      current_statement__ = 54;
      validate_non_negative_index("z", "R", R);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "off_dce_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha_occ;
      alpha_occ = DUMMY_VAR__; 
      
      current_statement__ = 1;
      alpha_occ = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_occ;
      beta_occ = DUMMY_VAR__; 
      
      current_statement__ = 2;
      beta_occ = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha_p;
      alpha_p = DUMMY_VAR__; 
      
      current_statement__ = 3;
      alpha_p = in__.template read<local_scalar_t__>();
      local_scalar_t__ beta_p;
      beta_p = DUMMY_VAR__; 
      
      current_statement__ = 4;
      beta_p = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> logit_psi;
      logit_psi = Eigen::Matrix<local_scalar_t__, -1, 1>(R);
      stan::math::fill(logit_psi, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, -1> logit_p;
      logit_p = Eigen::Matrix<local_scalar_t__, -1, -1>(R, T);
      stan::math::fill(logit_p, DUMMY_VAR__); 
      
      current_statement__ = 7;
      assign(logit_psi, add(alpha_occ, multiply(beta_occ, X)),
        "assigning variable logit_psi");
      current_statement__ = 8;
      assign(logit_p, rep_matrix(add(alpha_p, multiply(beta_p, X)), T),
        "assigning variable logit_p");
      {
        current_statement__ = 33;
        for (int i = 1; i <= R; ++i) {
          current_statement__ = 31;
          if (rvalue(sum_y, "sum_y", index_uni(i))) {
            current_statement__ = 28;
            lp_accum__.add(
              bernoulli_logit_lpmf<propto__>(1,
                rvalue(logit_psi, "logit_psi", index_uni(i))));
            current_statement__ = 29;
            lp_accum__.add(
              bernoulli_logit_lpmf<propto__>(rvalue(y, "y", index_uni(i)),
                rvalue(logit_p, "logit_p", index_uni(i))));
          } else {
            current_statement__ = 26;
            lp_accum__.add(
              log_sum_exp(
                (bernoulli_logit_lpmf<false>(1,
                   rvalue(logit_psi, "logit_psi", index_uni(i))) +
                  bernoulli_logit_lpmf<false>(0,
                    rvalue(logit_p, "logit_p", index_uni(i)))),
                bernoulli_logit_lpmf<false>(0,
                  rvalue(logit_psi, "logit_psi", index_uni(i)))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "off_dce_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha_occ;
      alpha_occ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      alpha_occ = in__.template read<local_scalar_t__>();
      double beta_occ;
      beta_occ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      beta_occ = in__.template read<local_scalar_t__>();
      double alpha_p;
      alpha_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      alpha_p = in__.template read<local_scalar_t__>();
      double beta_p;
      beta_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      beta_p = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> logit_psi;
      logit_psi = Eigen::Matrix<double, -1, 1>(R);
      stan::math::fill(logit_psi, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<double, -1, -1> logit_p;
      logit_p = Eigen::Matrix<double, -1, -1>(R, T);
      stan::math::fill(logit_p, std::numeric_limits<double>::quiet_NaN()); 
      
      vars__.emplace_back(alpha_occ);
      vars__.emplace_back(beta_occ);
      vars__.emplace_back(alpha_p);
      vars__.emplace_back(beta_p);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      assign(logit_psi, add(alpha_occ, multiply(beta_occ, X)),
        "assigning variable logit_psi");
      current_statement__ = 8;
      assign(logit_p, rep_matrix(add(alpha_p, multiply(beta_p, X)), T),
        "assigning variable logit_p");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
          vars__.emplace_back(logit_psi[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            vars__.emplace_back(
              rvalue(logit_p, "logit_p",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int occ_fs;
      occ_fs = std::numeric_limits<int>::min(); 
      
      std::vector<double> psi_con;
      psi_con = std::vector<double>(R, std::numeric_limits<double>::quiet_NaN());
       
      
      std::vector<int> z;
      z = std::vector<int>(R, std::numeric_limits<int>::min()); 
      
      current_statement__ = 24;
      for (int i = 1; i <= R; ++i) {
        current_statement__ = 22;
        if (logical_eq(rvalue(sum_y, "sum_y", index_uni(i)), 0)) {
          double psi;
          psi = std::numeric_limits<double>::quiet_NaN(); 
          
          current_statement__ = 15;
          psi = inv_logit(rvalue(logit_psi, "logit_psi", index_uni(i)));
          current_statement__ = 16;
          validate_non_negative_index("q", "T", T);
          Eigen::Matrix<double, -1, 1> q;
          q = Eigen::Matrix<double, -1, 1>(T);
          stan::math::fill(q, std::numeric_limits<double>::quiet_NaN()); 
          
          current_statement__ = 17;
          assign(q,
            transpose(
              inv_logit(minus(rvalue(logit_p, "logit_p", index_uni(i))))),
            "assigning variable q");
          double qT;
          qT = std::numeric_limits<double>::quiet_NaN(); 
          
          current_statement__ = 18;
          qT = prod(q);
          current_statement__ = 19;
          assign(psi_con, ((psi * qT) / ((psi * qT) + (1 - psi))),
            "assigning variable psi_con", index_uni(i));
          current_statement__ = 20;
          assign(z,
            bernoulli_rng(rvalue(psi_con, "psi_con", index_uni(i)),
              base_rng__), "assigning variable z", index_uni(i));
        } else {
          current_statement__ = 12;
          assign(psi_con, 1, "assigning variable psi_con", index_uni(i));
          current_statement__ = 13;
          assign(z, 1, "assigning variable z", index_uni(i));
        }
      }
      current_statement__ = 25;
      occ_fs = sum(z);
      vars__.emplace_back(occ_fs);
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        vars__.emplace_back(psi_con[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        vars__.emplace_back(z[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double alpha_occ;
      alpha_occ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      alpha_occ = context__.vals_r("alpha_occ")[(1 - 1)];
      double beta_occ;
      beta_occ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      beta_occ = context__.vals_r("beta_occ")[(1 - 1)];
      double alpha_p;
      alpha_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      alpha_p = context__.vals_r("alpha_p")[(1 - 1)];
      double beta_p;
      beta_p = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      beta_p = context__.vals_r("beta_p")[(1 - 1)];
      vars__.emplace_back(alpha_occ);
      vars__.emplace_back(beta_occ);
      vars__.emplace_back(alpha_p);
      vars__.emplace_back(beta_p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha_occ", "beta_occ", "alpha_p",
      "beta_p", "logit_psi", "logit_p", "occ_fs", "psi_con", "z"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(R), static_cast<size_t>(T)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(R)},
      std::vector<size_t>{static_cast<size_t>(R)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha_occ");
    param_names__.emplace_back(std::string() + "beta_occ");
    param_names__.emplace_back(std::string() + "alpha_p");
    param_names__.emplace_back(std::string() + "beta_p");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logit_psi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "logit_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "occ_fs");
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_con" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha_occ");
    param_names__.emplace_back(std::string() + "beta_occ");
    param_names__.emplace_back(std::string() + "alpha_p");
    param_names__.emplace_back(std::string() + "beta_p");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logit_psi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= R; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "logit_p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "occ_fs");
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "psi_con" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= R; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha_occ\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_occ\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"logit_psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logit_p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(R) + ",\"cols\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"occ_fs\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"psi_con\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(R) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(R) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha_occ\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_occ\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_p\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"logit_psi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(R) + "},\"block\":\"transformed_parameters\"},{\"name\":\"logit_p\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(R) + ",\"cols\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"occ_fs\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"psi_con\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(R) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(R) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = off_dce_model_namespace::off_dce_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return off_dce_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp off-small.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace off_small_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 37> locations_array__ = 
{" (found before start of program)",
 " (in 'off-small.stan', line 10, column 2 to column 12)",
 " (in 'off-small.stan', line 11, column 2 to column 17)",
 " (in 'off-small.stan', line 12, column 2 to column 17)",
 " (in 'off-small.stan', line 13, column 2 to column 13)",
 " (in 'off-small.stan', line 14, column 2 to column 13)",
 " (in 'off-small.stan', line 15, column 2 to column 35)",
 " (in 'off-small.stan', line 16, column 2 to column 35)",
 " (in 'off-small.stan', line 17, column 2 to column 34)",
 " (in 'off-small.stan', line 20, column 2 to column 15)",
 " (in 'off-small.stan', line 21, column 2 to column 15)",
 " (in 'off-small.stan', line 22, column 2 to column 18)",
 " (in 'off-small.stan', line 24, column 2 to column 36)",
 " (in 'off-small.stan', line 25, column 2 to column 37)",
 " (in 'off-small.stan', line 28, column 4 to line 29, column 42)",
 " (in 'off-small.stan', line 27, column 2 to line 29, column 42)",
 " (in 'off-small.stan', line 32, column 2 to column 23)",
 " (in 'off-small.stan', line 33, column 2 to column 23)",
 " (in 'off-small.stan', line 34, column 2 to column 23)",
 " (in 'off-small.stan', line 35, column 2 to column 23)",
 " (in 'off-small.stan', line 37, column 2 to column 23)",
 " (in 'off-small.stan', line 39, column 2 to column 29)",
 " (in 'off-small.stan', line 2, column 2 to column 17)",
 " (in 'off-small.stan', line 3, column 2 to column 17)",
 " (in 'off-small.stan', line 4, column 30 to column 31)",
 " (in 'off-small.stan', line 4, column 2 to column 33)",
 " (in 'off-small.stan', line 5, column 9 to column 10)",
 " (in 'off-small.stan', line 5, column 2 to column 17)",
 " (in 'off-small.stan', line 6, column 9 to column 10)",
 " (in 'off-small.stan', line 6, column 2 to column 22)",
 " (in 'off-small.stan', line 7, column 9 to column 10)",
 " (in 'off-small.stan', line 7, column 2 to column 14)",
 " (in 'off-small.stan', line 11, column 9 to column 10)",
 " (in 'off-small.stan', line 12, column 9 to column 10)",
 " (in 'off-small.stan', line 20, column 9 to column 10)",
 " (in 'off-small.stan', line 21, column 9 to column 10)",
 " (in 'off-small.stan', line 22, column 9 to column 10)"};



class off_small_model final : public model_base_crtp<off_small_model> {

 private:
  int J;
  int N;
  std::vector<int> person;
  Eigen::Matrix<double, -1, 1> time;
  Eigen::Matrix<double, -1, 1> treatment;
  Eigen::Matrix<double, -1, 1> y;
 
 public:
  ~off_small_model() { }
  
  inline std::string model_name() const final { return "off_small_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  off_small_model(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "off_small_model_namespace::off_small_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 22;
      context__.validate_dims("data initialization","J","int",
           std::vector<size_t>{});
      J = std::numeric_limits<int>::min(); 
      
      current_statement__ = 22;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 22;
      check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 23;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min(); 
      
      current_statement__ = 23;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 23;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 24;
      validate_non_negative_index("person", "N", N);
      current_statement__ = 25;
      context__.validate_dims("data initialization","person","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      person = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 25;
      person = context__.vals_i("person");
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 25;
        check_greater_or_equal(function__, "person[sym1__]",
                               person[(sym1__ - 1)], 1);
      }
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 25;
        check_less_or_equal(function__, "person[sym1__]",
                            person[(sym1__ - 1)], J);
      }
      current_statement__ = 26;
      validate_non_negative_index("time", "N", N);
      current_statement__ = 27;
      context__.validate_dims("data initialization","time","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      time = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> time_flat__;
        current_statement__ = 27;
        time_flat__ = context__.vals_r("time");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 27;
          assign(time, time_flat__[(pos__ - 1)],
            "assigning variable time", index_uni(sym1__));
          current_statement__ = 27;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 28;
      validate_non_negative_index("treatment", "N", N);
      current_statement__ = 29;
      context__.validate_dims("data initialization","treatment","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      treatment = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> treatment_flat__;
        current_statement__ = 29;
        treatment_flat__ = context__.vals_r("treatment");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 29;
          assign(treatment, treatment_flat__[(pos__ - 1)],
            "assigning variable treatment", index_uni(sym1__));
          current_statement__ = 29;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 30;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 31;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> y_flat__;
        current_statement__ = 31;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 31;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 31;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 32;
      validate_non_negative_index("eta1", "J", J);
      current_statement__ = 33;
      validate_non_negative_index("eta2", "J", J);
      current_statement__ = 34;
      validate_non_negative_index("a1", "J", J);
      current_statement__ = 35;
      validate_non_negative_index("a2", "J", J);
      current_statement__ = 36;
      validate_non_negative_index("y_hat", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + J + J + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "off_small_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ beta;
      beta = DUMMY_VAR__; 
      
      current_statement__ = 1;
      beta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> eta1;
      eta1 = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
      stan::math::fill(eta1, DUMMY_VAR__); 
      
      current_statement__ = 2;
      eta1 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(J);
      Eigen::Matrix<local_scalar_t__, -1, 1> eta2;
      eta2 = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
      stan::math::fill(eta2, DUMMY_VAR__); 
      
      current_statement__ = 3;
      eta2 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(J);
      local_scalar_t__ mu_a1;
      mu_a1 = DUMMY_VAR__; 
      
      current_statement__ = 4;
      mu_a1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_a2;
      mu_a2 = DUMMY_VAR__; 
      
      current_statement__ = 5;
      mu_a2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_a1;
      sigma_a1 = DUMMY_VAR__; 
      
      current_statement__ = 6;
      sigma_a1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 100, lp__);
      local_scalar_t__ sigma_a2;
      sigma_a2 = DUMMY_VAR__; 
      
      current_statement__ = 7;
      sigma_a2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 100, lp__);
      local_scalar_t__ sigma_y;
      sigma_y = DUMMY_VAR__; 
      
      current_statement__ = 8;
      sigma_y = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> a1;
      a1 = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
      stan::math::fill(a1, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, 1> a2;
      a2 = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
      stan::math::fill(a2, DUMMY_VAR__); 
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat;
      y_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y_hat, DUMMY_VAR__); 
      
      current_statement__ = 12;
      assign(a1, add((10 * mu_a1), multiply(sigma_a1, eta1)),
        "assigning variable a1");
      current_statement__ = 13;
      assign(a2, add((0.1 * mu_a2), multiply(sigma_a2, eta2)),
        "assigning variable a2");
      current_statement__ = 15;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 14;
        assign(y_hat,
          ((((beta * rvalue(time, "time", index_uni(i))) *
              rvalue(treatment, "treatment", index_uni(i))) +
             rvalue(a1, "a1",
               index_uni(rvalue(person, "person", index_uni(i))))) +
            (rvalue(a2, "a2",
               index_uni(rvalue(person, "person", index_uni(i)))) *
              rvalue(time, "time", index_uni(i)))),
          "assigning variable y_hat", index_uni(i));
      }
      {
        current_statement__ = 16;
        lp_accum__.add(normal_lpdf<propto__>(mu_a1, 0, 1));
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(eta1, 0, 1));
        current_statement__ = 18;
        lp_accum__.add(normal_lpdf<propto__>(mu_a2, 0, 1));
        current_statement__ = 19;
        lp_accum__.add(normal_lpdf<propto__>(eta2, 0, 1));
        current_statement__ = 20;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0, 1));
        current_statement__ = 21;
        lp_accum__.add(normal_lpdf<propto__>(y, y_hat, sigma_y));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "off_small_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      beta = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> eta1;
      eta1 = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(eta1, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      eta1 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(J);
      Eigen::Matrix<double, -1, 1> eta2;
      eta2 = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(eta2, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 3;
      eta2 = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(J);
      double mu_a1;
      mu_a1 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      mu_a1 = in__.template read<local_scalar_t__>();
      double mu_a2;
      mu_a2 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      mu_a2 = in__.template read<local_scalar_t__>();
      double sigma_a1;
      sigma_a1 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 6;
      sigma_a1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 100, lp__);
      double sigma_a2;
      sigma_a2 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 7;
      sigma_a2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                   0, 100, lp__);
      double sigma_y;
      sigma_y = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 8;
      sigma_y = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      Eigen::Matrix<double, -1, 1> a1;
      a1 = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(a1, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<double, -1, 1> a2;
      a2 = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(a2, std::numeric_limits<double>::quiet_NaN()); 
      
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat;
      y_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y_hat, DUMMY_VAR__); 
      
      vars__.emplace_back(beta);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(eta1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(eta2[(sym1__ - 1)]);
      }
      vars__.emplace_back(mu_a1);
      vars__.emplace_back(mu_a2);
      vars__.emplace_back(sigma_a1);
      vars__.emplace_back(sigma_a2);
      vars__.emplace_back(sigma_y);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 12;
      assign(a1, add((10 * mu_a1), multiply(sigma_a1, eta1)),
        "assigning variable a1");
      current_statement__ = 13;
      assign(a2, add((0.1 * mu_a2), multiply(sigma_a2, eta2)),
        "assigning variable a2");
      current_statement__ = 15;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 14;
        assign(y_hat,
          ((((beta * rvalue(time, "time", index_uni(i))) *
              rvalue(treatment, "treatment", index_uni(i))) +
             rvalue(a1, "a1",
               index_uni(rvalue(person, "person", index_uni(i))))) +
            (rvalue(a2, "a2",
               index_uni(rvalue(person, "person", index_uni(i)))) *
              rvalue(time, "time", index_uni(i)))),
          "assigning variable y_hat", index_uni(i));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          vars__.emplace_back(a1[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          vars__.emplace_back(a2[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(y_hat[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double beta;
      beta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      beta = context__.vals_r("beta")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> eta1;
      eta1 = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(eta1, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> eta1_flat__;
        current_statement__ = 2;
        eta1_flat__ = context__.vals_r("eta1");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 2;
          assign(eta1, eta1_flat__[(pos__ - 1)],
            "assigning variable eta1", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> eta2;
      eta2 = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(eta2, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> eta2_flat__;
        current_statement__ = 3;
        eta2_flat__ = context__.vals_r("eta2");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 3;
          assign(eta2, eta2_flat__[(pos__ - 1)],
            "assigning variable eta2", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      double mu_a1;
      mu_a1 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      mu_a1 = context__.vals_r("mu_a1")[(1 - 1)];
      double mu_a2;
      mu_a2 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      mu_a2 = context__.vals_r("mu_a2")[(1 - 1)];
      double sigma_a1;
      sigma_a1 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 6;
      sigma_a1 = context__.vals_r("sigma_a1")[(1 - 1)];
      double sigma_a1_free__;
      sigma_a1_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 6;
      sigma_a1_free__ = stan::math::lub_free(sigma_a1, 0, 100);
      double sigma_a2;
      sigma_a2 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 7;
      sigma_a2 = context__.vals_r("sigma_a2")[(1 - 1)];
      double sigma_a2_free__;
      sigma_a2_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 7;
      sigma_a2_free__ = stan::math::lub_free(sigma_a2, 0, 100);
      double sigma_y;
      sigma_y = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 8;
      sigma_y = context__.vals_r("sigma_y")[(1 - 1)];
      double sigma_y_free__;
      sigma_y_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 8;
      sigma_y_free__ = stan::math::lub_free(sigma_y, 0, 100);
      vars__.emplace_back(beta);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(eta1[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(eta2[(sym1__ - 1)]);
      }
      vars__.emplace_back(mu_a1);
      vars__.emplace_back(mu_a2);
      vars__.emplace_back(sigma_a1_free__);
      vars__.emplace_back(sigma_a2_free__);
      vars__.emplace_back(sigma_y_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"beta", "eta1", "eta2", "mu_a1",
      "mu_a2", "sigma_a1", "sigma_a2", "sigma_y", "a1", "a2", "y_hat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(J)},
      std::vector<size_t>{static_cast<size_t>(J)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(J)},
      std::vector<size_t>{static_cast<size_t>(J)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta2" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_a1");
    param_names__.emplace_back(std::string() + "mu_a2");
    param_names__.emplace_back(std::string() + "sigma_a1");
    param_names__.emplace_back(std::string() + "sigma_a2");
    param_names__.emplace_back(std::string() + "sigma_y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta1" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "eta2" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_a1");
    param_names__.emplace_back(std::string() + "mu_a2");
    param_names__.emplace_back(std::string() + "sigma_a1");
    param_names__.emplace_back(std::string() + "sigma_a2");
    param_names__.emplace_back(std::string() + "sigma_y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a1" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "a2" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"eta2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"mu_a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_a2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_a2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"eta2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"parameters\"},{\"name\":\"mu_a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_a2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_a1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_a2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(J) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = off_small_model_namespace::off_small_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return off_small_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp optimizations.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace optimizations_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 116> locations_array__ = 
{" (found before start of program)",
 " (in 'optimizations.stan', line 20, column 4 to column 15)",
 " (in 'optimizations.stan', line 21, column 4 to column 13)",
 " (in 'optimizations.stan', line 22, column 4 to column 26)",
 " (in 'optimizations.stan', line 23, column 4 to column 23)",
 " (in 'optimizations.stan', line 24, column 4 to column 24)",
 " (in 'optimizations.stan', line 27, column 4 to column 11)",
 " (in 'optimizations.stan', line 28, column 4 to column 19)",
 " (in 'optimizations.stan', line 29, column 4 to column 19)",
 " (in 'optimizations.stan', line 30, column 17 to column 28)",
 " (in 'optimizations.stan', line 30, column 4 to column 28)",
 " (in 'optimizations.stan', line 32, column 6 to column 24)",
 " (in 'optimizations.stan', line 33, column 6 to column 22)",
 " (in 'optimizations.stan', line 31, column 33 to line 34, column 5)",
 " (in 'optimizations.stan', line 31, column 4 to line 34, column 5)",
 " (in 'optimizations.stan', line 36, column 8 to column 21)",
 " (in 'optimizations.stan', line 35, column 21 to line 37, column 5)",
 " (in 'optimizations.stan', line 35, column 4 to line 37, column 5)",
 " (in 'optimizations.stan', line 41, column 16 to column 29)",
 " (in 'optimizations.stan', line 40, column 12 to line 41, column 29)",
 " (in 'optimizations.stan', line 39, column 8 to line 41, column 29)",
 " (in 'optimizations.stan', line 38, column 4 to line 41, column 29)",
 " (in 'optimizations.stan', line 44, column 10 to column 16)",
 " (in 'optimizations.stan', line 43, column 8 to line 44, column 16)",
 " (in 'optimizations.stan', line 45, column 8 to column 20)",
 " (in 'optimizations.stan', line 42, column 21 to line 46, column 5)",
 " (in 'optimizations.stan', line 42, column 4 to line 46, column 5)",
 " (in 'optimizations.stan', line 49, column 10 to column 19)",
 " (in 'optimizations.stan', line 48, column 8 to line 49, column 19)",
 " (in 'optimizations.stan', line 50, column 8 to column 20)",
 " (in 'optimizations.stan', line 47, column 21 to line 51, column 5)",
 " (in 'optimizations.stan', line 47, column 4 to line 51, column 5)",
 " (in 'optimizations.stan', line 54, column 10 to column 19)",
 " (in 'optimizations.stan', line 53, column 8 to line 54, column 19)",
 " (in 'optimizations.stan', line 55, column 8 to column 20)",
 " (in 'optimizations.stan', line 52, column 21 to line 56, column 5)",
 " (in 'optimizations.stan', line 52, column 4 to line 56, column 5)",
 " (in 'optimizations.stan', line 57, column 4 to column 10)",
 " (in 'optimizations.stan', line 58, column 4 to column 16)",
 " (in 'optimizations.stan', line 60, column 6 to column 12)",
 " (in 'optimizations.stan', line 59, column 4 to line 60, column 12)",
 " (in 'optimizations.stan', line 61, column 4 to column 16)",
 " (in 'optimizations.stan', line 63, column 4 to column 12)",
 " (in 'optimizations.stan', line 64, column 4 to column 16)",
 " (in 'optimizations.stan', line 65, column 4 to column 16)",
 " (in 'optimizations.stan', line 66, column 4 to column 16)",
 " (in 'optimizations.stan', line 68, column 6 to column 19)",
 " (in 'optimizations.stan', line 67, column 4 to line 68, column 19)",
 " (in 'optimizations.stan', line 69, column 4 to column 16)",
 " (in 'optimizations.stan', line 70, column 4 to column 11)",
 " (in 'optimizations.stan', line 71, column 4 to column 10)",
 " (in 'optimizations.stan', line 72, column 4 to column 16)",
 " (in 'optimizations.stan', line 74, column 6 to column 12)",
 " (in 'optimizations.stan', line 73, column 4 to line 74, column 12)",
 " (in 'optimizations.stan', line 75, column 4 to column 16)",
 " (in 'optimizations.stan', line 78, column 4 to column 16)",
 " (in 'optimizations.stan', line 80, column 8 to column 19)",
 " (in 'optimizations.stan', line 81, column 8 to column 15)",
 " (in 'optimizations.stan', line 82, column 8 to column 20)",
 " (in 'optimizations.stan', line 79, column 4 to line 83, column 5)",
 " (in 'optimizations.stan', line 85, column 8 to column 20)",
 " (in 'optimizations.stan', line 86, column 8 to column 16)",
 " (in 'optimizations.stan', line 87, column 8 to column 20)",
 " (in 'optimizations.stan', line 84, column 4 to line 88, column 5)",
 " (in 'optimizations.stan', line 90, column 11 to column 23)",
 " (in 'optimizations.stan', line 90, column 4 to column 23)",
 " (in 'optimizations.stan', line 95, column 26 to column 27)",
 " (in 'optimizations.stan', line 95, column 19 to column 20)",
 " (in 'optimizations.stan', line 95, column 4 to column 27)",
 " (in 'optimizations.stan', line 97, column 20 to column 26)",
 " (in 'optimizations.stan', line 97, column 4 to column 26)",
 " (in 'optimizations.stan', line 98, column 22 to column 28)",
 " (in 'optimizations.stan', line 98, column 4 to column 28)",
 " (in 'optimizations.stan', line 100, column 6 to column 15)",
 " (in 'optimizations.stan', line 99, column 4 to line 100, column 15)",
 " (in 'optimizations.stan', line 102, column 6 to column 12)",
 " (in 'optimizations.stan', line 101, column 4 to line 102, column 12)",
 " (in 'optimizations.stan', line 106, column 6 to column 15)",
 " (in 'optimizations.stan', line 105, column 4 to line 106, column 15)",
 " (in 'optimizations.stan', line 108, column 6 to column 12)",
 " (in 'optimizations.stan', line 107, column 4 to line 108, column 12)",
 " (in 'optimizations.stan', line 110, column 6 to column 7)",
 " (in 'optimizations.stan', line 109, column 4 to line 110, column 7)",
 " (in 'optimizations.stan', line 112, column 8 to column 20)",
 " (in 'optimizations.stan', line 115, column 8 to column 21)",
 " (in 'optimizations.stan', line 111, column 4 to line 116, column 5)",
 " (in 'optimizations.stan', line 119, column 12 to column 24)",
 " (in 'optimizations.stan', line 118, column 8 to line 121, column 9)",
 " (in 'optimizations.stan', line 117, column 4 to line 127, column 5)",
 " (in 'optimizations.stan', line 128, column 4 to column 14)",
 " (in 'optimizations.stan', line 132, column 6 to column 21)",
 " (in 'optimizations.stan', line 129, column 4 to line 132, column 21)",
 " (in 'optimizations.stan', line 133, column 4 to column 17)",
 " (in 'optimizations.stan', line 134, column 4 to column 15)",
 " (in 'optimizations.stan', line 136, column 8 to column 22)",
 " (in 'optimizations.stan', line 137, column 8 to column 23)",
 " (in 'optimizations.stan', line 138, column 8 to column 24)",
 " (in 'optimizations.stan', line 135, column 21 to line 139, column 5)",
 " (in 'optimizations.stan', line 135, column 4 to line 139, column 5)",
 " (in 'optimizations.stan', line 140, column 4 to column 25)",
 " (in 'optimizations.stan', line 143, column 4 to column 26)",
 " (in 'optimizations.stan', line 144, column 4 to column 22)",
 " (in 'optimizations.stan', line 146, column 6 to column 28)",
 " (in 'optimizations.stan', line 145, column 4 to line 146, column 28)",
 " (in 'optimizations.stan', line 147, column 4 to column 23)",
 " (in 'optimizations.stan', line 4, column 10 to column 17)",
 " (in 'optimizations.stan', line 3, column 8 to line 4, column 17)",
 " (in 'optimizations.stan', line 5, column 8 to column 20)",
 " (in 'optimizations.stan', line 2, column 33 to line 6, column 5)",
 " (in 'optimizations.stan', line 10, column 12 to column 26)",
 " (in 'optimizations.stan', line 9, column 8 to line 10, column 26)",
 " (in 'optimizations.stan', line 11, column 8 to column 21)",
 " (in 'optimizations.stan', line 8, column 20 to line 12, column 5)",
 " (in 'optimizations.stan', line 15, column 8 to column 20)",
 " (in 'optimizations.stan', line 16, column 8 to column 18)",
 " (in 'optimizations.stan', line 14, column 18 to line 17, column 5)"};


template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
void
nrfun_lp(const T0__& x, const int& y, T_lp__& lp__, T_lp_accum__& lp_accum__,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 106;
    if (logical_gt(x, 342)) {
      current_statement__ = 105;
      return ;
    } 
    current_statement__ = 107;
    lp_accum__.add(y);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct nrfun_lp_functor__ {
template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
void
operator()(const T0__& x, const int& y, T_lp__& lp__,
           T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return nrfun_lp<propto__>(x, y, lp__, lp_accum__, pstream__);
}
};

int
rfun(const int& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 110;
    if (logical_gt(y, 2)) {
      current_statement__ = 109;
      return (y + 24);
    } 
    current_statement__ = 111;
    return (y + 2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_functor__ {
int
operator()(const int& y, std::ostream* pstream__)  const 
{
return rfun(y, pstream__);
}
};

template <bool propto__, typename T_lp__, typename T_lp_accum__>
int
rfun_lp(T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 113;
    lp_accum__.add(2);
    current_statement__ = 114;
    return 24;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_lp_functor__ {
template <bool propto__, typename T_lp__, typename T_lp_accum__>
int
operator()(T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return rfun_lp<propto__>(lp__, lp_accum__, pstream__);
}
};

class optimizations_model final : public model_base_crtp<optimizations_model> {

 private:
  
 
 public:
  ~optimizations_model() { }
  
  inline std::string model_name() const final { return "optimizations_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  optimizations_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "optimizations_model_namespace::optimizations_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + (3 * 2) + 2 + 3;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "optimizations_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ theta;
      theta = DUMMY_VAR__; 
      
      current_statement__ = 1;
      theta = in__.template read<local_scalar_t__>();
      local_scalar_t__ phi;
      phi = DUMMY_VAR__; 
      
      current_statement__ = 2;
      phi = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 2);
      stan::math::fill(x_matrix, DUMMY_VAR__); 
      
      current_statement__ = 3;
      x_matrix = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                   3, 2);
      Eigen::Matrix<local_scalar_t__, -1, 1> x_vector;
      x_vector = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(x_vector, DUMMY_VAR__); 
      
      current_statement__ = 4;
      x_vector = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   2);
      Eigen::Matrix<local_scalar_t__, -1, -1> x_cov;
      x_cov = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 2);
      stan::math::fill(x_cov, DUMMY_VAR__); 
      
      current_statement__ = 5;
      x_cov = in__.template read_constrain_cov_matrix<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
                lp__, 2);
      {
        double x;
        x = std::numeric_limits<double>::quiet_NaN(); 
        
        current_statement__ = 7;
        nrfun_lp<false>(4, 3, lp__, lp_accum__, pstream__);
        current_statement__ = 8;
        if (pstream__) {
          stan_print(pstream__, rfun(3, pstream__));
          stan_print(pstream__, "\n");
        }
        current_statement__ = 10;
        if (rfun(4, pstream__)) {
          current_statement__ = 9;
          if (pstream__) {
            stan_print(pstream__, "a");
            stan_print(pstream__, "\n");
          }
        } 
        current_statement__ = 14;
        for (int i = rfun(7, pstream__); i <= rfun(5, pstream__); ++i) {
          current_statement__ = 11;
          lp_accum__.add(rfun(8, pstream__));
          current_statement__ = 12;
          nrfun_lp<false>(34, 3, lp__, lp_accum__, pstream__);
        }
        current_statement__ = 17;
        for (int i = 1; i <= 5; ++i) {
          current_statement__ = 15;
          lp_accum__.add(53);
        }
        current_statement__ = 21;
        for (int i = 1; i <= 5; ++i) {
          current_statement__ = 20;
          for (int j = i; j <= (i + 2); ++j) {
            current_statement__ = 19;
            for (int k = j; k <= (j * 2); ++k) {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
        }
        current_statement__ = 26;
        for (int i = 1; i <= 5; ++i) {
          current_statement__ = 23;
          if (logical_gt(i, 4)) {
            break;
          } 
          current_statement__ = 24;
          lp_accum__.add(2);
        }
        current_statement__ = 31;
        for (int i = 1; i <= 5; ++i) {
          current_statement__ = 28;
          if (logical_gt(i, 4)) {
            continue;
          } 
          current_statement__ = 29;
          lp_accum__.add(2);
        }
        current_statement__ = 36;
        for (int i = 1; i <= 5; ++i) {
          current_statement__ = 33;
          if (logical_gt(i, 4)) {
            continue;
          } 
          current_statement__ = 34;
          lp_accum__.add(2);
        }
        current_statement__ = 37;
        x = 3;
        current_statement__ = 38;
        lp_accum__.add(x);
        current_statement__ = 40;
        if (logical_gt(theta, 2)) {
          current_statement__ = 39;
          x = 2;
        } 
        current_statement__ = 41;
        lp_accum__.add(x);
        current_statement__ = 42;
        x = 247;
        current_statement__ = 43;
        lp_accum__.add(x);
        current_statement__ = 44;
        x = 576;
        current_statement__ = 45;
        lp_accum__.add(x);
        current_statement__ = 47;
        if (logical_gt(theta, 46)) {
          current_statement__ = 46;
          x = 5880;
        } 
        current_statement__ = 48;
        lp_accum__.add(x);
        double z;
        z = std::numeric_limits<double>::quiet_NaN(); 
        
        current_statement__ = 50;
        z = x;
        current_statement__ = 51;
        lp_accum__.add(x);
        current_statement__ = 53;
        if (logical_gt(theta, 46)) {
          current_statement__ = 52;
          z = x;
        } 
        current_statement__ = 54;
        lp_accum__.add(z);
        current_statement__ = 55;
        lp_accum__.add(2);
        {
          double y;
          y = std::numeric_limits<double>::quiet_NaN(); 
          
          current_statement__ = 57;
          y = 24;
          current_statement__ = 58;
          lp_accum__.add(y);
        }
        {
          double y;
          y = std::numeric_limits<double>::quiet_NaN(); 
          
          current_statement__ = 61;
          y = 245;
          current_statement__ = 62;
          lp_accum__.add(y);
        }
        {
          current_statement__ = 64;
          lp_accum__.add(2);
        }
        current_statement__ = 68;
        if (rfun_lp<false>(lp__, lp_accum__, pstream__)) {
          ;
        } else ;
        current_statement__ = 70;
        while (576) {
          break;
        }
        current_statement__ = 72;
        while (rfun_lp<false>(lp__, lp_accum__, pstream__)) {
          break;
        }
        current_statement__ = 74;
        for (int i = 31; i <= 225; ++i) { continue;}
        current_statement__ = 76;
        for (int i = 31; i <= 225; ++i) { break;}
        current_statement__ = 78;
        for (int i = rfun_lp<false>(lp__, lp_accum__, pstream__); i <= 225;
             ++i) {
          continue;
        }
        current_statement__ = 80;
        for (int i = rfun_lp<false>(lp__, lp_accum__, pstream__); i <= 225;
             ++i) {
          break;
        }
        current_statement__ = 82;
        for (int i = rfun_lp<false>(lp__, lp_accum__, pstream__); i <= 225;
             ++i) ;
        {
          current_statement__ = 83;
          lp_accum__.add(1);
          current_statement__ = 84;
          lp_accum__.add(24);
        }
        {
          {
            current_statement__ = 86;
            lp_accum__.add(1);
          }
        }
        double temp;
        temp = std::numeric_limits<double>::quiet_NaN(); 
        
        {
          current_statement__ = 90;
          if (pstream__) {
            stan_print(pstream__, "hello");
            stan_print(pstream__, "\n");
          }
        }
        current_statement__ = 92;
        temp = 4;
        double temp2;
        temp2 = std::numeric_limits<double>::quiet_NaN(); 
        
        current_statement__ = 98;
        for (int i = 2; i <= 3; ++i) {
          current_statement__ = 94;
          temp2 = 6;
          current_statement__ = 95;
          lp_accum__.add(temp);
          current_statement__ = 96;
          lp_accum__.add(temp2);
        }
        double dataonlyvar;
        dataonlyvar = std::numeric_limits<double>::quiet_NaN(); 
        
        current_statement__ = 99;
        dataonlyvar = 3;
        current_statement__ = 100;
        lp_accum__.add(dataonlyvar);
        local_scalar_t__ paramvar;
        paramvar = DUMMY_VAR__; 
        
        {
          current_statement__ = 102;
          paramvar = (theta * 34);
        }
        current_statement__ = 104;
        lp_accum__.add(paramvar);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "optimizations_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      theta = in__.template read<local_scalar_t__>();
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      phi = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      stan::math::fill(x_matrix, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 3;
      x_matrix = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                   3, 2);
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(x_vector, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 4;
      x_vector = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   2);
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(x_cov, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 5;
      x_cov = in__.template read_constrain_cov_matrix<Eigen::Matrix<local_scalar_t__, -1, -1>, jacobian__>(
                lp__, 2);
      vars__.emplace_back(theta);
      vars__.emplace_back(phi);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.emplace_back(
            rvalue(x_matrix, "x_matrix",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(x_vector[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(
            rvalue(x_cov, "x_cov", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      theta = context__.vals_r("theta")[(1 - 1)];
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      phi = context__.vals_r("phi")[(1 - 1)];
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      stan::math::fill(x_matrix, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> x_matrix_flat__;
        current_statement__ = 3;
        x_matrix_flat__ = context__.vals_r("x_matrix");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            current_statement__ = 3;
            assign(x_matrix, x_matrix_flat__[(pos__ - 1)],
              "assigning variable x_matrix", index_uni(sym2__),
                                               index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(x_vector, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> x_vector_flat__;
        current_statement__ = 4;
        x_vector_flat__ = context__.vals_r("x_vector");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 4;
          assign(x_vector, x_vector_flat__[(pos__ - 1)],
            "assigning variable x_vector", index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(x_cov, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> x_cov_flat__;
        current_statement__ = 5;
        x_cov_flat__ = context__.vals_r("x_cov");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 5;
            assign(x_cov, x_cov_flat__[(pos__ - 1)],
              "assigning variable x_cov", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> x_cov_free__;
      x_cov_free__ = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(x_cov_free__, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 5;
      assign(x_cov_free__, stan::math::cov_matrix_free(x_cov),
        "assigning variable x_cov_free__");
      vars__.emplace_back(theta);
      vars__.emplace_back(phi);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.emplace_back(
            rvalue(x_matrix, "x_matrix",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(x_vector[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(x_cov_free__[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"theta", "phi", "x_matrix",
      "x_vector", "x_cov"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "x_matrix" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_vector" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "x_cov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "phi");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "x_matrix" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_vector" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "x_cov" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = optimizations_model_namespace::optimizations_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return optimizations_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp partial-eval.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace partial_eval_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 25> locations_array__ = 
{" (found before start of program)",
 " (in 'partial-eval.stan', line 10, column 2 to column 19)",
 " (in 'partial-eval.stan', line 11, column 2 to column 17)",
 " (in 'partial-eval.stan', line 12, column 2 to column 12)",
 " (in 'partial-eval.stan', line 13, column 2 to column 34)",
 " (in 'partial-eval.stan', line 14, column 2 to column 34)",
 " (in 'partial-eval.stan', line 17, column 2 to column 18)",
 " (in 'partial-eval.stan', line 20, column 4 to line 21, column 42)",
 " (in 'partial-eval.stan', line 19, column 2 to line 21, column 42)",
 " (in 'partial-eval.stan', line 24, column 2 to column 22)",
 " (in 'partial-eval.stan', line 25, column 2 to column 34)",
 " (in 'partial-eval.stan', line 26, column 2 to column 24)",
 " (in 'partial-eval.stan', line 27, column 2 to column 29)",
 " (in 'partial-eval.stan', line 2, column 2 to column 17)",
 " (in 'partial-eval.stan', line 3, column 2 to column 22)",
 " (in 'partial-eval.stan', line 4, column 33 to column 34)",
 " (in 'partial-eval.stan', line 4, column 2 to column 36)",
 " (in 'partial-eval.stan', line 5, column 9 to column 10)",
 " (in 'partial-eval.stan', line 5, column 2 to column 21)",
 " (in 'partial-eval.stan', line 6, column 26 to column 27)",
 " (in 'partial-eval.stan', line 6, column 2 to column 39)",
 " (in 'partial-eval.stan', line 7, column 9 to column 10)",
 " (in 'partial-eval.stan', line 7, column 2 to column 14)",
 " (in 'partial-eval.stan', line 10, column 9 to column 15)",
 " (in 'partial-eval.stan', line 17, column 9 to column 10)"};



class partial_eval_model final : public model_base_crtp<partial_eval_model> {

 private:
  int N;
  int n_pair;
  std::vector<int> pair;
  Eigen::Matrix<double, -1, 1> pre_test;
  Eigen::Matrix<double, -1, 1> treatment;
  Eigen::Matrix<double, -1, 1> y;
 
 public:
  ~partial_eval_model() { }
  
  inline std::string model_name() const final { return "partial_eval_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  partial_eval_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "partial_eval_model_namespace::partial_eval_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min(); 
      
      current_statement__ = 13;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 13;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 14;
      context__.validate_dims("data initialization","n_pair","int",
           std::vector<size_t>{});
      n_pair = std::numeric_limits<int>::min(); 
      
      current_statement__ = 14;
      n_pair = context__.vals_i("n_pair")[(1 - 1)];
      current_statement__ = 14;
      check_greater_or_equal(function__, "n_pair", n_pair, 0);
      current_statement__ = 15;
      validate_non_negative_index("pair", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization","pair","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      pair = std::vector<int>(N, std::numeric_limits<int>::min()); 
      
      current_statement__ = 16;
      pair = context__.vals_i("pair");
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 16;
        check_greater_or_equal(function__, "pair[sym1__]",
                               pair[(sym1__ - 1)], 1);
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 16;
        check_less_or_equal(function__, "pair[sym1__]", pair[(sym1__ - 1)],
                            n_pair);
      }
      current_statement__ = 17;
      validate_non_negative_index("pre_test", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization","pre_test","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      pre_test = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> pre_test_flat__;
        current_statement__ = 18;
        pre_test_flat__ = context__.vals_r("pre_test");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          assign(pre_test, pre_test_flat__[(pos__ - 1)],
            "assigning variable pre_test", index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      validate_non_negative_index("treatment", "N", N);
      current_statement__ = 20;
      context__.validate_dims("data initialization","treatment","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      treatment = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> treatment_flat__;
        current_statement__ = 20;
        treatment_flat__ = context__.vals_r("treatment");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 20;
          assign(treatment, treatment_flat__[(pos__ - 1)],
            "assigning variable treatment", index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 20;
        check_greater_or_equal(function__, "treatment[sym1__]",
                               treatment[(sym1__ - 1)], 0);
      }
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 20;
        check_less_or_equal(function__, "treatment[sym1__]",
                            treatment[(sym1__ - 1)], 1);
      }
      current_statement__ = 21;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y = Eigen::Matrix<double, -1, 1>(N); 
      
      {
        std::vector<double> y_flat__;
        current_statement__ = 22;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 22;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 22;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 23;
      validate_non_negative_index("a", "n_pair", n_pair);
      current_statement__ = 24;
      validate_non_negative_index("y_hat", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = n_pair + 2 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "partial_eval_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> a;
      a = Eigen::Matrix<local_scalar_t__, -1, 1>(n_pair);
      stan::math::fill(a, DUMMY_VAR__); 
      
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_pair);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(beta, DUMMY_VAR__); 
      
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      local_scalar_t__ mu_a;
      mu_a = DUMMY_VAR__; 
      
      current_statement__ = 3;
      mu_a = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_a;
      sigma_a = DUMMY_VAR__; 
      
      current_statement__ = 4;
      sigma_a = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      local_scalar_t__ sigma_y;
      sigma_y = DUMMY_VAR__; 
      
      current_statement__ = 5;
      sigma_y = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat;
      y_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y_hat, DUMMY_VAR__); 
      
      current_statement__ = 8;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 7;
        assign(y_hat,
          ((rvalue(a, "a", index_uni(rvalue(pair, "pair", index_uni(i)))) +
             (rvalue(beta, "beta", index_uni(1)) *
               rvalue(treatment, "treatment", index_uni(i)))) +
            (rvalue(beta, "beta", index_uni(2)) *
              rvalue(pre_test, "pre_test", index_uni(i)))),
          "assigning variable y_hat", index_uni(i));
      }
      {
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<propto__>(mu_a, 0, 1));
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<propto__>(a, (100 * mu_a), sigma_a));
        current_statement__ = 11;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0, 100));
        current_statement__ = 12;
        lp_accum__.add(normal_lpdf<propto__>(y, y_hat, sigma_y));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "partial_eval_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> a;
      a = Eigen::Matrix<double, -1, 1>(n_pair);
      stan::math::fill(a, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_pair);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 2;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(2);
      double mu_a;
      mu_a = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      mu_a = in__.template read<local_scalar_t__>();
      double sigma_a;
      sigma_a = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      sigma_a = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      double sigma_y;
      sigma_y = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      sigma_y = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0, 100, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat;
      y_hat = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(y_hat, DUMMY_VAR__); 
      
      for (int sym1__ = 1; sym1__ <= n_pair; ++sym1__) {
        vars__.emplace_back(a[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      vars__.emplace_back(mu_a);
      vars__.emplace_back(sigma_a);
      vars__.emplace_back(sigma_y);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 7;
        assign(y_hat,
          ((rvalue(a, "a", index_uni(rvalue(pair, "pair", index_uni(i)))) +
             (rvalue(beta, "beta", index_uni(1)) *
               rvalue(treatment, "treatment", index_uni(i)))) +
            (rvalue(beta, "beta", index_uni(2)) *
              rvalue(pre_test, "pre_test", index_uni(i)))),
          "assigning variable y_hat", index_uni(i));
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(y_hat[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> a;
      a = Eigen::Matrix<double, -1, 1>(n_pair);
      stan::math::fill(a, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> a_flat__;
        current_statement__ = 1;
        a_flat__ = context__.vals_r("a");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_pair; ++sym1__) {
          current_statement__ = 1;
          assign(a, a_flat__[(pos__ - 1)],
            "assigning variable a", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> beta_flat__;
        current_statement__ = 2;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 2;
          assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      double mu_a;
      mu_a = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      mu_a = context__.vals_r("mu_a")[(1 - 1)];
      double sigma_a;
      sigma_a = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      sigma_a = context__.vals_r("sigma_a")[(1 - 1)];
      double sigma_a_free__;
      sigma_a_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      sigma_a_free__ = stan::math::lub_free(sigma_a, 0, 100);
      double sigma_y;
      sigma_y = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      sigma_y = context__.vals_r("sigma_y")[(1 - 1)];
      double sigma_y_free__;
      sigma_y_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      sigma_y_free__ = stan::math::lub_free(sigma_y, 0, 100);
      for (int sym1__ = 1; sym1__ <= n_pair; ++sym1__) {
        vars__.emplace_back(a[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      vars__.emplace_back(mu_a);
      vars__.emplace_back(sigma_a_free__);
      vars__.emplace_back(sigma_y_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a", "beta", "mu_a", "sigma_a",
      "sigma_y", "y_hat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(n_pair)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_pair; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_a");
    param_names__.emplace_back(std::string() + "sigma_a");
    param_names__.emplace_back(std::string() + "sigma_y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_pair; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "mu_a");
    param_names__.emplace_back(std::string() + "sigma_a");
    param_names__.emplace_back(std::string() + "sigma_y");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_pair) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"mu_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_pair) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"mu_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = partial_eval_model_namespace::partial_eval_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return partial_eval_model_namespace::profiles__;
}

#endif



  $ ../../../../../install/default/bin/stanc -O1 --print-cpp stalled1-failure.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace stalled1_failure_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 34> locations_array__ = 
{" (found before start of program)",
 " (in 'stalled1-failure.stan', line 30, column 4 to column 16)",
 " (in 'stalled1-failure.stan', line 31, column 4 to column 16)",
 " (in 'stalled1-failure.stan', line 32, column 4 to column 16)",
 " (in 'stalled1-failure.stan', line 33, column 4 to column 17)",
 " (in 'stalled1-failure.stan', line 34, column 4 to column 22)",
 " (in 'stalled1-failure.stan', line 35, column 4 to column 19)",
 " (in 'stalled1-failure.stan', line 39, column 4 to column 15)",
 " (in 'stalled1-failure.stan', line 40, column 4 to column 27)",
 " (in 'stalled1-failure.stan', line 44, column 3 to column 31)",
 " (in 'stalled1-failure.stan', line 45, column 3 to column 31)",
 " (in 'stalled1-failure.stan', line 46, column 3 to column 31)",
 " (in 'stalled1-failure.stan', line 47, column 3 to column 32)",
 " (in 'stalled1-failure.stan', line 48, column 3 to column 31)",
 " (in 'stalled1-failure.stan', line 50, column 6 to column 32)",
 " (in 'stalled1-failure.stan', line 51, column 6 to column 103)",
 " (in 'stalled1-failure.stan', line 49, column 18 to line 52, column 4)",
 " (in 'stalled1-failure.stan', line 49, column 3 to line 52, column 4)",
 " (in 'stalled1-failure.stan', line 15, column 4 to column 19)",
 " (in 'stalled1-failure.stan', line 16, column 19 to column 20)",
 " (in 'stalled1-failure.stan', line 16, column 4 to column 22)",
 " (in 'stalled1-failure.stan', line 17, column 19 to column 20)",
 " (in 'stalled1-failure.stan', line 17, column 4 to column 22)",
 " (in 'stalled1-failure.stan', line 18, column 11 to column 12)",
 " (in 'stalled1-failure.stan', line 18, column 4 to column 17)",
 " (in 'stalled1-failure.stan', line 19, column 11 to column 12)",
 " (in 'stalled1-failure.stan', line 19, column 4 to column 17)",
 " (in 'stalled1-failure.stan', line 23, column 4 to column 10)",
 " (in 'stalled1-failure.stan', line 24, column 11 to column 12)",
 " (in 'stalled1-failure.stan', line 24, column 4 to column 19)",
 " (in 'stalled1-failure.stan', line 25, column 4 to column 11)",
 " (in 'stalled1-failure.stan', line 26, column 4 to column 21)",
 " (in 'stalled1-failure.stan', line 35, column 16 to column 17)",
 " (in 'stalled1-failure.stan', line 35, column 11 to column 12)"};



class stalled1_failure_model final : public model_base_crtp<stalled1_failure_model> {

 private:
  int I;
  std::vector<int> n;
  std::vector<int> N;
  Eigen::Matrix<double, -1, 1> x1;
  Eigen::Matrix<double, -1, 1> x2;
  int K;
  Eigen::Matrix<double, -1, 1> x1x2;
 
 public:
  ~stalled1_failure_model() { }
  
  inline std::string model_name() const final { return "stalled1_failure_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  stalled1_failure_model(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "stalled1_failure_model_namespace::stalled1_failure_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      current_statement__ = 18;
      context__.validate_dims("data initialization","I","int",
           std::vector<size_t>{});
      I = std::numeric_limits<int>::min(); 
      
      current_statement__ = 18;
      I = context__.vals_i("I")[(1 - 1)];
      current_statement__ = 18;
      check_greater_or_equal(function__, "I", I, 0);
      current_statement__ = 19;
      validate_non_negative_index("n", "I", I);
      current_statement__ = 20;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{static_cast<size_t>(I)});
      n = std::vector<int>(I, std::numeric_limits<int>::min()); 
      
      current_statement__ = 20;
      n = context__.vals_i("n");
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        current_statement__ = 20;
        check_greater_or_equal(function__, "n[sym1__]", n[(sym1__ - 1)], 0);
      }
      current_statement__ = 21;
      validate_non_negative_index("N", "I", I);
      current_statement__ = 22;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{static_cast<size_t>(I)});
      N = std::vector<int>(I, std::numeric_limits<int>::min()); 
      
      current_statement__ = 22;
      N = context__.vals_i("N");
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        current_statement__ = 22;
        check_greater_or_equal(function__, "N[sym1__]", N[(sym1__ - 1)], 0);
      }
      current_statement__ = 23;
      validate_non_negative_index("x1", "I", I);
      current_statement__ = 24;
      context__.validate_dims("data initialization","x1","double",
           std::vector<size_t>{static_cast<size_t>(I)});
      x1 = Eigen::Matrix<double, -1, 1>(I); 
      
      {
        std::vector<double> x1_flat__;
        current_statement__ = 24;
        x1_flat__ = context__.vals_r("x1");
        current_statement__ = 24;
        pos__ = 1;
        current_statement__ = 24;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 24;
          assign(x1, x1_flat__[(pos__ - 1)],
            "assigning variable x1", index_uni(sym1__));
          current_statement__ = 24;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 25;
      validate_non_negative_index("x2", "I", I);
      current_statement__ = 26;
      context__.validate_dims("data initialization","x2","double",
           std::vector<size_t>{static_cast<size_t>(I)});
      x2 = Eigen::Matrix<double, -1, 1>(I); 
      
      {
        std::vector<double> x2_flat__;
        current_statement__ = 26;
        x2_flat__ = context__.vals_r("x2");
        current_statement__ = 26;
        pos__ = 1;
        current_statement__ = 26;
        for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
          current_statement__ = 26;
          assign(x2, x2_flat__[(pos__ - 1)],
            "assigning variable x2", index_uni(sym1__));
          current_statement__ = 26;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 27;
      K = std::numeric_limits<int>::min(); 
      
      current_statement__ = 28;
      validate_non_negative_index("x1x2", "I", I);
      current_statement__ = 29;
      x1x2 = Eigen::Matrix<double, -1, 1>(I);
      stan::math::fill(x1x2, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 30;
      K = 8;
      current_statement__ = 31;
      assign(x1x2, elt_multiply(x1, x2), "assigning variable x1x2");
      current_statement__ = 32;
      validate_non_negative_index("b", "I", I);
      current_statement__ = 33;
      validate_non_negative_index("b", "K", 8);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + (I * K);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "stalled1_failure_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha0;
      alpha0 = DUMMY_VAR__; 
      
      current_statement__ = 1;
      alpha0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha1;
      alpha1 = DUMMY_VAR__; 
      
      current_statement__ = 2;
      alpha1 = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha2;
      alpha2 = DUMMY_VAR__; 
      
      current_statement__ = 3;
      alpha2 = in__.template read<local_scalar_t__>();
      local_scalar_t__ alpha12;
      alpha12 = DUMMY_VAR__; 
      
      current_statement__ = 4;
      alpha12 = in__.template read<local_scalar_t__>();
      local_scalar_t__ tau;
      tau = DUMMY_VAR__; 
      
      current_statement__ = 5;
      tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> b;
      b = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(I, Eigen::Matrix<local_scalar_t__, -1, 1>(8));
      stan::math::fill(b, DUMMY_VAR__); 
      
      current_statement__ = 6;
      b = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
            I, 8);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__; 
      
      current_statement__ = 8;
      sigma = (1 / stan::math::sqrt(tau));
      {
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<propto__>(alpha0, 0.0, 1.0E3));
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<propto__>(alpha1, 0.0, 1.0E3));
        current_statement__ = 11;
        lp_accum__.add(normal_lpdf<propto__>(alpha2, 0.0, 1.0E3));
        current_statement__ = 12;
        lp_accum__.add(normal_lpdf<propto__>(alpha12, 0.0, 1.0E3));
        current_statement__ = 13;
        lp_accum__.add(gamma_lpdf<propto__>(tau, 1.0E-3, 1.0E-3));
        current_statement__ = 17;
        for (int i = 1; i <= I; ++i) {
          current_statement__ = 14;
          lp_accum__.add(
            normal_lpdf<propto__>(rvalue(b, "b", index_uni(i)), 0.0, sigma));
          current_statement__ = 15;
          lp_accum__.add(
            binomial_logit_lpmf<propto__>(rvalue(n, "n", index_uni(i)),
              rvalue(N, "N", index_uni(i)),
              add(
                (((alpha0 + (alpha1 * rvalue(x1, "x1", index_uni(i)))) +
                   (alpha2 * rvalue(x2, "x2", index_uni(i)))) +
                  (alpha12 * rvalue(x1x2, "x1x2", index_uni(i)))),
                rvalue(b, "b", index_uni(i)))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "stalled1_failure_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha0;
      alpha0 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      alpha0 = in__.template read<local_scalar_t__>();
      double alpha1;
      alpha1 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      alpha1 = in__.template read<local_scalar_t__>();
      double alpha2;
      alpha2 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      alpha2 = in__.template read<local_scalar_t__>();
      double alpha12;
      alpha12 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      alpha12 = in__.template read<local_scalar_t__>();
      double tau;
      tau = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
              lp__);
      std::vector<Eigen::Matrix<double, -1, 1>> b;
      b = std::vector<Eigen::Matrix<double, -1, 1>>(I, Eigen::Matrix<double, -1, 1>(8));
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN()); 
      
      current_statement__ = 6;
      b = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
            I, 8);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN(); 
      
      vars__.emplace_back(alpha0);
      vars__.emplace_back(alpha1);
      vars__.emplace_back(alpha2);
      vars__.emplace_back(alpha12);
      vars__.emplace_back(tau);
      for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          vars__.emplace_back(b[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      sigma = (1 / stan::math::sqrt(tau));
      if (emit_transformed_parameters__) {
        vars__.emplace_back(sigma);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
      double alpha0;
      alpha0 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 1;
      alpha0 = context__.vals_r("alpha0")[(1 - 1)];
      double alpha1;
      alpha1 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 2;
      alpha1 = context__.vals_r("alpha1")[(1 - 1)];
      double alpha2;
      alpha2 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 3;
      alpha2 = context__.vals_r("alpha2")[(1 - 1)];
      double alpha12;
      alpha12 = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 4;
      alpha12 = context__.vals_r("alpha12")[(1 - 1)];
      double tau;
      tau = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      tau = context__.vals_r("tau")[(1 - 1)];
      double tau_free__;
      tau_free__ = std::numeric_limits<double>::quiet_NaN(); 
      
      current_statement__ = 5;
      tau_free__ = stan::math::lb_free(tau, 0);
      std::vector<Eigen::Matrix<double, -1, 1>> b;
      b = std::vector<Eigen::Matrix<double, -1, 1>>(I, Eigen::Matrix<double, -1, 1>(8));
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN()); 
      
      {
        std::vector<double> b_flat__;
        current_statement__ = 6;
        b_flat__ = context__.vals_r("b");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= 8; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
            current_statement__ = 6;
            assign(b, b_flat__[(pos__ - 1)],
              "assigning variable b", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      vars__.emplace_back(alpha0);
      vars__.emplace_back(alpha1);
      vars__.emplace_back(alpha2);
      vars__.emplace_back(alpha12);
      vars__.emplace_back(tau_free__);
      for (int sym1__ = 1; sym1__ <= I; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 8; ++sym2__) {
          vars__.emplace_back(b[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha0", "alpha1", "alpha2",
      "alpha12", "tau", "b", "sigma"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(I), static_cast<size_t>(K)},
      std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha0");
    param_names__.emplace_back(std::string() + "alpha1");
    param_names__.emplace_back(std::string() + "alpha2");
    param_names__.emplace_back(std::string() + "alpha12");
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha0");
    param_names__.emplace_back(std::string() + "alpha1");
    param_names__.emplace_back(std::string() + "alpha2");
    param_names__.emplace_back(std::string() + "alpha12");
    param_names__.emplace_back(std::string() + "tau");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= I; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha12\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha12\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(I) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = stalled1_failure_model_namespace::stalled1_failure_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return stalled1_failure_model_namespace::profiles__;
}

#endif



Warning in 'stalled1-failure.stan', line 1, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 2, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 4, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 5, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 6, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 7, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 8, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 9, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 10, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 11, column 0: Comments beginning with # are deprecated. Please use // in place of # for line comments.
Warning in 'stalled1-failure.stan', line 25, column 6: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'stalled1-failure.stan', line 26, column 9: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'stalled1-failure.stan', line 40, column 10: assignment operator <- is deprecated in the Stan language; use = instead.
  $ ../../../../../install/default/bin/stanc -O1 --print-cpp unroll-limit.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace unroll_limit_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 17> locations_array__ = 
{" (found before start of program)",
 " (in 'unroll-limit.stan', line 2, column 2 to column 8)",
 " (in 'unroll-limit.stan', line 4, column 4 to column 15)",
 " (in 'unroll-limit.stan', line 3, column 19 to line 5, column 3)",
 " (in 'unroll-limit.stan', line 3, column 2 to line 5, column 3)",
 " (in 'unroll-limit.stan', line 7, column 4 to column 15)",
 " (in 'unroll-limit.stan', line 6, column 18 to line 8, column 3)",
 " (in 'unroll-limit.stan', line 6, column 2 to line 8, column 3)",
 " (in 'unroll-limit.stan', line 10, column 4 to column 15)",
 " (in 'unroll-limit.stan', line 9, column 19 to line 11, column 3)",
 " (in 'unroll-limit.stan', line 9, column 2 to line 11, column 3)",
 " (in 'unroll-limit.stan', line 13, column 4 to column 15)",
 " (in 'unroll-limit.stan', line 12, column 20 to line 14, column 3)",
 " (in 'unroll-limit.stan', line 12, column 2 to line 14, column 3)",
 " (in 'unroll-limit.stan', line 16, column 4 to column 15)",
 " (in 'unroll-limit.stan', line 15, column 20 to line 17, column 3)",
 " (in 'unroll-limit.stan', line 15, column 2 to line 17, column 3)"};



class unroll_limit_model final : public model_base_crtp<unroll_limit_model> {

 private:
  
 
 public:
  ~unroll_limit_model() { }
  
  inline std::string model_name() const final { return "unroll_limit_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = -O1 --print-cpp"};
  }
  
  
  unroll_limit_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "unroll_limit_model_namespace::unroll_limit_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "unroll_limit_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "unroll_limit_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int x;
      x = std::numeric_limits<int>::min(); 
      
      current_statement__ = 4;
      for (int i = 1; i <= 100; ++i) {
        current_statement__ = 2;
        x = (x + (1 + i));
      }
      current_statement__ = 7;
      for (int i = 1; i <= 20; ++i) {
        current_statement__ = 5;
        x = (x + (2 + i));
      }
      current_statement__ = 10;
      for (int i = 50; i <= 70; ++i) {
        current_statement__ = 8;
        x = (x + (3 + i));
      }
      current_statement__ = 13;
      for (int i = -10; i <= 10; ++i) {
        current_statement__ = 11;
        x = (x + (4 + i));
      }
      current_statement__ = 16;
      for (int i = -10; i <= 40; ++i) {
        current_statement__ = 14;
        x = (x + (5 + i));
      }
      vars__.emplace_back(x);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min(); 
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"x"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "x");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "x");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = unroll_limit_model_namespace::unroll_limit_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return unroll_limit_model_namespace::profiles__;
}

#endif



