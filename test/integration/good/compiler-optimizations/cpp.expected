  $ ../../../../../install/default/bin/stanc --O --print-cpp optimizations.stan

#include <vector>
#include <Eigen/Dense>

template <typename T, typename S>
std::vector<T> resize_to_match(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace optimizations_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'optimizations.stan', line 20, column 4 to column 15)",
                                                      " (in 'optimizations.stan', line 21, column 4 to column 13)",
                                                      " (in 'optimizations.stan', line 22, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 23, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 24, column 4 to column 24)",
                                                      " (in 'optimizations.stan', line 27, column 4 to column 11)",
                                                      " (in 'optimizations.stan', line 5, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 2, column 33 to line 6, column 5)",
                                                      " (in 'optimizations.stan', line 28, column 4 to column 19)",
                                                      " (in 'optimizations.stan', line 10, column 12 to column 26)",
                                                      " (in 'optimizations.stan', line 9, column 8 to line 10, column 26)",
                                                      " (in 'optimizations.stan', line 8, column 20 to line 12, column 5)",
                                                      " (in 'optimizations.stan', line 30, column 17 to column 28)",
                                                      " (in 'optimizations.stan', line 33, column 6 to column 22)",
                                                      " (in 'optimizations.stan', line 31, column 33 to line 34, column 5)",
                                                      " (in 'optimizations.stan', line 36, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 41, column 16 to column 29)",
                                                      " (in 'optimizations.stan', line 44, column 10 to column 16)",
                                                      " (in 'optimizations.stan', line 43, column 8 to line 44, column 16)",
                                                      " (in 'optimizations.stan', line 45, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 42, column 21 to line 46, column 5)",
                                                      " (in 'optimizations.stan', line 42, column 4 to line 46, column 5)",
                                                      " (in 'optimizations.stan', line 49, column 10 to column 19)",
                                                      " (in 'optimizations.stan', line 48, column 8 to line 49, column 19)",
                                                      " (in 'optimizations.stan', line 50, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 47, column 21 to line 51, column 5)",
                                                      " (in 'optimizations.stan', line 47, column 4 to line 51, column 5)",
                                                      " (in 'optimizations.stan', line 54, column 10 to column 19)",
                                                      " (in 'optimizations.stan', line 53, column 8 to line 54, column 19)",
                                                      " (in 'optimizations.stan', line 55, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 52, column 21 to line 56, column 5)",
                                                      " (in 'optimizations.stan', line 52, column 4 to line 56, column 5)",
                                                      " (in 'optimizations.stan', line 58, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 61, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 64, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 66, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 69, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 70, column 4 to column 11)",
                                                      " (in 'optimizations.stan', line 72, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 75, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 78, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 80, column 8 to column 19)",
                                                      " (in 'optimizations.stan', line 82, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 79, column 4 to line 83, column 5)",
                                                      " (in 'optimizations.stan', line 85, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 87, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 84, column 4 to line 88, column 5)",
                                                      " (in 'optimizations.stan', line 90, column 11 to column 23)",
                                                      " (in 'optimizations.stan', line 90, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 15, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 14, column 18 to line 17, column 5)",
                                                      " (in 'optimizations.stan', line 97, column 20 to column 26)",
                                                      " (in 'optimizations.stan', line 97, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 98, column 22 to column 28)",
                                                      " (in 'optimizations.stan', line 100, column 6 to column 15)",
                                                      " (in 'optimizations.stan', line 99, column 4 to line 100, column 15)",
                                                      " (in 'optimizations.stan', line 102, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 101, column 4 to line 102, column 12)",
                                                      " (in 'optimizations.stan', line 106, column 6 to column 15)",
                                                      " (in 'optimizations.stan', line 108, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 112, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 115, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 111, column 4 to line 116, column 5)",
                                                      " (in 'optimizations.stan', line 119, column 12 to column 24)",
                                                      " (in 'optimizations.stan', line 118, column 8 to line 121, column 9)",
                                                      " (in 'optimizations.stan', line 117, column 4 to line 127, column 5)",
                                                      " (in 'optimizations.stan', line 128, column 4 to column 14)",
                                                      " (in 'optimizations.stan', line 132, column 6 to column 21)",
                                                      " (in 'optimizations.stan', line 129, column 4 to line 132, column 21)",
                                                      " (in 'optimizations.stan', line 134, column 4 to column 15)",
                                                      " (in 'optimizations.stan', line 137, column 8 to column 23)",
                                                      " (in 'optimizations.stan', line 138, column 8 to column 24)",
                                                      " (in 'optimizations.stan', line 140, column 4 to column 25)",
                                                      " (in 'optimizations.stan', line 143, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 144, column 4 to column 22)",
                                                      " (in 'optimizations.stan', line 146, column 6 to column 28)",
                                                      " (in 'optimizations.stan', line 145, column 4 to line 146, column 28)",
                                                      " (in 'optimizations.stan', line 147, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 4, column 10 to column 17)",
                                                      " (in 'optimizations.stan', line 3, column 8 to line 4, column 17)",
                                                      " (in 'optimizations.stan', line 11, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 16, column 8 to column 18)"};

template <typename T0__, typename T1__, typename T2__, typename T3__>
void
nrfun_lp(const T0__& x, const T1__& y, const T2__& lp__,
         const T3__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try int sym36__;
  int sym35__;
  {
    current_statement__ = 81;
    if (logical_gt(x, 342)) {
      {
        current_statement__ = 80;
        return ;
      }
    } else 
    current_statement__ = 8;
    lp_accum__.add(y);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF nrfun_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct nrfun_lp_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
void
operator()(const T0__& x, const T1__& y, const T2__& lp__,
           const T3__& lp_accum__, std::ostream* pstream__)  const 
{
return nrfun_lp(x, y, lp__, lp_accum__, pstream__);
}
};

template <typename T0__>
T0__
rfun(const T0__& y, std::ostream* pstream__) {
  using local_scalar_t__ = T0__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try int sym39__;
  int sym38__;
  int sym37__;
  {
    current_statement__ = 12;
    if (logical_gt(y, 2)) {
      {
        current_statement__ = 11;
        return (y + 24);
      }
    } else 
    current_statement__ = 82;
    return (y + 2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF rfun") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_functor__ {
template <typename T0__>
T0__
operator()(const T0__& y, std::ostream* pstream__)  const 
{
return rfun(y, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
rfun_lp(const T0__& lp__, const T1__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 51;
    lp_accum__.add(2);
    current_statement__ = 83;
    return 24;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF rfun_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_lp_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
operator()(const T0__& lp__, const T1__& lp_accum__, std::ostream* pstream__)  const 
{
return rfun_lp(lp__, lp_accum__, pstream__);
}
};

class optimizations_model : public model_base_crtp<optimizations_model> {

 private:
  
 
 public:
  ~optimizations_model() { }
  
  std::string model_name() const { return "optimizations_model"; }
  
  optimizations_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "optimizations_model_namespace::optimizations_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += 1;
    num_params_r__ += 1;
    num_params_r__ += 3 * 2;
    num_params_r__ += 2;
    num_params_r__ += 3;
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "optimizations_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      double sym121__;
      double sym120__;
      double sym119__;
      double sym118__;
      double sym117__;
      Eigen::Matrix<double, -1, 1> sym116__;
      Eigen::Matrix<double, -1, 1> sym115__;
      double sym114__;
      int sym113__;
      int sym112__;
      int sym111__;
      int sym110__;
      int sym109__;
      int sym108__;
      int sym107__;
      int sym106__;
      int sym105__;
      int sym104__;
      int sym103__;
      int sym102__;
      int sym101__;
      int sym100__;
      int sym99__;
      int sym98__;
      int sym97__;
      int sym96__;
      int sym95__;
      int sym94__;
      int sym93__;
      int sym92__;
      int sym91__;
      int sym90__;
      int sym89__;
      int sym88__;
      int sym87__;
      int sym86__;
      int sym85__;
      local_scalar_t__ theta;
      
      sym118__ = in__.scalar();
      local_scalar_t__ phi;
      
      Eigen::Matrix<local_scalar_t__, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 2);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> x_vector;
      x_vector = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      
      Eigen::Matrix<double, -1, 1> x_cov_sym1__;
      x_cov_sym1__ = Eigen::Matrix<double, -1, 1>(3);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> x_cov;
      x_cov = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 2);
      
      {
        double x;
        
        current_statement__ = 10;
        for (size_t sym3__ = 1; sym3__ <= 1; ++sym3__) {
          {
            current_statement__ = 8;
            lp_accum__.add(3);
          }}
        int sym6__;
        for (size_t sym5__ = 1; sym5__ <= 1; ++sym5__) {
          {
            {
              {
                sym6__ = 27;
                break;
              }
            }
            sym6__ = 5;
            break;
          }}
        if (pstream__) {
          stan_print(pstream__, sym6__);
          stan_print(pstream__, "\n");
        }
        int sym9__;
        for (size_t sym8__ = 1; sym8__ <= 1; ++sym8__) {
          {
            {
              {
                sym9__ = 28;
                break;
              }
            }
            sym9__ = 6;
            break;
          }}
        if (sym9__) {
          {
            current_statement__ = 14;
            if (pstream__) {
              stan_print(pstream__, "a");
              stan_print(pstream__, "\n");
            }
          }
        } else 
        int sym12__;
        int sym15__;
        for (size_t sym11__ = 1; sym11__ <= 1; ++sym11__) {
          {
            {
              {
                sym12__ = 31;
                break;
              }
            }
            sym12__ = 9;
            break;
          }}
        for (size_t sym14__ = 1; sym14__ <= 1; ++sym14__) {
          {
            {
              {
                sym15__ = 29;
                break;
              }
            }
            sym15__ = 7;
            break;
          }}
        if (logical_lte(sym12__, sym15__)) {
          {
            {
              {
                int sym18__;
                for (size_t sym17__ = 1; sym17__ <= 1; ++sym17__) {
                  {
                    {
                      {
                        sym18__ = 32;
                        break;
                      }
                    }
                    sym18__ = 10;
                    break;
                  }}
                lp_accum__.add(sym18__);
                current_statement__ = 15;
                for (size_t sym19__ = 1; sym19__ <= 1; ++sym19__) {
                  {
                    current_statement__ = 8;
                    lp_accum__.add(3);
                  }}
              }
              sym112__ = (sym12__ + 1);
              for (size_t sym14__ = 1; sym14__ <= 1; ++sym14__) {
                {
                  {
                    {
                      sym15__ = 29;
                      sym112__ = (sym12__ + 1);
                      break;
                    }
                  }
                  sym15__ = 7;
                  sym112__ = (sym12__ + 1);
                  break;
                }}
            }
            for (size_t i = sym112__; i <= sym15__; ++i) {
              {
                {
                  int sym18__;
                  for (size_t sym17__ = 1; sym17__ <= 1; ++sym17__) {
                    {
                      {
                        {
                          sym18__ = 32;
                          break;
                        }
                      }
                      sym18__ = 10;
                      break;
                    }}
                  lp_accum__.add(sym18__);
                  current_statement__ = 15;
                  for (size_t sym19__ = 1; sym19__ <= 1; ++sym19__) {
                    {
                      current_statement__ = 8;
                      lp_accum__.add(3);
                    }}
                }
                for (size_t sym14__ = 1; sym14__ <= 1; ++sym14__) {
                  {
                    {
                      {
                        sym15__ = 29;
                        break;
                      }
                    }
                    sym15__ = 7;
                    break;
                  }}
              }}
          }
        } else 
        {
          current_statement__ = 17;
          lp_accum__.add(53);
        }
        {
          current_statement__ = 17;
          lp_accum__.add(53);
        }
        {
          current_statement__ = 17;
          lp_accum__.add(53);
        }
        {
          current_statement__ = 17;
          lp_accum__.add(53);
        }
        {
          current_statement__ = 17;
          lp_accum__.add(53);
        }
        {
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
        }
        {
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
        }
        {
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
        }
        {
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
        }
        {
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
          {
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
            {
              current_statement__ = 18;
              lp_accum__.add(53);
            }
          }
        }
        current_statement__ = 23;
        for (size_t i = 1; i <= 5; ++i) {
          {
            current_statement__ = 20;
            if (logical_gt(i, 4)) {
              {
                break;
              }
            } else 
            current_statement__ = 21;
            lp_accum__.add(2);
          }}
        current_statement__ = 28;
        for (size_t i = 1; i <= 5; ++i) {
          {
            current_statement__ = 25;
            if (logical_gt(i, 4)) {
              {
                continue;
              }
            } else 
            current_statement__ = 26;
            lp_accum__.add(2);
          }}
        current_statement__ = 33;
        for (size_t i = 1; i <= 5; ++i) {
          {
            current_statement__ = 30;
            if (logical_gt(i, 4)) {
              {
                continue;
              }
            } else 
            current_statement__ = 31;
            lp_accum__.add(2);
          }}
        current_statement__ = 34;
        lp_accum__.add(3);
        current_statement__ = 35;
        lp_accum__.add(2);
        current_statement__ = 36;
        lp_accum__.add(247);
        current_statement__ = 37;
        lp_accum__.add(576);
        current_statement__ = 38;
        lp_accum__.add(5880);
        double z;
        
        current_statement__ = 40;
        lp_accum__.add(5880);
        current_statement__ = 41;
        lp_accum__.add(5880);
        current_statement__ = 42;
        lp_accum__.add(2);
        {
          double y;
          
          current_statement__ = 44;
          lp_accum__.add(24);
        }
        {
          double y;
          
          current_statement__ = 47;
          lp_accum__.add(245);
        }
        {
          {
            current_statement__ = 49;
            lp_accum__.add(2);
          }
        }
        int sym22__;
        for (size_t sym21__ = 1; sym21__ <= 1; ++sym21__) {
          {
            current_statement__ = 51;
            lp_accum__.add(2);
            break;
          }}
        current_statement__ = 54;
        while (576) {
          {
            break;
          }
        }
        int sym25__;
        for (size_t sym24__ = 1; sym24__ <= 1; ++sym24__) {
          {
            current_statement__ = 51;
            lp_accum__.add(2);
            sym25__ = 24;
            break;
          }}
        while (sym25__) {
          {
            {
              break;
            }
            for (size_t sym24__ = 1; sym24__ <= 1; ++sym24__) {
              {
                current_statement__ = 51;
                lp_accum__.add(2);
                sym25__ = 24;
                break;
              }}
          }
        }
        current_statement__ = 57;
        for (size_t i = 31; i <= 225; ++i) { {
                                               continue;
                                             }}
        current_statement__ = 59;
        for (size_t i = 31; i <= 225; ++i) { {
                                               break;
                                             }}
        int sym28__;
        for (size_t sym27__ = 1; sym27__ <= 1; ++sym27__) {
          {
            current_statement__ = 51;
            lp_accum__.add(2);
            sym28__ = 24;
            break;
          }}
        for (size_t i = sym28__; i <= 225; ++i) { {
                                                    continue;
                                                  }}
        int sym31__;
        for (size_t sym30__ = 1; sym30__ <= 1; ++sym30__) {
          {
            current_statement__ = 51;
            lp_accum__.add(2);
            sym31__ = 24;
            break;
          }}
        for (size_t i = sym31__; i <= 225; ++i) { {
                                                    break;
                                                  }}
        int sym34__;
        for (size_t sym33__ = 1; sym33__ <= 1; ++sym33__) {
          {
            current_statement__ = 51;
            lp_accum__.add(2);
            sym34__ = 24;
            break;
          }}
        if (logical_lte(sym34__, 225)) {
          {
            {
              
            }
          }
        } else 
        {
          current_statement__ = 62;
          lp_accum__.add(1);
          current_statement__ = 63;
          lp_accum__.add(24);
        }
        {
          {
            current_statement__ = 65;
            lp_accum__.add(1);
          }
        }
        double temp;
        
        {
          {
            current_statement__ = 69;
            if (pstream__) {
              stan_print(pstream__, "hello");
              stan_print(pstream__, "\n");
            }
          }
        }
        double temp2;
        
        {
          current_statement__ = 72;
          lp_accum__.add(4);
          current_statement__ = 73;
          lp_accum__.add(6);
        }
        {
          current_statement__ = 72;
          lp_accum__.add(4);
          current_statement__ = 73;
          lp_accum__.add(6);
        }
        double dataonlyvar;
        
        current_statement__ = 75;
        lp_accum__.add(159);
        double paramvar;
        
        {
          {
            sym114__ = (sym118__ * 34);
          }
        }
        current_statement__ = 79;
        lp_accum__.add(sym114__);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "optimizations_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      double sym84__;
      double sym83__;
      double sym82__;
      double sym81__;
      double sym80__;
      double sym79__;
      double sym78__;
      double sym77__;
      double sym76__;
      double sym75__;
      double sym74__;
      double sym73__;
      double sym72__;
      double sym71__;
      double sym70__;
      double sym69__;
      double sym68__;
      Eigen::Matrix<double, -1, 1> sym67__;
      double theta;
      
      sym69__ = in__.scalar();
      theta = sym69__;
      double phi;
      
      sym68__ = in__.scalar();
      phi = sym68__;
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      
      sym71__ = in__.matrix(3, 2);
      x_matrix = sym71__;
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      
      sym72__ = in__.vector(2);
      x_vector = sym72__;
      Eigen::Matrix<double, -1, 1> x_cov_sym2__;
      x_cov_sym2__ = Eigen::Matrix<double, -1, 1>(3);
      
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      
      sym70__ = in__.vector(3);
      sym67__ = cov_matrix_constrain(sym70__, 2);
      x_cov = sym67__;
      vars__.push_back(sym69__);
      vars__.push_back(sym68__);
      {
        {
          vars__.push_back(sym71__[(1 - 1)][(1 - 1)]);
        }
        {
          vars__.push_back(sym71__[(2 - 1)][(1 - 1)]);
        }
        {
          vars__.push_back(sym71__[(3 - 1)][(1 - 1)]);
        }
      }
      {
        {
          vars__.push_back(sym71__[(1 - 1)][(2 - 1)]);
        }
        {
          vars__.push_back(sym71__[(2 - 1)][(2 - 1)]);
        }
        {
          vars__.push_back(sym71__[(3 - 1)][(2 - 1)]);
        }
      }
      {
        vars__.push_back(sym72__[(1 - 1)]);
      }
      {
        vars__.push_back(sym72__[(2 - 1)]);
      }
      {
        {
          vars__.push_back(sym67__[(1 - 1)][(1 - 1)]);
        }
        {
          vars__.push_back(sym67__[(2 - 1)][(1 - 1)]);
        }
      }
      {
        {
          vars__.push_back(sym67__[(1 - 1)][(2 - 1)]);
        }
        {
          vars__.push_back(sym67__[(2 - 1)][(2 - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      double sym66__;
      double sym65__;
      double sym64__;
      double sym63__;
      double sym62__;
      double sym61__;
      double sym60__;
      double sym59__;
      double sym58__;
      double sym57__;
      double sym56__;
      double sym55__;
      double sym54__;
      double sym53__;
      double sym52__;
      double sym51__;
      double sym50__;
      double sym49__;
      double sym48__;
      double sym47__;
      double sym46__;
      double sym45__;
      double sym44__;
      double sym43__;
      double sym42__;
      double sym41__;
      Eigen::Matrix<double, -1, -1> sym40__;
      int pos__;
      
      double theta;
      
      sym50__ = context__.vals_r("theta")[(1 - 1)];
      double phi;
      
      sym49__ = context__.vals_r("phi")[(1 - 1)];
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      
      {
        {
          current_statement__ = 4;
          assign(x_matrix, cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_matrix")[(1 - 1)], "assigning variable x_matrix");
        }
        {
          current_statement__ = 4;
          assign(x_matrix, cons_list(index_uni(2), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_matrix")[(2 - 1)], "assigning variable x_matrix");
        }
        {
          current_statement__ = 4;
          assign(x_matrix, cons_list(index_uni(3), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_matrix")[(3 - 1)], "assigning variable x_matrix");
        }
      }
      {
        {
          current_statement__ = 4;
          assign(x_matrix, cons_list(index_uni(1), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_matrix")[(4 - 1)], "assigning variable x_matrix");
        }
        {
          current_statement__ = 4;
          assign(x_matrix, cons_list(index_uni(2), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_matrix")[(5 - 1)], "assigning variable x_matrix");
        }
        {
          current_statement__ = 4;
          assign(x_matrix, cons_list(index_uni(3), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_matrix")[(6 - 1)], "assigning variable x_matrix");
        }
      }
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      
      {
        current_statement__ = 5;
        x_vector[(1 - 1)] = context__.vals_r("x_vector")[(1 - 1)];
      }
      {
        current_statement__ = 5;
        x_vector[(2 - 1)] = context__.vals_r("x_vector")[(2 - 1)];
      }
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      
      {
        {
          current_statement__ = 6;
          assign(x_cov, cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_cov")[(1 - 1)], "assigning variable x_cov");
        }
        {
          current_statement__ = 6;
          assign(x_cov, cons_list(index_uni(2), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_cov")[(2 - 1)], "assigning variable x_cov");
        }
      }
      {
        {
          current_statement__ = 6;
          assign(x_cov, cons_list(index_uni(1), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_cov")[(3 - 1)], "assigning variable x_cov");
        }
        {
          current_statement__ = 6;
          assign(x_cov, cons_list(index_uni(2), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_cov")[(4 - 1)], "assigning variable x_cov");
        }
      }
      current_statement__ = 6;
      x_cov = cov_matrix_free(x_cov);
      vars__.push_back(sym50__);
      vars__.push_back(sym49__);
      {
        {
          vars__.push_back(rvalue(x_matrix, cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
        }
        {
          vars__.push_back(rvalue(x_matrix, cons_list(index_uni(2), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
        }
        {
          vars__.push_back(rvalue(x_matrix, cons_list(index_uni(3), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
        }
      }
      {
        {
          vars__.push_back(rvalue(x_matrix, cons_list(index_uni(1), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
        }
        {
          vars__.push_back(rvalue(x_matrix, cons_list(index_uni(2), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
        }
        {
          vars__.push_back(rvalue(x_matrix, cons_list(index_uni(3), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
        }
      }
      {
        vars__.push_back(x_vector[(1 - 1)]);
      }
      {
        vars__.push_back(x_vector[(2 - 1)]);
      }
      {
        {
          sym40__ = cov_matrix_free(x_cov);
          vars__.push_back(rvalue(cov_matrix_free(sym40__), cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
        }
        {
          vars__.push_back(rvalue(cov_matrix_free(sym40__), cons_list(index_uni(2), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
        }
      }
      {
        {
          vars__.push_back(rvalue(cov_matrix_free(sym40__), cons_list(index_uni(1), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
        }
        {
          vars__.push_back(rvalue(cov_matrix_free(sym40__), cons_list(index_uni(2), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("theta");
    names__.push_back("phi");
    names__.push_back("x_matrix");
    names__.push_back("x_vector");
    names__.push_back("x_cov");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "theta");
    param_names__.push_back(std::string() + "phi");
    for (size_t sym122__ = 1; sym122__ <= 2; ++sym122__) {
      {
        for (size_t sym123__ = 1; sym123__ <= 3; ++sym123__) {
          {
            param_names__.push_back(std::string() + "x_matrix" + '.' + std::to_string(sym123__) + '.' + std::to_string(sym122__));
          }}
      }}
    for (size_t sym122__ = 1; sym122__ <= 2; ++sym122__) {
      {
        param_names__.push_back(std::string() + "x_vector" + '.' + std::to_string(sym122__));
      }}
    for (size_t sym122__ = 1; sym122__ <= 2; ++sym122__) {
      {
        for (size_t sym123__ = 1; sym123__ <= 2; ++sym123__) {
          {
            param_names__.push_back(std::string() + "x_cov" + '.' + std::to_string(sym123__) + '.' + std::to_string(sym122__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "theta");
    param_names__.push_back(std::string() + "phi");
    for (size_t sym122__ = 1; sym122__ <= 2; ++sym122__) {
      {
        for (size_t sym123__ = 1; sym123__ <= 3; ++sym123__) {
          {
            param_names__.push_back(std::string() + "x_matrix" + '.' + std::to_string(sym123__) + '.' + std::to_string(sym122__));
          }}
      }}
    for (size_t sym122__ = 1; sym122__ <= 2; ++sym122__) {
      {
        param_names__.push_back(std::string() + "x_vector" + '.' + std::to_string(sym122__));
      }}
    for (size_t sym122__ = 1; sym122__ <= 3; ++sym122__) {
      {
        param_names__.push_back(std::string() + "x_cov" + '.' + std::to_string(sym122__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef optimizations_model_namespace::optimizations_model stan_model;

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

