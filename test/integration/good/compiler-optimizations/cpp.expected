  $ ../../../../../install/default/bin/stanc --O --print-cpp optimizations.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace optimizations_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'optimizations.stan', line 20, column 4 to column 15)",
                                                      " (in 'optimizations.stan', line 21, column 4 to column 13)",
                                                      " (in 'optimizations.stan', line 22, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 23, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 24, column 4 to column 24)",
                                                      " (in 'optimizations.stan', line 27, column 4 to column 11)",
                                                      " (in 'optimizations.stan', line 28, column 4 to column 19)",
                                                      " (in 'optimizations.stan', line 29, column 4 to column 19)",
                                                      " (in 'optimizations.stan', line 30, column 17 to column 28)",
                                                      " (in 'optimizations.stan', line 30, column 4 to column 28)",
                                                      " (in 'optimizations.stan', line 32, column 6 to column 24)",
                                                      " (in 'optimizations.stan', line 33, column 6 to column 22)",
                                                      " (in 'optimizations.stan', line 31, column 33 to line 34, column 5)",
                                                      " (in 'optimizations.stan', line 36, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 35, column 21 to line 37, column 5)",
                                                      " (in 'optimizations.stan', line 35, column 4 to line 37, column 5)",
                                                      " (in 'optimizations.stan', line 41, column 16 to column 29)",
                                                      " (in 'optimizations.stan', line 40, column 12 to line 41, column 29)",
                                                      " (in 'optimizations.stan', line 39, column 8 to line 41, column 29)",
                                                      " (in 'optimizations.stan', line 38, column 4 to line 41, column 29)",
                                                      " (in 'optimizations.stan', line 44, column 10 to column 16)",
                                                      " (in 'optimizations.stan', line 43, column 8 to line 44, column 16)",
                                                      " (in 'optimizations.stan', line 45, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 42, column 21 to line 46, column 5)",
                                                      " (in 'optimizations.stan', line 42, column 4 to line 46, column 5)",
                                                      " (in 'optimizations.stan', line 49, column 10 to column 19)",
                                                      " (in 'optimizations.stan', line 48, column 8 to line 49, column 19)",
                                                      " (in 'optimizations.stan', line 50, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 47, column 21 to line 51, column 5)",
                                                      " (in 'optimizations.stan', line 47, column 4 to line 51, column 5)",
                                                      " (in 'optimizations.stan', line 54, column 10 to column 19)",
                                                      " (in 'optimizations.stan', line 53, column 8 to line 54, column 19)",
                                                      " (in 'optimizations.stan', line 55, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 52, column 21 to line 56, column 5)",
                                                      " (in 'optimizations.stan', line 52, column 4 to line 56, column 5)",
                                                      " (in 'optimizations.stan', line 58, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 61, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 64, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 66, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 69, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 70, column 4 to column 11)",
                                                      " (in 'optimizations.stan', line 72, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 75, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 78, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 80, column 8 to column 19)",
                                                      " (in 'optimizations.stan', line 82, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 79, column 4 to line 83, column 5)",
                                                      " (in 'optimizations.stan', line 85, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 87, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 84, column 4 to line 88, column 5)",
                                                      " (in 'optimizations.stan', line 90, column 11 to column 23)",
                                                      " (in 'optimizations.stan', line 90, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 95, column 4 to column 27)",
                                                      " (in 'optimizations.stan', line 97, column 20 to column 26)",
                                                      " (in 'optimizations.stan', line 97, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 98, column 22 to column 28)",
                                                      " (in 'optimizations.stan', line 98, column 4 to column 28)",
                                                      " (in 'optimizations.stan', line 100, column 6 to column 15)",
                                                      " (in 'optimizations.stan', line 99, column 4 to line 100, column 15)",
                                                      " (in 'optimizations.stan', line 102, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 101, column 4 to line 102, column 12)",
                                                      " (in 'optimizations.stan', line 106, column 6 to column 15)",
                                                      " (in 'optimizations.stan', line 105, column 4 to line 106, column 15)",
                                                      " (in 'optimizations.stan', line 108, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 107, column 4 to line 108, column 12)",
                                                      " (in 'optimizations.stan', line 110, column 6 to column 7)",
                                                      " (in 'optimizations.stan', line 109, column 4 to line 110, column 7)",
                                                      " (in 'optimizations.stan', line 112, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 115, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 111, column 4 to line 116, column 5)",
                                                      " (in 'optimizations.stan', line 119, column 12 to column 24)",
                                                      " (in 'optimizations.stan', line 118, column 8 to line 121, column 9)",
                                                      " (in 'optimizations.stan', line 117, column 4 to line 127, column 5)",
                                                      " (in 'optimizations.stan', line 128, column 4 to column 14)",
                                                      " (in 'optimizations.stan', line 132, column 6 to column 21)",
                                                      " (in 'optimizations.stan', line 129, column 4 to line 132, column 21)",
                                                      " (in 'optimizations.stan', line 134, column 4 to column 15)",
                                                      " (in 'optimizations.stan', line 137, column 8 to column 23)",
                                                      " (in 'optimizations.stan', line 138, column 8 to column 24)",
                                                      " (in 'optimizations.stan', line 135, column 21 to line 139, column 5)",
                                                      " (in 'optimizations.stan', line 135, column 4 to line 139, column 5)",
                                                      " (in 'optimizations.stan', line 140, column 4 to column 25)",
                                                      " (in 'optimizations.stan', line 143, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 144, column 4 to column 22)",
                                                      " (in 'optimizations.stan', line 146, column 6 to column 28)",
                                                      " (in 'optimizations.stan', line 145, column 4 to line 146, column 28)",
                                                      " (in 'optimizations.stan', line 147, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 4, column 10 to column 17)",
                                                      " (in 'optimizations.stan', line 3, column 8 to line 4, column 17)",
                                                      " (in 'optimizations.stan', line 5, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 2, column 33 to line 6, column 5)",
                                                      " (in 'optimizations.stan', line 10, column 12 to column 26)",
                                                      " (in 'optimizations.stan', line 9, column 8 to line 10, column 26)",
                                                      " (in 'optimizations.stan', line 11, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 8, column 20 to line 12, column 5)",
                                                      " (in 'optimizations.stan', line 15, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 16, column 8 to column 18)",
                                                      " (in 'optimizations.stan', line 14, column 18 to line 17, column 5)"};


template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
void
nrfun_lp(const T0__& x, const int& y, T_lp__& lp__, T_lp_accum__& lp_accum__,
         std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__>::type;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int sym2__;
    int sym1__;
    {
      current_statement__ = 89;
      if (logical_gt(x, 342)) {
        {
          current_statement__ = 88;
          return ;
        }
      } else ;
      current_statement__ = 90;
      lp_accum__.add(y);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct nrfun_lp_functor__ {
template <bool propto__, typename T0__, typename T_lp__,
typename T_lp_accum__>
void
operator()(const T0__& x, const int& y, T_lp__& lp__,
           T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return nrfun_lp(x, y, lp__, lp_accum__, pstream__);
}
};

int
rfun(const int& y, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int sym5__;
    int sym4__;
    int sym3__;
    {
      current_statement__ = 93;
      if (logical_gt(y, 2)) {
        {
          current_statement__ = 92;
          return (y + 24);
        }
      } else ;
      current_statement__ = 94;
      return (y + 2);
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_functor__ {
int
operator()(const int& y, std::ostream* pstream__)  const 
{
return rfun(y, pstream__);
}
};

template <bool propto__, typename T_lp__, typename T_lp_accum__>
int
rfun_lp(T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    {
      current_statement__ = 96;
      lp_accum__.add(2);
      current_statement__ = 97;
      return 24;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_lp_functor__ {
template <bool propto__, typename T_lp__, typename T_lp_accum__>
int
operator()(T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__)  const 
{
return rfun_lp(lp__, lp_accum__, pstream__);
}
};

class optimizations_model : public model_base_crtp<optimizations_model> {

 private:
  int pos__;
 
 public:
  ~optimizations_model() { }
  
  std::string model_name() const { return "optimizations_model"; }
  
  optimizations_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "optimizations_model_namespace::optimizations_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      pos__ = std::numeric_limits<int>::min();
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      current_statement__ = 3;
      validate_non_negative_index("x_matrix", "3", 3);
      current_statement__ = 3;
      validate_non_negative_index("x_matrix", "2", 2);
      num_params_r__ += 3 * 2;
      current_statement__ = 4;
      validate_non_negative_index("x_vector", "2", 2);
      num_params_r__ += 2;
      current_statement__ = 5;
      validate_non_negative_index("x_cov", "2", 2);
      current_statement__ = 5;
      validate_non_negative_index("x_cov", "2", 2);
      num_params_r__ += 3;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "optimizations_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      int sym63__;
      int sym62__;
      int sym61__;
      int sym60__;
      local_scalar_t__ sym59__;
      int sym58__;
      int sym57__;
      int sym56__;
      int sym55__;
      int sym54__;
      int sym53__;
      int sym52__;
      int sym51__;
      int sym50__;
      int sym49__;
      int sym48__;
      int sym47__;
      int sym46__;
      int sym45__;
      local_scalar_t__ theta;
      theta = DUMMY_VAR__;
      
      current_statement__ = 1;
      theta = in__.scalar();
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 2;
      phi = in__.scalar();
      current_statement__ = 3;
      validate_non_negative_index("x_matrix", "3", 3);
      current_statement__ = 3;
      validate_non_negative_index("x_matrix", "2", 2);
      Eigen::Matrix<local_scalar_t__, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 2);
      stan::math::fill(x_matrix, DUMMY_VAR__);
      
      current_statement__ = 3;
      x_matrix = in__.matrix(3, 2);
      current_statement__ = 4;
      validate_non_negative_index("x_vector", "2", 2);
      Eigen::Matrix<local_scalar_t__, -1, 1> x_vector;
      x_vector = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(x_vector, DUMMY_VAR__);
      
      current_statement__ = 4;
      x_vector = in__.vector(2);
      current_statement__ = 5;
      validate_non_negative_index("x_cov", "2", 2);
      current_statement__ = 5;
      validate_non_negative_index("x_cov", "2", 2);
      Eigen::Matrix<local_scalar_t__, -1, -1> x_cov;
      x_cov = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 2);
      stan::math::fill(x_cov, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> x_cov_in__;
      x_cov_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(x_cov_in__, DUMMY_VAR__);
      
      current_statement__ = 5;
      x_cov_in__ = in__.vector(3);
      {
        double x;
        x = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 7;
        nrfun_lp<false>(4, 3, lp__, lp_accum__, pstream__);
        current_statement__ = 8;
        if (pstream__) {
          stan_print(pstream__, rfun(3, pstream__));
          stan_print(pstream__, "\n");
        }
        current_statement__ = 10;
        if (rfun(4, pstream__)) {
          {
            current_statement__ = 9;
            if (pstream__) {
              stan_print(pstream__, "a");
              stan_print(pstream__, "\n");
            }
          }
        } else ;
        sym62__ = rfun(5, pstream__);
        if (logical_lte(rfun(7, pstream__), sym62__)) {
          {
            {
              sym63__ = rfun(8, pstream__);
              lp_accum__.add(sym63__);
              sym56__ = (rfun(7, pstream__) + 1);
              nrfun_lp<false>(34, 3, lp__, lp_accum__, pstream__);
            }
            current_statement__ = 13;
            for (int i = sym56__; i <= sym62__; ++i) {
              {
                current_statement__ = 11;
                lp_accum__.add(sym63__);
                current_statement__ = 12;
                nrfun_lp<false>(34, 3, lp__, lp_accum__, pstream__);
              }}
          }
        } else ;
        {
          {
            {
              current_statement__ = 14;
              lp_accum__.add(53);
            }
            {
              {
                current_statement__ = 14;
                lp_accum__.add(53);
              }
            }
            {
              {
                current_statement__ = 14;
                lp_accum__.add(53);
              }
            }
            {
              {
                current_statement__ = 14;
                lp_accum__.add(53);
              }
            }
            {
              {
                current_statement__ = 14;
                lp_accum__.add(53);
              }
            }
          }
        }
        {
          {
            {
              {
                {
                  {
                    {
                      {
                        {
                          current_statement__ = 17;
                          lp_accum__.add(53);
                        }
                        {
                          {
                            current_statement__ = 17;
                            lp_accum__.add(53);
                          }
                        }
                      }
                    }
                  }
                  {
                    {
                      sym58__ = (2 * 2);
                      if (logical_lte(2, sym58__)) {
                        {
                          {
                            sym55__ = (2 + 1);
                            lp_accum__.add(53);
                          }
                          current_statement__ = 17;
                          for (int k = sym55__; k <= sym58__; ++k) {
                            {
                              current_statement__ = 17;
                              lp_accum__.add(53);
                            }}
                        }
                      } else ;
                    }
                  }
                  {
                    {
                      sym58__ = (3 * 2);
                      if (logical_lte(3, sym58__)) {
                        {
                          {
                            sym55__ = (3 + 1);
                            lp_accum__.add(53);
                          }
                          current_statement__ = 17;
                          for (int k = sym55__; k <= sym58__; ++k) {
                            {
                              current_statement__ = 17;
                              lp_accum__.add(53);
                            }}
                        }
                      } else ;
                    }
                  }
                }
              }
            }
            {
              {
                sym54__ = (2 + 2);
                if (logical_lte(2, sym54__)) {
                  {
                    {
                      sym57__ = (2 * 2);
                      if (logical_lte(2, sym57__)) {
                        {
                          {
                            sym53__ = (2 + 1);
                            lp_accum__.add(53);
                          }
                          current_statement__ = 17;
                          for (int k = sym53__; k <= sym57__; ++k) {
                            {
                              current_statement__ = 17;
                              lp_accum__.add(53);
                            }}
                        }
                      } else {
                        sym53__ = (2 + 1);
                      }
                    }
                    current_statement__ = 18;
                    for (int j = sym53__; j <= sym54__; ++j) {
                      {
                        sym58__ = (j * 2);
                        if (logical_lte(j, sym58__)) {
                          {
                            {
                              sym55__ = (j + 1);
                              lp_accum__.add(53);
                            }
                            current_statement__ = 17;
                            for (int k = sym55__; k <= sym58__; ++k) {
                              {
                                current_statement__ = 17;
                                lp_accum__.add(53);
                              }}
                          }
                        } else ;
                      }}
                  }
                } else ;
              }
            }
            {
              {
                sym54__ = (3 + 2);
                if (logical_lte(3, sym54__)) {
                  {
                    {
                      sym57__ = (3 * 2);
                      if (logical_lte(3, sym57__)) {
                        {
                          {
                            sym53__ = (3 + 1);
                            lp_accum__.add(53);
                          }
                          current_statement__ = 17;
                          for (int k = sym53__; k <= sym57__; ++k) {
                            {
                              current_statement__ = 17;
                              lp_accum__.add(53);
                            }}
                        }
                      } else {
                        sym53__ = (3 + 1);
                      }
                    }
                    current_statement__ = 18;
                    for (int j = sym53__; j <= sym54__; ++j) {
                      {
                        sym58__ = (j * 2);
                        if (logical_lte(j, sym58__)) {
                          {
                            {
                              sym55__ = (j + 1);
                              lp_accum__.add(53);
                            }
                            current_statement__ = 17;
                            for (int k = sym55__; k <= sym58__; ++k) {
                              {
                                current_statement__ = 17;
                                lp_accum__.add(53);
                              }}
                          }
                        } else ;
                      }}
                  }
                } else ;
              }
            }
            {
              {
                sym54__ = (4 + 2);
                if (logical_lte(4, sym54__)) {
                  {
                    {
                      sym57__ = (4 * 2);
                      if (logical_lte(4, sym57__)) {
                        {
                          {
                            sym53__ = (4 + 1);
                            lp_accum__.add(53);
                          }
                          current_statement__ = 17;
                          for (int k = sym53__; k <= sym57__; ++k) {
                            {
                              current_statement__ = 17;
                              lp_accum__.add(53);
                            }}
                        }
                      } else {
                        sym53__ = (4 + 1);
                      }
                    }
                    current_statement__ = 18;
                    for (int j = sym53__; j <= sym54__; ++j) {
                      {
                        sym58__ = (j * 2);
                        if (logical_lte(j, sym58__)) {
                          {
                            {
                              sym55__ = (j + 1);
                              lp_accum__.add(53);
                            }
                            current_statement__ = 17;
                            for (int k = sym55__; k <= sym58__; ++k) {
                              {
                                current_statement__ = 17;
                                lp_accum__.add(53);
                              }}
                          }
                        } else ;
                      }}
                  }
                } else ;
              }
            }
            {
              {
                sym54__ = (5 + 2);
                if (logical_lte(5, sym54__)) {
                  {
                    {
                      sym57__ = (5 * 2);
                      if (logical_lte(5, sym57__)) {
                        {
                          {
                            sym53__ = (5 + 1);
                            lp_accum__.add(53);
                          }
                          current_statement__ = 17;
                          for (int k = sym53__; k <= sym57__; ++k) {
                            {
                              current_statement__ = 17;
                              lp_accum__.add(53);
                            }}
                        }
                      } else {
                        sym53__ = (5 + 1);
                      }
                    }
                    current_statement__ = 18;
                    for (int j = sym53__; j <= sym54__; ++j) {
                      {
                        sym58__ = (j * 2);
                        if (logical_lte(j, sym58__)) {
                          {
                            {
                              sym55__ = (j + 1);
                              lp_accum__.add(53);
                            }
                            current_statement__ = 17;
                            for (int k = sym55__; k <= sym58__; ++k) {
                              {
                                current_statement__ = 17;
                                lp_accum__.add(53);
                              }}
                          }
                        } else ;
                      }}
                  }
                } else ;
              }
            }
          }
        }
        current_statement__ = 25;
        for (int i = 1; i <= 5; ++i) {
          {
            current_statement__ = 22;
            if (logical_gt(i, 4)) {
              {
                break;
              }
            } else ;
            current_statement__ = 23;
            lp_accum__.add(2);
          }}
        current_statement__ = 30;
        for (int i = 1; i <= 5; ++i) {
          {
            current_statement__ = 27;
            if (logical_gt(i, 4)) {
              {
                continue;
              }
            } else ;
            current_statement__ = 28;
            lp_accum__.add(2);
          }}
        current_statement__ = 35;
        for (int i = 1; i <= 5; ++i) {
          {
            current_statement__ = 32;
            if (logical_gt(i, 4)) {
              {
                continue;
              }
            } else ;
            current_statement__ = 33;
            lp_accum__.add(2);
          }}
        current_statement__ = 36;
        lp_accum__.add(3);
        current_statement__ = 37;
        lp_accum__.add(2);
        current_statement__ = 38;
        lp_accum__.add(247);
        current_statement__ = 39;
        lp_accum__.add(576);
        current_statement__ = 40;
        lp_accum__.add(5880);
        double z;
        z = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 42;
        lp_accum__.add(5880);
        current_statement__ = 43;
        lp_accum__.add(5880);
        current_statement__ = 44;
        lp_accum__.add(2);
        {
          double y;
          y = std::numeric_limits<double>::quiet_NaN();
          
          current_statement__ = 46;
          lp_accum__.add(24);
        }
        {
          double y;
          y = std::numeric_limits<double>::quiet_NaN();
          
          current_statement__ = 49;
          lp_accum__.add(245);
        }
        {
          current_statement__ = 51;
          lp_accum__.add(2);
        }
        current_statement__ = 53;
        if (rfun_lp<false>(lp__, lp_accum__, pstream__)) {
          ;
        } else ;
        current_statement__ = 55;
        while (576) {
          {
            break;
          }
        }
        current_statement__ = 57;
        while (rfun_lp<false>(lp__, lp_accum__, pstream__)) {
          {
            break;
          }
        }
        current_statement__ = 59;
        for (int i = 31; i <= 225; ++i) { {
                                            continue;
                                          }}
        current_statement__ = 61;
        for (int i = 31; i <= 225; ++i) { {
                                            break;
                                          }}
        current_statement__ = 63;
        for (int i = rfun_lp<false>(lp__, lp_accum__, pstream__); i <= 225;
             ++i) { {
                      continue;
                    }}
        current_statement__ = 65;
        for (int i = rfun_lp<false>(lp__, lp_accum__, pstream__); i <= 225;
             ++i) { {
                      break;
                    }}
        current_statement__ = 67;
        if (logical_lte(rfun_lp<false>(lp__, lp_accum__, pstream__), 225)) {
          {
            current_statement__ = 66;
            for (int i = (rfun_lp<false>(lp__, lp_accum__, pstream__) + 1);
                 i <= 225; ++i) ;
          }
        } else ;
        {
          current_statement__ = 68;
          lp_accum__.add(1);
          current_statement__ = 69;
          lp_accum__.add(24);
        }
        {
          {
            current_statement__ = 71;
            lp_accum__.add(1);
          }
        }
        double temp;
        temp = std::numeric_limits<double>::quiet_NaN();
        
        {
          {
            current_statement__ = 75;
            if (pstream__) {
              stan_print(pstream__, "hello");
              stan_print(pstream__, "\n");
            }
          }
        }
        double temp2;
        temp2 = std::numeric_limits<double>::quiet_NaN();
        
        {
          {
            {
              current_statement__ = 78;
              lp_accum__.add(4);
              current_statement__ = 79;
              lp_accum__.add(6);
            }
            {
              {
                current_statement__ = 78;
                lp_accum__.add(4);
                current_statement__ = 79;
                lp_accum__.add(6);
              }
            }
          }
        }
        double dataonlyvar;
        dataonlyvar = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 83;
        lp_accum__.add(159);
        double paramvar;
        paramvar = std::numeric_limits<double>::quiet_NaN();
        
        {
          {
            sym59__ = (theta * 34);
          }
        }
        current_statement__ = 87;
        lp_accum__.add(sym59__);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "optimizations_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double sym44__;
      double sym43__;
      double sym42__;
      double sym41__;
      double sym40__;
      double sym39__;
      double sym38__;
      double sym37__;
      double sym36__;
      double sym35__;
      Eigen::Matrix<double, -1, -1> sym34__;
      int sym33__;
      int sym32__;
      double sym31__;
      int sym30__;
      int sym29__;
      double sym28__;
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      theta = in__.scalar();
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      phi = in__.scalar();
      current_statement__ = 3;
      validate_non_negative_index("x_matrix", "3", 3);
      current_statement__ = 3;
      validate_non_negative_index("x_matrix", "2", 2);
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      stan::math::fill(x_matrix, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      x_matrix = in__.matrix(3, 2);
      current_statement__ = 4;
      validate_non_negative_index("x_vector", "2", 2);
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(x_vector, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      x_vector = in__.vector(2);
      current_statement__ = 5;
      validate_non_negative_index("x_cov", "2", 2);
      current_statement__ = 5;
      validate_non_negative_index("x_cov", "2", 2);
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(x_cov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> x_cov_in__;
      x_cov_in__ = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(x_cov_in__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      x_cov_in__ = in__.vector(3);
      assign(sym34__, nil_index_list(),
        stan::math::cov_matrix_constrain(x_cov_in__, 2),
        "assigning variable sym34__");
      assign(x_cov, nil_index_list(), sym34__, "assigning variable x_cov");
      vars__.push_back(theta);
      vars__.push_back(phi);
      {
        {
          {
            {
              {
                {
                  vars__.push_back(
                    rvalue(x_matrix,
                      cons_list(index_uni(1),
                        cons_list(index_uni(1), nil_index_list())),
                      "x_matrix"));
                }
                {
                  {
                    vars__.push_back(
                      rvalue(x_matrix,
                        cons_list(index_uni(2),
                          cons_list(index_uni(1), nil_index_list())),
                        "x_matrix"));
                  }
                }
                {
                  {
                    vars__.push_back(
                      rvalue(x_matrix,
                        cons_list(index_uni(3),
                          cons_list(index_uni(1), nil_index_list())),
                        "x_matrix"));
                  }
                }
              }
            }
          }
          {
            {
              {
                {
                  {
                    vars__.push_back(
                      rvalue(x_matrix,
                        cons_list(index_uni(1),
                          cons_list(index_uni(2), nil_index_list())),
                        "x_matrix"));
                  }
                  {
                    {
                      vars__.push_back(
                        rvalue(x_matrix,
                          cons_list(index_uni(2),
                            cons_list(index_uni(2), nil_index_list())),
                          "x_matrix"));
                    }
                  }
                  {
                    {
                      vars__.push_back(
                        rvalue(x_matrix,
                          cons_list(index_uni(3),
                            cons_list(index_uni(2), nil_index_list())),
                          "x_matrix"));
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        {
          {
            vars__.push_back(
              rvalue(x_vector, cons_list(index_uni(1), nil_index_list()),
                "x_vector"));
          }
          {
            {
              vars__.push_back(
                rvalue(x_vector, cons_list(index_uni(2), nil_index_list()),
                  "x_vector"));
            }
          }
        }
      }
      {
        {
          {
            {
              {
                {
                  vars__.push_back(
                    rvalue(sym34__,
                      cons_list(index_uni(1),
                        cons_list(index_uni(1), nil_index_list())),
                      "sym34__"));
                }
                {
                  {
                    vars__.push_back(
                      rvalue(sym34__,
                        cons_list(index_uni(2),
                          cons_list(index_uni(1), nil_index_list())),
                        "sym34__"));
                  }
                }
              }
            }
          }
          {
            {
              {
                {
                  {
                    vars__.push_back(
                      rvalue(sym34__,
                        cons_list(index_uni(1),
                          cons_list(index_uni(2), nil_index_list())),
                        "sym34__"));
                  }
                  {
                    {
                      vars__.push_back(
                        rvalue(sym34__,
                          cons_list(index_uni(2),
                            cons_list(index_uni(2), nil_index_list())),
                          "sym34__"));
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        {
          return ;
        }
      } else ;
      if (logical_negation(emit_generated_quantities__)) {
        {
          return ;
        }
      } else ;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      double sym27__;
      double sym26__;
      double sym25__;
      double sym24__;
      double sym23__;
      double sym22__;
      double sym21__;
      double sym20__;
      double sym19__;
      double sym18__;
      double sym17__;
      double sym16__;
      double sym15__;
      double sym14__;
      double sym13__;
      double sym12__;
      std::vector<double> sym11__;
      std::vector<double> sym10__;
      std::vector<double> sym9__;
      int sym8__;
      int sym7__;
      int sym6__;
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN();
      
      sym21__ = context__.vals_r("theta")[(1 - 1)];
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      sym20__ = context__.vals_r("phi")[(1 - 1)];
      current_statement__ = 3;
      validate_non_negative_index("x_matrix", "3", 3);
      current_statement__ = 3;
      validate_non_negative_index("x_matrix", "2", 2);
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      stan::math::fill(x_matrix, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> x_matrix_flat__;
        assign(sym10__, nil_index_list(), context__.vals_r("x_matrix"),
          "assigning variable sym10__");
        {
          {
            {
              {
                {
                  {
                    current_statement__ = 3;
                    assign(x_matrix,
                      cons_list(index_uni(1),
                        cons_list(index_uni(1), nil_index_list())),
                      rvalue(sym10__,
                        cons_list(index_uni(1), nil_index_list()), "sym10__"),
                      "assigning variable x_matrix");
                    current_statement__ = 3;
                    pos__ = 2;
                  }
                  {
                    {
                      current_statement__ = 3;
                      assign(x_matrix,
                        cons_list(index_uni(2),
                          cons_list(index_uni(1), nil_index_list())),
                        sym10__[(pos__ - 1)], "assigning variable x_matrix");
                      current_statement__ = 3;
                      pos__ = (pos__ + 1);
                    }
                  }
                  {
                    {
                      current_statement__ = 3;
                      assign(x_matrix,
                        cons_list(index_uni(3),
                          cons_list(index_uni(1), nil_index_list())),
                        sym10__[(pos__ - 1)], "assigning variable x_matrix");
                      current_statement__ = 3;
                      pos__ = (pos__ + 1);
                    }
                  }
                }
              }
            }
            {
              {
                {
                  {
                    {
                      assign(x_matrix,
                        cons_list(index_uni(1),
                          cons_list(index_uni(2), nil_index_list())),
                        sym10__[(pos__ - 1)], "assigning variable x_matrix");
                      current_statement__ = 3;
                      pos__ = (pos__ + 1);
                    }
                    {
                      {
                        current_statement__ = 3;
                        assign(x_matrix,
                          cons_list(index_uni(2),
                            cons_list(index_uni(2), nil_index_list())),
                          sym10__[(pos__ - 1)], "assigning variable x_matrix");
                        current_statement__ = 3;
                        pos__ = (pos__ + 1);
                      }
                    }
                    {
                      {
                        current_statement__ = 3;
                        assign(x_matrix,
                          cons_list(index_uni(3),
                            cons_list(index_uni(2), nil_index_list())),
                          sym10__[(pos__ - 1)], "assigning variable x_matrix");
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 4;
      validate_non_negative_index("x_vector", "2", 2);
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(x_vector, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> x_vector_flat__;
        assign(sym11__, nil_index_list(), context__.vals_r("x_vector"),
          "assigning variable sym11__");
        {
          {
            {
              current_statement__ = 4;
              assign(x_vector, cons_list(index_uni(1), nil_index_list()),
                rvalue(sym11__, cons_list(index_uni(1), nil_index_list()),
                  "sym11__"), "assigning variable x_vector");
              current_statement__ = 4;
              pos__ = 2;
            }
            {
              {
                current_statement__ = 4;
                assign(x_vector, cons_list(index_uni(2), nil_index_list()),
                  sym11__[(pos__ - 1)], "assigning variable x_vector");
              }
            }
          }
        }
      }
      current_statement__ = 5;
      validate_non_negative_index("x_cov", "2", 2);
      current_statement__ = 5;
      validate_non_negative_index("x_cov", "2", 2);
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      stan::math::fill(x_cov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> x_cov_flat__;
        assign(sym9__, nil_index_list(), context__.vals_r("x_cov"),
          "assigning variable sym9__");
        {
          {
            {
              {
                {
                  {
                    current_statement__ = 5;
                    assign(x_cov,
                      cons_list(index_uni(1),
                        cons_list(index_uni(1), nil_index_list())),
                      rvalue(sym9__,
                        cons_list(index_uni(1), nil_index_list()), "sym9__"),
                      "assigning variable x_cov");
                    current_statement__ = 5;
                    pos__ = 2;
                  }
                  {
                    {
                      current_statement__ = 5;
                      assign(x_cov,
                        cons_list(index_uni(2),
                          cons_list(index_uni(1), nil_index_list())),
                        sym9__[(pos__ - 1)], "assigning variable x_cov");
                      current_statement__ = 5;
                      pos__ = (pos__ + 1);
                    }
                  }
                }
              }
            }
            {
              {
                {
                  {
                    {
                      assign(x_cov,
                        cons_list(index_uni(1),
                          cons_list(index_uni(2), nil_index_list())),
                        sym9__[(pos__ - 1)], "assigning variable x_cov");
                      current_statement__ = 5;
                      pos__ = (pos__ + 1);
                    }
                    {
                      {
                        current_statement__ = 5;
                        assign(x_cov,
                          cons_list(index_uni(2),
                            cons_list(index_uni(2), nil_index_list())),
                          sym9__[(pos__ - 1)], "assigning variable x_cov");
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 5;
      validate_non_negative_index("x_cov_free__",
                                  "(2 + ((2 * (2 - 1)) / 2))", 3);
      Eigen::Matrix<double, -1, 1> x_cov_free__;
      x_cov_free__ = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(x_cov_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(x_cov_free__, nil_index_list(),
        stan::math::cov_matrix_free(x_cov), "assigning variable x_cov_free__");
      vars__.push_back(sym21__);
      vars__.push_back(sym20__);
      {
        {
          {
            {
              {
                {
                  vars__.push_back(
                    rvalue(x_matrix,
                      cons_list(index_uni(1),
                        cons_list(index_uni(1), nil_index_list())),
                      "x_matrix"));
                }
                {
                  {
                    vars__.push_back(
                      rvalue(x_matrix,
                        cons_list(index_uni(2),
                          cons_list(index_uni(1), nil_index_list())),
                        "x_matrix"));
                  }
                }
                {
                  {
                    vars__.push_back(
                      rvalue(x_matrix,
                        cons_list(index_uni(3),
                          cons_list(index_uni(1), nil_index_list())),
                        "x_matrix"));
                  }
                }
              }
            }
          }
          {
            {
              {
                {
                  {
                    vars__.push_back(
                      rvalue(x_matrix,
                        cons_list(index_uni(1),
                          cons_list(index_uni(2), nil_index_list())),
                        "x_matrix"));
                  }
                  {
                    {
                      vars__.push_back(
                        rvalue(x_matrix,
                          cons_list(index_uni(2),
                            cons_list(index_uni(2), nil_index_list())),
                          "x_matrix"));
                    }
                  }
                  {
                    {
                      vars__.push_back(
                        rvalue(x_matrix,
                          cons_list(index_uni(3),
                            cons_list(index_uni(2), nil_index_list())),
                          "x_matrix"));
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        {
          {
            vars__.push_back(
              rvalue(x_vector, cons_list(index_uni(1), nil_index_list()),
                "x_vector"));
          }
          {
            {
              vars__.push_back(
                rvalue(x_vector, cons_list(index_uni(2), nil_index_list()),
                  "x_vector"));
            }
          }
        }
      }
      {
        {
          {
            vars__.push_back(
              rvalue(x_cov_free__, cons_list(index_uni(1), nil_index_list()),
                "x_cov_free__"));
          }
          {
            {
              vars__.push_back(
                rvalue(x_cov_free__,
                  cons_list(index_uni(2), nil_index_list()), "x_cov_free__"));
            }
          }
          {
            {
              vars__.push_back(
                rvalue(x_cov_free__,
                  cons_list(index_uni(3), nil_index_list()), "x_cov_free__"));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("theta");
    names__.push_back("phi");
    names__.push_back("x_matrix");
    names__.push_back("x_vector");
    names__.push_back("x_cov");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "theta");
    param_names__.push_back(std::string() + "phi");
    for (int sym64__ = 1; sym64__ <= 2; ++sym64__) {
      {
        for (int sym65__ = 1; sym65__ <= 3; ++sym65__) {
          {
            param_names__.push_back(std::string() + "x_matrix" + '.' + std::to_string(sym65__) + '.' + std::to_string(sym64__));
          }}
      }}
    for (int sym64__ = 1; sym64__ <= 2; ++sym64__) {
      {
        param_names__.push_back(std::string() + "x_vector" + '.' + std::to_string(sym64__));
      }}
    for (int sym64__ = 1; sym64__ <= 2; ++sym64__) {
      {
        for (int sym65__ = 1; sym65__ <= 2; ++sym65__) {
          {
            param_names__.push_back(std::string() + "x_cov" + '.' + std::to_string(sym65__) + '.' + std::to_string(sym64__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "theta");
    param_names__.push_back(std::string() + "phi");
    for (int sym64__ = 1; sym64__ <= 2; ++sym64__) {
      {
        for (int sym65__ = 1; sym65__ <= 3; ++sym65__) {
          {
            param_names__.push_back(std::string() + "x_matrix" + '.' + std::to_string(sym65__) + '.' + std::to_string(sym64__));
          }}
      }}
    for (int sym64__ = 1; sym64__ <= 2; ++sym64__) {
      {
        param_names__.push_back(std::string() + "x_vector" + '.' + std::to_string(sym64__));
      }}
    for (int sym64__ = 1; sym64__ <= 3; ++sym64__) {
      {
        param_names__.push_back(std::string() + "x_cov" + '.' + std::to_string(sym64__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef optimizations_model_namespace::optimizations_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif



