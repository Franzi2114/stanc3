  $ ../../../../../install/default/bin/stanc --O --print-cpp optimizations.stan

#include <vector>
#include <Eigen/Dense>

template <typename T, typename S>
std::vector<T> resize_to_match(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace optimizations_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'optimizations.stan', line 20, column 4 to column 15)",
                                                      " (in 'optimizations.stan', line 21, column 4 to column 13)",
                                                      " (in 'optimizations.stan', line 22, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 23, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 24, column 4 to column 24)",
                                                      " (in 'optimizations.stan', line 27, column 4 to column 11)",
                                                      " (in 'optimizations.stan', line 4, column 10 to column 17)",
                                                      " (in 'optimizations.stan', line 3, column 8 to line 4, column 17)",
                                                      " (in 'optimizations.stan', line 5, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 2, column 33 to line 6, column 5)",
                                                      " (in 'optimizations.stan', line 28, column 4 to column 19)",
                                                      " (in 'optimizations.stan', line 9, column 8 to line 10, column 26)",
                                                      " (in 'optimizations.stan', line 8, column 20 to line 12, column 5)",
                                                      " (in 'optimizations.stan', line 30, column 17 to column 28)",
                                                      " (in 'optimizations.stan', line 33, column 6 to column 22)",
                                                      " (in 'optimizations.stan', line 31, column 33 to line 34, column 5)",
                                                      " (in 'optimizations.stan', line 31, column 4 to line 34, column 5)",
                                                      " (in 'optimizations.stan', line 36, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 35, column 21 to line 37, column 5)",
                                                      " (in 'optimizations.stan', line 41, column 16 to column 29)",
                                                      " (in 'optimizations.stan', line 40, column 12 to line 41, column 29)",
                                                      " (in 'optimizations.stan', line 39, column 8 to line 41, column 29)",
                                                      " (in 'optimizations.stan', line 44, column 10 to column 16)",
                                                      " (in 'optimizations.stan', line 43, column 8 to line 44, column 16)",
                                                      " (in 'optimizations.stan', line 45, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 42, column 21 to line 46, column 5)",
                                                      " (in 'optimizations.stan', line 42, column 4 to line 46, column 5)",
                                                      " (in 'optimizations.stan', line 49, column 10 to column 19)",
                                                      " (in 'optimizations.stan', line 48, column 8 to line 49, column 19)",
                                                      " (in 'optimizations.stan', line 50, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 47, column 21 to line 51, column 5)",
                                                      " (in 'optimizations.stan', line 47, column 4 to line 51, column 5)",
                                                      " (in 'optimizations.stan', line 54, column 10 to column 19)",
                                                      " (in 'optimizations.stan', line 53, column 8 to line 54, column 19)",
                                                      " (in 'optimizations.stan', line 55, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 52, column 21 to line 56, column 5)",
                                                      " (in 'optimizations.stan', line 52, column 4 to line 56, column 5)",
                                                      " (in 'optimizations.stan', line 59, column 4 to line 60, column 12)",
                                                      " (in 'optimizations.stan', line 61, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 64, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 69, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 70, column 4 to column 11)",
                                                      " (in 'optimizations.stan', line 75, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 78, column 4 to column 16)",
                                                      " (in 'optimizations.stan', line 80, column 8 to column 19)",
                                                      " (in 'optimizations.stan', line 82, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 79, column 4 to line 83, column 5)",
                                                      " (in 'optimizations.stan', line 85, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 87, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 84, column 4 to line 88, column 5)",
                                                      " (in 'optimizations.stan', line 90, column 11 to column 23)",
                                                      " (in 'optimizations.stan', line 90, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 15, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 14, column 18 to line 17, column 5)",
                                                      " (in 'optimizations.stan', line 97, column 20 to column 26)",
                                                      " (in 'optimizations.stan', line 97, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 98, column 22 to column 28)",
                                                      " (in 'optimizations.stan', line 100, column 6 to column 15)",
                                                      " (in 'optimizations.stan', line 99, column 4 to line 100, column 15)",
                                                      " (in 'optimizations.stan', line 102, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 101, column 4 to line 102, column 12)",
                                                      " (in 'optimizations.stan', line 106, column 6 to column 15)",
                                                      " (in 'optimizations.stan', line 108, column 6 to column 12)",
                                                      " (in 'optimizations.stan', line 112, column 8 to column 20)",
                                                      " (in 'optimizations.stan', line 115, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 111, column 4 to line 116, column 5)",
                                                      " (in 'optimizations.stan', line 119, column 12 to column 24)",
                                                      " (in 'optimizations.stan', line 118, column 8 to line 121, column 9)",
                                                      " (in 'optimizations.stan', line 117, column 4 to line 127, column 5)",
                                                      " (in 'optimizations.stan', line 128, column 4 to column 14)",
                                                      " (in 'optimizations.stan', line 132, column 6 to column 21)",
                                                      " (in 'optimizations.stan', line 129, column 4 to line 132, column 21)",
                                                      " (in 'optimizations.stan', line 134, column 4 to column 15)",
                                                      " (in 'optimizations.stan', line 137, column 8 to column 23)",
                                                      " (in 'optimizations.stan', line 138, column 8 to column 24)",
                                                      " (in 'optimizations.stan', line 135, column 21 to line 139, column 5)",
                                                      " (in 'optimizations.stan', line 140, column 4 to column 25)",
                                                      " (in 'optimizations.stan', line 143, column 4 to column 26)",
                                                      " (in 'optimizations.stan', line 144, column 4 to column 22)",
                                                      " (in 'optimizations.stan', line 146, column 6 to column 28)",
                                                      " (in 'optimizations.stan', line 145, column 4 to line 146, column 28)",
                                                      " (in 'optimizations.stan', line 147, column 4 to column 23)",
                                                      " (in 'optimizations.stan', line 10, column 12 to column 26)",
                                                      " (in 'optimizations.stan', line 11, column 8 to column 21)",
                                                      " (in 'optimizations.stan', line 16, column 8 to column 18)"};

template <typename T0__, typename T1__, typename T2__, typename T3__>
void
nrfun_lp(const T0__& x, const T1__& y, const T2__& lp__,
         const T3__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try int sym4__;
  int sym3__;
  {
    current_statement__ = 9;
    if (logical_gt(x, 342)) {
      current_statement__ = 8;
      return ;
    } else {
      
    }
    current_statement__ = 10;
    lp_accum__.add(y);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF nrfun_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct nrfun_lp_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
void
operator()(const T0__& x, const T1__& y, const T2__& lp__,
           const T3__& lp_accum__, std::ostream* pstream__)  const 
{
return nrfun_lp(x, y, lp__, lp_accum__, pstream__);
}
};

template <typename T0__>
T0__
rfun(const T0__& y, std::ostream* pstream__) {
  using local_scalar_t__ = T0__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try int sym7__;
  int sym6__;
  int sym5__;
  {
    current_statement__ = 13;
    if (logical_gt(y, 2)) {
      current_statement__ = 84;
      return (y + 24);
    } else {
      
    }
    current_statement__ = 85;
    return (y + 2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF rfun") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_functor__ {
template <typename T0__>
T0__
operator()(const T0__& y, std::ostream* pstream__)  const 
{
return rfun(y, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
rfun_lp(const T0__& lp__, const T1__& lp_accum__, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 54;
    lp_accum__.add(2);
    current_statement__ = 86;
    return 24;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF rfun_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct rfun_lp_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__,
T1__>::type
operator()(const T0__& lp__, const T1__& lp_accum__, std::ostream* pstream__)  const 
{
return rfun_lp(lp__, lp_accum__, pstream__);
}
};

class optimizations_model : public model_base_crtp<optimizations_model> {

 private:
  
 
 public:
  ~optimizations_model() { }
  
  std::string model_name() const { return "optimizations_model"; }
  
  optimizations_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "optimizations_model_namespace::optimizations_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += 1;
    num_params_r__ += 1;
    num_params_r__ += 3 * 2;
    num_params_r__ += 2;
    num_params_r__ += 3;
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "optimizations_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      int sym70__;
      int sym69__;
      int sym68__;
      int sym67__;
      int sym66__;
      double sym65__;
      double sym64__;
      double sym63__;
      double sym62__;
      double sym61__;
      Eigen::Matrix<double, -1, 1> sym60__;
      int sym59__;
      int sym58__;
      int sym57__;
      int sym56__;
      int sym55__;
      int sym54__;
      int sym53__;
      double sym52__;
      int sym51__;
      int sym50__;
      int sym49__;
      int sym48__;
      int sym47__;
      int sym46__;
      int sym45__;
      int sym44__;
      double sym43__;
      double sym42__;
      double sym41__;
      double sym40__;
      double sym39__;
      double sym38__;
      int sym37__;
      int sym36__;
      int sym35__;
      double sym34__;
      local_scalar_t__ theta;
      
      local_scalar_t__ phi;
      
      Eigen::Matrix<local_scalar_t__, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 2);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> x_vector;
      x_vector = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      
      Eigen::Matrix<double, -1, 1> x_cov_sym1__;
      x_cov_sym1__ = Eigen::Matrix<double, -1, 1>(3);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> x_cov;
      x_cov = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 2);
      
      {
        double x;
        
        current_statement__ = 12;
        for (size_t sym73__ = 1; sym73__ <= 1; ++sym73__) {
          int sym71__;
          int sym72__;
          {
            current_statement__ = 9;
            if (logical_gt(4, 342)) {
              break;
            } else {
              
            }
            current_statement__ = 10;
            lp_accum__.add(3);
          }}
        int sym76__;
        for (size_t sym75__ = 1; sym75__ <= 1; ++sym75__) {
          int sym77__;
          int sym78__;
          int sym79__;
          {
            current_statement__ = 13;
            if (logical_gt(3, 2)) {
              sym76__ = (3 + 24);
              break;
            } else {
              
            }
            sym76__ = (3 + 2);
            break;
          }}
        if (pstream__) {
          stan_print(pstream__, sym76__);
          stan_print(pstream__, "\n");
        }
        int sym82__;
        for (size_t sym81__ = 1; sym81__ <= 1; ++sym81__) {
          int sym83__;
          int sym84__;
          int sym85__;
          {
            current_statement__ = 13;
            if (logical_gt(4, 2)) {
              sym82__ = (4 + 24);
              break;
            } else {
              
            }
            sym82__ = (4 + 2);
            break;
          }}
        if (sym82__) {
          current_statement__ = 15;
          if (pstream__) {
            stan_print(pstream__, "a");
            stan_print(pstream__, "\n");
          }
          int sym100__;
          for (size_t sym99__ = 1; sym99__ <= 1; ++sym99__) {
            int sym101__;
            int sym102__;
            int sym103__;
            {
              current_statement__ = 13;
              if (logical_gt(5, 2)) {
                sym100__ = (5 + 24);
                break;
              } else {
                
              }
              sym100__ = (5 + 2);
              break;
            }}
          sym68__ = sym100__;
          int sym106__;
          for (size_t sym105__ = 1; sym105__ <= 1; ++sym105__) {
            int sym107__;
            int sym108__;
            int sym109__;
            {
              current_statement__ = 13;
              if (logical_gt(7, 2)) {
                sym106__ = (7 + 24);
                break;
              } else {
                
              }
              sym106__ = (7 + 2);
              break;
            }}
          sym69__ = sym106__;
        } else {
          int sym88__;
          for (size_t sym87__ = 1; sym87__ <= 1; ++sym87__) {
            int sym89__;
            int sym90__;
            int sym91__;
            {
              current_statement__ = 13;
              if (logical_gt(5, 2)) {
                sym88__ = (5 + 24);
                break;
              } else {
                
              }
              sym88__ = (5 + 2);
              break;
            }}
          sym68__ = sym88__;
          int sym94__;
          for (size_t sym93__ = 1; sym93__ <= 1; ++sym93__) {
            int sym95__;
            int sym96__;
            int sym97__;
            {
              current_statement__ = 13;
              if (logical_gt(7, 2)) {
                sym94__ = (7 + 24);
                break;
              } else {
                
              }
              sym94__ = (7 + 2);
              break;
            }}
          sym69__ = sym94__;
        }
        current_statement__ = 18;
        if (logical_lte(sym69__, sym68__)) {
          {
            {
              int sym112__;
              for (size_t sym111__ = 1; sym111__ <= 1; ++sym111__) {
                int sym113__;
                int sym114__;
                int sym115__;
                {
                  current_statement__ = 13;
                  if (logical_gt(8, 2)) {
                    sym112__ = (8 + 24);
                    break;
                  } else {
                    
                  }
                  sym112__ = (8 + 2);
                  break;
                }}
              lp_accum__.add(sym112__);
              current_statement__ = 16;
              for (size_t sym118__ = 1; sym118__ <= 1; ++sym118__) {
                int sym116__;
                int sym117__;
                {
                  current_statement__ = 9;
                  if (logical_gt(34, 342)) {
                    break;
                  } else {
                    
                  }
                  current_statement__ = 10;
                  lp_accum__.add(3);
                }}
            }
          }
          for (size_t i = (sym69__ + 1); i <= sym68__; ++i) {
            {
              int sym112__;
              for (size_t sym111__ = 1; sym111__ <= 1; ++sym111__) {
                int sym113__;
                int sym114__;
                int sym115__;
                {
                  current_statement__ = 13;
                  if (logical_gt(8, 2)) {
                    sym112__ = (8 + 24);
                    break;
                  } else {
                    
                  }
                  sym112__ = (8 + 2);
                  break;
                }}
              lp_accum__.add(sym112__);
              current_statement__ = 16;
              for (size_t sym118__ = 1; sym118__ <= 1; ++sym118__) {
                int sym116__;
                int sym117__;
                {
                  current_statement__ = 9;
                  if (logical_gt(34, 342)) {
                    break;
                  } else {
                    
                  }
                  current_statement__ = 10;
                  lp_accum__.add(3);
                }}
            }}
        } 
        {
          {
            current_statement__ = 19;
            lp_accum__.add(53);
          }
        }
        {
          {
            current_statement__ = 19;
            lp_accum__.add(53);
          }
        }
        {
          {
            current_statement__ = 19;
            lp_accum__.add(53);
          }
        }
        {
          {
            current_statement__ = 19;
            lp_accum__.add(53);
          }
        }
        {
          {
            current_statement__ = 19;
            lp_accum__.add(53);
          }
        }
        {
          {
            current_statement__ = 23;
            if (logical_lte(1, (1 + 2))) {
              {
                {
                  current_statement__ = 22;
                  if (logical_lte(1, (1 * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (1 + 1); k <= (1 * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }
              }
              for (size_t j = (1 + 1); j <= (1 + 2); ++j) {
                {
                  current_statement__ = 22;
                  if (logical_lte(j, (j * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (j + 1); k <= (j * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }}
            } 
          }
        }
        {
          {
            current_statement__ = 23;
            if (logical_lte(2, (2 + 2))) {
              {
                {
                  current_statement__ = 22;
                  if (logical_lte(2, (2 * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (2 + 1); k <= (2 * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }
              }
              for (size_t j = (2 + 1); j <= (2 + 2); ++j) {
                {
                  current_statement__ = 22;
                  if (logical_lte(j, (j * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (j + 1); k <= (j * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }}
            } 
          }
        }
        {
          {
            current_statement__ = 23;
            if (logical_lte(3, (3 + 2))) {
              {
                {
                  current_statement__ = 22;
                  if (logical_lte(3, (3 * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (3 + 1); k <= (3 * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }
              }
              for (size_t j = (3 + 1); j <= (3 + 2); ++j) {
                {
                  current_statement__ = 22;
                  if (logical_lte(j, (j * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (j + 1); k <= (j * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }}
            } 
          }
        }
        {
          {
            current_statement__ = 23;
            if (logical_lte(4, (4 + 2))) {
              {
                {
                  current_statement__ = 22;
                  if (logical_lte(4, (4 * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (4 + 1); k <= (4 * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }
              }
              for (size_t j = (4 + 1); j <= (4 + 2); ++j) {
                {
                  current_statement__ = 22;
                  if (logical_lte(j, (j * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (j + 1); k <= (j * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }}
            } 
          }
        }
        {
          {
            current_statement__ = 23;
            if (logical_lte(5, (5 + 2))) {
              {
                {
                  current_statement__ = 22;
                  if (logical_lte(5, (5 * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (5 + 1); k <= (5 * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }
              }
              for (size_t j = (5 + 1); j <= (5 + 2); ++j) {
                {
                  current_statement__ = 22;
                  if (logical_lte(j, (j * 2))) {
                    {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }
                    }
                    for (size_t k = (j + 1); k <= (j * 2); ++k) {
                      {
                        current_statement__ = 21;
                        lp_accum__.add(53);
                      }}
                  } 
                }}
            } 
          }
        }
        current_statement__ = 28;
        for (size_t i = 1; i <= 5; ++i) {
          {
            current_statement__ = 25;
            if (logical_gt(i, 4)) {
              break;
            } else {
              
            }
            current_statement__ = 26;
            lp_accum__.add(2);
          }}
        current_statement__ = 33;
        for (size_t i = 1; i <= 5; ++i) {
          {
            current_statement__ = 30;
            if (logical_gt(i, 4)) {
              continue;
            } else {
              
            }
            current_statement__ = 31;
            lp_accum__.add(2);
          }}
        current_statement__ = 38;
        for (size_t i = 1; i <= 5; ++i) {
          {
            current_statement__ = 35;
            if (logical_gt(i, 4)) {
              continue;
            } else {
              
            }
            current_statement__ = 36;
            lp_accum__.add(2);
          }}
        sym41__ = 3;
        lp_accum__.add(3);
        current_statement__ = 39;
        if (logical_gt(in__.scalar(), 2)) {
          sym41__ = 2;
        } else {
          
        }
        current_statement__ = 40;
        lp_accum__.add(sym41__);
        current_statement__ = 41;
        lp_accum__.add(247);
        sym41__ = 576;
        lp_accum__.add(576);
        if (logical_gt(in__.scalar(), 46)) {
          sym41__ = 5880;
        } else {
          
        }
        current_statement__ = 42;
        lp_accum__.add(sym41__);
        double z;
        
        lp_accum__.add(sym41__);
        current_statement__ = 44;
        lp_accum__.add(sym41__);
        current_statement__ = 45;
        lp_accum__.add(2);
        {
          double y;
          
          current_statement__ = 47;
          lp_accum__.add(24);
        }
        {
          double y;
          
          current_statement__ = 50;
          lp_accum__.add(245);
        }
        {
          current_statement__ = 52;
          lp_accum__.add(2);
        }
        int sym121__;
        for (size_t sym120__ = 1; sym120__ <= 1; ++sym120__) {
          {
            current_statement__ = 54;
            lp_accum__.add(2);
            break;
          }}
        current_statement__ = 57;
        while (576) {
          break;
        }
        int sym124__;
        for (size_t sym123__ = 1; sym123__ <= 1; ++sym123__) {
          {
            current_statement__ = 54;
            lp_accum__.add(2);
            sym124__ = 24;
            break;
          }}
        while (sym124__) {
          {
            break;
          }
          for (size_t sym123__ = 1; sym123__ <= 1; ++sym123__) {
            {
              current_statement__ = 54;
              lp_accum__.add(2);
              sym124__ = 24;
              break;
            }}
        }
        current_statement__ = 60;
        for (size_t i = 31; i <= 225; ++i) { {
                                               continue;
                                             }}
        current_statement__ = 62;
        for (size_t i = 31; i <= 225; ++i) { {
                                               break;
                                             }}
        int sym127__;
        for (size_t sym126__ = 1; sym126__ <= 1; ++sym126__) {
          {
            current_statement__ = 54;
            lp_accum__.add(2);
            sym127__ = 24;
            break;
          }}
        for (size_t i = sym127__; i <= 225; ++i) { {
                                                     continue;
                                                   }}
        int sym130__;
        for (size_t sym129__ = 1; sym129__ <= 1; ++sym129__) {
          {
            current_statement__ = 54;
            lp_accum__.add(2);
            sym130__ = 24;
            break;
          }}
        for (size_t i = sym130__; i <= 225; ++i) { {
                                                     break;
                                                   }}
        int sym133__;
        for (size_t sym132__ = 1; sym132__ <= 1; ++sym132__) {
          {
            current_statement__ = 54;
            lp_accum__.add(2);
            break;
          }}
        {
          current_statement__ = 65;
          lp_accum__.add(1);
          current_statement__ = 66;
          lp_accum__.add(24);
        }
        {
          {
            current_statement__ = 68;
            lp_accum__.add(1);
          }
        }
        double temp;
        
        {
          current_statement__ = 72;
          if (pstream__) {
            stan_print(pstream__, "hello");
            stan_print(pstream__, "\n");
          }
        }
        double temp2;
        
        {
          {
            current_statement__ = 75;
            lp_accum__.add(4);
            current_statement__ = 76;
            lp_accum__.add(6);
          }
        }
        {
          {
            current_statement__ = 75;
            lp_accum__.add(4);
            current_statement__ = 76;
            lp_accum__.add(6);
          }
        }
        double dataonlyvar;
        
        current_statement__ = 78;
        dataonlyvar = 3;
        current_statement__ = 79;
        lp_accum__.add(dataonlyvar);
        local_scalar_t__ paramvar;
        
        {
          current_statement__ = 81;
          paramvar = (in__.scalar() * 34);
        }
        current_statement__ = 83;
        lp_accum__.add(paramvar);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "optimizations_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      double sym33__;
      double sym32__;
      double sym31__;
      double sym30__;
      double sym29__;
      double sym28__;
      double sym27__;
      double sym26__;
      Eigen::Matrix<double, -1, 1> sym25__;
      double sym24__;
      int sym23__;
      int sym22__;
      double sym21__;
      double theta;
      
      current_statement__ = 2;
      theta = in__.scalar();
      double phi;
      
      current_statement__ = 3;
      phi = in__.scalar();
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      
      current_statement__ = 4;
      x_matrix = in__.matrix(3, 2);
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      
      current_statement__ = 5;
      x_vector = in__.vector(2);
      Eigen::Matrix<double, -1, 1> x_cov_sym2__;
      x_cov_sym2__ = Eigen::Matrix<double, -1, 1>(3);
      
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      
      current_statement__ = 6;
      x_cov = cov_matrix_constrain(in__.vector(3), 2);
      vars__.push_back(in__.scalar());
      vars__.push_back(in__.scalar());
      {
        {
          {
            {
              vars__.push_back(in__.matrix(3, 2));
            }
          }
          {
            {
              vars__.push_back(in__.matrix(3, 2));
            }
          }
        }
      }
      {
        {
          {
            {
              vars__.push_back(in__.matrix(3, 2));
            }
          }
          {
            {
              vars__.push_back(in__.matrix(3, 2));
            }
          }
        }
      }
      {
        {
          {
            {
              vars__.push_back(in__.matrix(3, 2));
            }
          }
          {
            {
              vars__.push_back(in__.matrix(3, 2));
            }
          }
        }
      }
      {
        {
          vars__.push_back(in__.vector(2));
        }
      }
      {
        {
          vars__.push_back(in__.vector(2));
        }
      }
      {
        {
          {
            {
              vars__.push_back(cov_matrix_constrain(in__.vector(3), 2)[(1 - 1)][(1 - 1)]);
            }
          }
          {
            {
              vars__.push_back(cov_matrix_constrain(in__.vector(3), 2)[(1 - 1)][(2 - 1)]);
            }
          }
        }
      }
      {
        {
          {
            {
              vars__.push_back(cov_matrix_constrain(in__.vector(3), 2)[(2 - 1)][(1 - 1)]);
            }
          }
          {
            {
              vars__.push_back(cov_matrix_constrain(in__.vector(3), 2)[(2 - 1)][(2 - 1)]);
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      double sym20__;
      double sym19__;
      double sym18__;
      double sym17__;
      double sym16__;
      double sym15__;
      Eigen::Matrix<double, -1, -1> sym14__;
      double sym13__;
      double sym12__;
      double sym11__;
      int sym10__;
      int sym9__;
      double sym8__;
      double theta;
      
      double phi;
      
      Eigen::Matrix<double, -1, -1> x_matrix;
      x_matrix = Eigen::Matrix<double, -1, -1>(3, 2);
      
      {
        {
          {
            {
              current_statement__ = 4;
              assign(x_matrix, cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_matrix")[(pos__ - 1)], "assigning variable x_matrix");
              current_statement__ = 4;
              pos__ = (pos__ + 1);
            }
          }
          {
            {
              current_statement__ = 4;
              assign(x_matrix, cons_list(index_uni(1), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_matrix")[(pos__ - 1)], "assigning variable x_matrix");
              current_statement__ = 4;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      {
        {
          {
            {
              current_statement__ = 4;
              assign(x_matrix, cons_list(index_uni(2), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_matrix")[(pos__ - 1)], "assigning variable x_matrix");
              current_statement__ = 4;
              pos__ = (pos__ + 1);
            }
          }
          {
            {
              current_statement__ = 4;
              assign(x_matrix, cons_list(index_uni(2), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_matrix")[(pos__ - 1)], "assigning variable x_matrix");
              current_statement__ = 4;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      {
        {
          {
            {
              current_statement__ = 4;
              assign(x_matrix, cons_list(index_uni(3), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_matrix")[(pos__ - 1)], "assigning variable x_matrix");
              current_statement__ = 4;
              pos__ = (pos__ + 1);
            }
          }
          {
            {
              current_statement__ = 4;
              assign(x_matrix, cons_list(index_uni(3), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_matrix")[(pos__ - 1)], "assigning variable x_matrix");
              current_statement__ = 4;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      Eigen::Matrix<double, -1, 1> x_vector;
      x_vector = Eigen::Matrix<double, -1, 1>(2);
      
      {
        {
          current_statement__ = 5;
          x_vector[(1 - 1)] = context__.vals_r("x_vector")[(pos__ - 1)];
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      {
        {
          current_statement__ = 5;
          x_vector[(2 - 1)] = context__.vals_r("x_vector")[(pos__ - 1)];
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, -1> x_cov;
      x_cov = Eigen::Matrix<double, -1, -1>(2, 2);
      
      {
        {
          {
            {
              current_statement__ = 6;
              assign(x_cov, cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_cov")[(pos__ - 1)], "assigning variable x_cov");
              current_statement__ = 6;
              pos__ = (pos__ + 1);
            }
          }
          {
            {
              current_statement__ = 6;
              assign(x_cov, cons_list(index_uni(1), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_cov")[(pos__ - 1)], "assigning variable x_cov");
              current_statement__ = 6;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      {
        {
          {
            {
              current_statement__ = 6;
              assign(x_cov, cons_list(index_uni(2), cons_list(index_uni(1), nil_index_list())), context__.vals_r("x_cov")[(pos__ - 1)], "assigning variable x_cov");
              current_statement__ = 6;
              pos__ = (pos__ + 1);
            }
          }
          {
            {
              current_statement__ = 6;
              assign(x_cov, cons_list(index_uni(2), cons_list(index_uni(2), nil_index_list())), context__.vals_r("x_cov")[(pos__ - 1)], "assigning variable x_cov");
              current_statement__ = 6;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 6;
      x_cov = cov_matrix_free(x_cov);
      vars__.push_back(context__.vals_r("theta"));
      vars__.push_back(context__.vals_r("phi"));
      {
        {
          {
            {
              vars__.push_back(rvalue(x_matrix, cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
            }
          }
          {
            {
              vars__.push_back(rvalue(x_matrix, cons_list(index_uni(1), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
            }
          }
        }
      }
      {
        {
          {
            {
              vars__.push_back(rvalue(x_matrix, cons_list(index_uni(2), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
            }
          }
          {
            {
              vars__.push_back(rvalue(x_matrix, cons_list(index_uni(2), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
            }
          }
        }
      }
      {
        {
          {
            {
              vars__.push_back(rvalue(x_matrix, cons_list(index_uni(3), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
            }
          }
          {
            {
              vars__.push_back(rvalue(x_matrix, cons_list(index_uni(3), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
            }
          }
        }
      }
      {
        {
          vars__.push_back(x_vector[(1 - 1)]);
        }
      }
      {
        {
          vars__.push_back(x_vector[(2 - 1)]);
        }
      }
      {
        {
          {
            {
              vars__.push_back(rvalue(cov_matrix_free(cov_matrix_free(x_cov)), cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
            }
          }
          {
            {
              vars__.push_back(rvalue(cov_matrix_free(cov_matrix_free(x_cov)), cons_list(index_uni(1), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
            }
          }
        }
      }
      {
        {
          {
            {
              vars__.push_back(rvalue(cov_matrix_free(cov_matrix_free(x_cov)), cons_list(index_uni(2), cons_list(index_uni(1), nil_index_list())), "pretty printed e"));
            }
          }
          {
            {
              vars__.push_back(rvalue(cov_matrix_free(cov_matrix_free(x_cov)), cons_list(index_uni(2), cons_list(index_uni(2), nil_index_list())), "pretty printed e"));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("theta");
    names__.push_back("phi");
    names__.push_back("x_matrix");
    names__.push_back("x_vector");
    names__.push_back("x_cov");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "theta");
    param_names__.push_back(std::string() + "phi");
    for (size_t sym134__ = 1; sym134__ <= 2; ++sym134__) {
      {
        for (size_t sym135__ = 1; sym135__ <= 3; ++sym135__) {
          {
            param_names__.push_back(std::string() + "x_matrix" + '.' + std::to_string(sym135__) + '.' + std::to_string(sym134__));
          }}
      }}
    for (size_t sym134__ = 1; sym134__ <= 2; ++sym134__) {
      {
        param_names__.push_back(std::string() + "x_vector" + '.' + std::to_string(sym134__));
      }}
    for (size_t sym134__ = 1; sym134__ <= 2; ++sym134__) {
      {
        for (size_t sym135__ = 1; sym135__ <= 2; ++sym135__) {
          {
            param_names__.push_back(std::string() + "x_cov" + '.' + std::to_string(sym135__) + '.' + std::to_string(sym134__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "theta");
    param_names__.push_back(std::string() + "phi");
    for (size_t sym134__ = 1; sym134__ <= 2; ++sym134__) {
      {
        for (size_t sym135__ = 1; sym135__ <= 3; ++sym135__) {
          {
            param_names__.push_back(std::string() + "x_matrix" + '.' + std::to_string(sym135__) + '.' + std::to_string(sym134__));
          }}
      }}
    for (size_t sym134__ = 1; sym134__ <= 2; ++sym134__) {
      {
        param_names__.push_back(std::string() + "x_vector" + '.' + std::to_string(sym134__));
      }}
    for (size_t sym134__ = 1; sym134__ <= 3; ++sym134__) {
      {
        param_names__.push_back(std::string() + "x_cov" + '.' + std::to_string(sym134__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x_matrix\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_vector\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"x_cov\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef optimizations_model_namespace::optimizations_model stan_model;

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

