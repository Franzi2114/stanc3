  $ ../../../../../../install/default/bin/stanc --print-cpp complex_data.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace complex_data_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 23> locations_array__ =
{" (found before start of program)",
 " (in 'complex_data.stan', line 2, column 2 to column 8)",
 " (in 'complex_data.stan', line 3, column 2 to column 12)",
 " (in 'complex_data.stan', line 4, column 17 to column 18)",
 " (in 'complex_data.stan', line 4, column 2 to column 23)",
 " (in 'complex_data.stan', line 5, column 21 to column 22)",
 " (in 'complex_data.stan', line 5, column 2 to column 27)",
 " (in 'complex_data.stan', line 6, column 17 to column 18)",
 " (in 'complex_data.stan', line 6, column 19 to column 20)",
 " (in 'complex_data.stan', line 6, column 2 to column 25)",
 " (in 'complex_data.stan', line 8, column 2 to column 8)",
 " (in 'complex_data.stan', line 9, column 8 to column 9)",
 " (in 'complex_data.stan', line 9, column 2 to column 22)",
 " (in 'complex_data.stan', line 10, column 8 to column 9)",
 " (in 'complex_data.stan', line 10, column 26 to column 27)",
 " (in 'complex_data.stan', line 10, column 2 to column 32)",
 " (in 'complex_data.stan', line 11, column 8 to column 9)",
 " (in 'complex_data.stan', line 11, column 30 to column 31)",
 " (in 'complex_data.stan', line 11, column 2 to column 36)",
 " (in 'complex_data.stan', line 12, column 8 to column 9)",
 " (in 'complex_data.stan', line 12, column 26 to column 27)",
 " (in 'complex_data.stan', line 12, column 28 to column 29)",
 " (in 'complex_data.stan', line 12, column 2 to column 34)"};




class complex_data_model final : public model_base_crtp<complex_data_model> {

 private:
  int N;
  std::complex<double> z;
  Eigen::Matrix<std::complex<double>, -1, 1> z1__;
  Eigen::Matrix<std::complex<double>, 1, -1> z2__;
  Eigen::Matrix<std::complex<double>, -1, -1> z3__;
  int M;
  std::vector<std::complex<double>> z4;
  std::vector<Eigen::Matrix<std::complex<double>, -1, 1>> z5;
  std::vector<Eigen::Matrix<std::complex<double>, 1, -1>> z6;
  std::vector<Eigen::Matrix<std::complex<double>, -1, -1>> z7;
  Eigen::Map<Eigen::Matrix<std::complex<double>, -1, 1>> z1{nullptr, 0};
  Eigen::Map<Eigen::Matrix<std::complex<double>, 1, -1>> z2{nullptr, 0};
  Eigen::Map<Eigen::Matrix<std::complex<double>, -1, -1>> z3{nullptr, 0, 0};

 public:
  ~complex_data_model() { }

  inline std::string model_name() const final { return "complex_data_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }


  complex_data_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ =
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_data_model_namespace::complex_data_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();


      current_statement__ = 1;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 2;
      context__.validate_dims("data initialization","z","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      z =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());


      current_statement__ = 2;
      z = context__.vals_c("z")[(1 - 1)];
      current_statement__ = 3;
      stan::math::validate_non_negative_index("z1", "N", N);
      current_statement__ = 4;
      context__.validate_dims("data initialization","z1","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(2)});
      z1__ =
        Eigen::Matrix<std::complex<double>, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&z1) Eigen::Map<Eigen::Matrix<std::complex<double>, -1, 1>>(z1__.data(), N);


      {
        std::vector<std::complex<local_scalar_t__>> z1_flat__;
        current_statement__ = 4;
        z1_flat__ = context__.vals_c("z1");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(z1, z1_flat__[(pos__ - 1)],
            "assigning variable z1", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 5;
      stan::math::validate_non_negative_index("z2", "N", N);
      current_statement__ = 6;
      context__.validate_dims("data initialization","z2","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(2)});
      z2__ =
        Eigen::Matrix<std::complex<double>, 1, -1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&z2) Eigen::Map<Eigen::Matrix<std::complex<double>, 1, -1>>(z2__.data(), N);


      {
        std::vector<std::complex<local_scalar_t__>> z2_flat__;
        current_statement__ = 6;
        z2_flat__ = context__.vals_c("z2");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(z2, z2_flat__[(pos__ - 1)],
            "assigning variable z2", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 7;
      stan::math::validate_non_negative_index("z3", "N", N);
      current_statement__ = 8;
      stan::math::validate_non_negative_index("z3", "N", N);
      current_statement__ = 9;
      context__.validate_dims("data initialization","z3","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(N), static_cast<size_t>(2)});
      z3__ =
        Eigen::Matrix<std::complex<double>, -1, -1>::Constant(N, N,
          std::numeric_limits<double>::quiet_NaN());
      new (&z3) Eigen::Map<Eigen::Matrix<std::complex<double>, -1, -1>>(z3__.data(), N, N);


      {
        std::vector<std::complex<local_scalar_t__>> z3_flat__;
        current_statement__ = 9;
        z3_flat__ = context__.vals_c("z3");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 9;
            stan::model::assign(z3, z3_flat__[(pos__ - 1)],
              "assigning variable z3", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 9;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 10;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();


      current_statement__ = 10;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 11;
      stan::math::validate_non_negative_index("z4", "M", M);
      current_statement__ = 12;
      context__.validate_dims("data initialization","z4","double",
           std::vector<size_t>{static_cast<size_t>(M),
            static_cast<size_t>(2)});
      z4 =
        std::vector<std::complex<double>>(M,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));


      {
        std::vector<std::complex<local_scalar_t__>> z4_flat__;
        current_statement__ = 12;
        z4_flat__ = context__.vals_c("z4");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(z4, z4_flat__[(pos__ - 1)],
            "assigning variable z4", stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 13;
      stan::math::validate_non_negative_index("z5", "M", M);
      current_statement__ = 14;
      stan::math::validate_non_negative_index("z5", "N", N);
      current_statement__ = 15;
      context__.validate_dims("data initialization","z5","double",
           std::vector<size_t>{static_cast<size_t>(M),
            static_cast<size_t>(N), static_cast<size_t>(2)});
      z5 =
        std::vector<Eigen::Matrix<std::complex<double>, -1, 1>>(M,
          Eigen::Matrix<std::complex<double>, -1, 1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));


      {
        std::vector<std::complex<local_scalar_t__>> z5_flat__;
        current_statement__ = 15;
        z5_flat__ = context__.vals_c("z5");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 15;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 15;
            stan::model::assign(z5, z5_flat__[(pos__ - 1)],
              "assigning variable z5", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 15;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 16;
      stan::math::validate_non_negative_index("z6", "M", M);
      current_statement__ = 17;
      stan::math::validate_non_negative_index("z6", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization","z6","double",
           std::vector<size_t>{static_cast<size_t>(M),
            static_cast<size_t>(N), static_cast<size_t>(2)});
      z6 =
        std::vector<Eigen::Matrix<std::complex<double>, 1, -1>>(M,
          Eigen::Matrix<std::complex<double>, 1, -1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));


      {
        std::vector<std::complex<local_scalar_t__>> z6_flat__;
        current_statement__ = 18;
        z6_flat__ = context__.vals_c("z6");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 18;
            stan::model::assign(z6, z6_flat__[(pos__ - 1)],
              "assigning variable z6", stan::model::index_uni(sym2__),
                                         stan::model::index_uni(sym1__));
            current_statement__ = 18;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 19;
      stan::math::validate_non_negative_index("z7", "M", M);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("z7", "N", N);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("z7", "N", N);
      current_statement__ = 22;
      context__.validate_dims("data initialization","z7","double",
           std::vector<size_t>{static_cast<size_t>(M),
            static_cast<size_t>(N), static_cast<size_t>(N),
            static_cast<size_t>(2)});
      z7 =
        std::vector<Eigen::Matrix<std::complex<double>, -1, -1>>(M,
          Eigen::Matrix<std::complex<double>, -1, -1>::Constant(N, N,
            std::numeric_limits<double>::quiet_NaN()));


      {
        std::vector<std::complex<local_scalar_t__>> z7_flat__;
        current_statement__ = 22;
        z7_flat__ = context__.vals_c("z7");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 22;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 22;
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              current_statement__ = 22;
              stan::model::assign(z7, z7_flat__[(pos__ - 1)],
                "assigning variable z7", stan::model::index_uni(sym3__),
                                           stan::model::index_uni(sym2__),
                                           stan::model::index_uni(sym1__));
              current_statement__ = 22;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;

  }

  template <bool propto__, bool jacobian__ , typename VecR, typename VecI,
  stan::require_vector_like_t<VecR>* = nullptr,
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_data_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning

    try {

    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl()

  template <typename RNG, typename VecR, typename VecI, typename VecVar,
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr,
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_data_model_namespace::write_array";
    (void) function__;  // suppress unused var warning

    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl()

  template <typename VecVar, typename VecI,
  stan::require_std_vector_t<VecVar>* = nullptr,
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());

    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl()

  inline void get_param_names(std::vector<std::string>& names__) const {

    names__ = std::vector<std::string>{};

    } // get_param_names()

  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {

    dimss__ = std::vector<std::vector<size_t>>{};

    } // get_dims()

  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {


    if (emit_transformed_parameters__) {

    }

    if (emit_generated_quantities__) {

    }

    } // constrained_param_names()

  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {


    if (emit_transformed_parameters__) {

    }

    if (emit_generated_quantities__) {

    }

    } // unconstrained_param_names()

  inline std::string get_constrained_sizedtypes() const {

    return std::string("[]");

    } // get_constrained_sizedtypes()

  inline std::string get_unconstrained_sizedtypes() const {

    return std::string("[]");

    } // get_unconstrained_sizedtypes()


    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);

     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits()

};
}
using stan_model = complex_data_model_namespace::complex_data_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return complex_data_model_namespace::profiles__;
}

#endif



  $ ../../../../../../install/default/bin/stanc --print-cpp complex_scalar.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace complex_scalar_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 427> locations_array__ =
{" (found before start of program)",
 " (in 'complex_scalar.stan', line 111, column 2 to column 11)",
 " (in 'complex_scalar.stan', line 112, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 113, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 114, column 2 to column 41)",
 " (in 'complex_scalar.stan', line 117, column 2 to column 18)",
 " (in 'complex_scalar.stan', line 118, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 119, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 120, column 2 to column 42)",
 " (in 'complex_scalar.stan', line 122, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 123, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 124, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 125, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 126, column 2 to column 17)",
 " (in 'complex_scalar.stan', line 127, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 128, column 2 to column 25)",
 " (in 'complex_scalar.stan', line 129, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 130, column 2 to column 25)",
 " (in 'complex_scalar.stan', line 131, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 132, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 133, column 2 to column 29)",
 " (in 'complex_scalar.stan', line 134, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 135, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 136, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 137, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 138, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 140, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 141, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 142, column 2 to column 55)",
 " (in 'complex_scalar.stan', line 143, column 2 to column 43)",
 " (in 'complex_scalar.stan', line 145, column 2 to column 43)",
 " (in 'complex_scalar.stan', line 146, column 2 to column 43)",
 " (in 'complex_scalar.stan', line 147, column 2 to line 148, column 78)",
 " (in 'complex_scalar.stan', line 149, column 2 to column 47)",
 " (in 'complex_scalar.stan', line 150, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 151, column 2 to column 44)",
 " (in 'complex_scalar.stan', line 152, column 2 to column 63)",
 " (in 'complex_scalar.stan', line 156, column 6 to column 59)",
 " (in 'complex_scalar.stan', line 155, column 24 to line 157, column 5)",
 " (in 'complex_scalar.stan', line 155, column 4 to line 157, column 5)",
 " (in 'complex_scalar.stan', line 154, column 22 to line 158, column 3)",
 " (in 'complex_scalar.stan', line 154, column 2 to line 158, column 3)",
 " (in 'complex_scalar.stan', line 160, column 2 to line 164, column 3)",
 " (in 'complex_scalar.stan', line 161, column 4 to line 163, column 5)",
 " (in 'complex_scalar.stan', line 162, column 6 to column 24)",
 " (in 'complex_scalar.stan', line 166, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 167, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 168, column 2 to column 39)",
 " (in 'complex_scalar.stan', line 169, column 2 to column 39)",
 " (in 'complex_scalar.stan', line 170, column 2 to column 45)",
 " (in 'complex_scalar.stan', line 171, column 2 to column 45)",
 " (in 'complex_scalar.stan', line 173, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 174, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 175, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 176, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 177, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 178, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 179, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 180, column 2 to column 44)",
 " (in 'complex_scalar.stan', line 181, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 182, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 183, column 2 to column 51)",
 " (in 'complex_scalar.stan', line 193, column 2 to column 15)",
 " (in 'complex_scalar.stan', line 194, column 2 to column 18)",
 " (in 'complex_scalar.stan', line 195, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 196, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 197, column 2 to column 42)",
 " (in 'complex_scalar.stan', line 199, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 200, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 201, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 202, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 203, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 204, column 2 to column 17)",
 " (in 'complex_scalar.stan', line 205, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 206, column 2 to column 25)",
 " (in 'complex_scalar.stan', line 207, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 208, column 2 to column 25)",
 " (in 'complex_scalar.stan', line 209, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 210, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 211, column 2 to column 29)",
 " (in 'complex_scalar.stan', line 212, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 213, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 214, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 215, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 216, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 218, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 219, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 220, column 2 to column 55)",
 " (in 'complex_scalar.stan', line 221, column 2 to column 43)",
 " (in 'complex_scalar.stan', line 223, column 2 to column 43)",
 " (in 'complex_scalar.stan', line 224, column 2 to column 43)",
 " (in 'complex_scalar.stan', line 225, column 2 to line 226, column 78)",
 " (in 'complex_scalar.stan', line 227, column 2 to column 47)",
 " (in 'complex_scalar.stan', line 228, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 229, column 2 to column 44)",
 " (in 'complex_scalar.stan', line 230, column 2 to column 63)",
 " (in 'complex_scalar.stan', line 234, column 6 to column 59)",
 " (in 'complex_scalar.stan', line 233, column 24 to line 235, column 5)",
 " (in 'complex_scalar.stan', line 233, column 4 to line 235, column 5)",
 " (in 'complex_scalar.stan', line 232, column 22 to line 236, column 3)",
 " (in 'complex_scalar.stan', line 232, column 2 to line 236, column 3)",
 " (in 'complex_scalar.stan', line 238, column 2 to line 242, column 3)",
 " (in 'complex_scalar.stan', line 239, column 4 to line 241, column 5)",
 " (in 'complex_scalar.stan', line 240, column 6 to column 24)",
 " (in 'complex_scalar.stan', line 244, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 245, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 246, column 2 to column 39)",
 " (in 'complex_scalar.stan', line 247, column 2 to column 39)",
 " (in 'complex_scalar.stan', line 248, column 2 to column 45)",
 " (in 'complex_scalar.stan', line 249, column 2 to column 45)",
 " (in 'complex_scalar.stan', line 251, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 252, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 253, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 254, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 255, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 256, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 257, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 258, column 2 to column 44)",
 " (in 'complex_scalar.stan', line 259, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 260, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 261, column 2 to column 51)",
 " (in 'complex_scalar.stan', line 263, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 264, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 265, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 266, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 268, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 269, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 270, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 271, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 272, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 273, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 274, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 275, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 276, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 277, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 278, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 279, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 281, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 282, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 283, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 284, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 285, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 286, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 287, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 288, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 289, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 290, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 291, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 292, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 294, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 295, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 296, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 297, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 298, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 299, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 300, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 301, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 302, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 303, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 304, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 305, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 307, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 308, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 309, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 310, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 311, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 312, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 313, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 314, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 315, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 316, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 317, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 318, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 320, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 321, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 322, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 323, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 324, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 325, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 326, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 327, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 328, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 329, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 330, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 331, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 333, column 2 to column 18)",
 " (in 'complex_scalar.stan', line 334, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 335, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 336, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 337, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 338, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 339, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 341, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 342, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 343, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 345, column 2 to column 18)",
 " (in 'complex_scalar.stan', line 346, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 347, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 348, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 349, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 350, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 351, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 352, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 353, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 354, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 356, column 2 to column 18)",
 " (in 'complex_scalar.stan', line 357, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 358, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 359, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 360, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 361, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 362, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 363, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 364, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 365, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 367, column 2 to column 16)",
 " (in 'complex_scalar.stan', line 368, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 369, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 371, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 372, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 373, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 375, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 376, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 377, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 379, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 380, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 381, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 383, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 384, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 385, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 387, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 388, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 389, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 391, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 392, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 393, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 395, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 396, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 397, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 399, column 2 to column 22)",
 " (in 'complex_scalar.stan', line 400, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 401, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 403, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 404, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 405, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 407, column 2 to column 18)",
 " (in 'complex_scalar.stan', line 408, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 409, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 410, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 411, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 412, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 414, column 2 to column 22)",
 " (in 'complex_scalar.stan', line 415, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 416, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 418, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 419, column 2 to column 29)",
 " (in 'complex_scalar.stan', line 420, column 2 to column 29)",
 " (in 'complex_scalar.stan', line 422, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 423, column 2 to column 29)",
 " (in 'complex_scalar.stan', line 424, column 2 to column 29)",
 " (in 'complex_scalar.stan', line 426, column 2 to column 47)",
 " (in 'complex_scalar.stan', line 427, column 2 to column 46)",
 " (in 'complex_scalar.stan', line 428, column 2 to column 46)",
 " (in 'complex_scalar.stan', line 430, column 2 to column 22)",
 " (in 'complex_scalar.stan', line 431, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 432, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 434, column 2 to column 24)",
 " (in 'complex_scalar.stan', line 435, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 436, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 438, column 2 to column 17)",
 " (in 'complex_scalar.stan', line 439, column 2 to column 25)",
 " (in 'complex_scalar.stan', line 440, column 2 to column 25)",
 " (in 'complex_scalar.stan', line 442, column 2 to column 40)",
 " (in 'complex_scalar.stan', line 443, column 2 to column 39)",
 " (in 'complex_scalar.stan', line 444, column 2 to column 39)",
 " (in 'complex_scalar.stan', line 446, column 2 to column 33)",
 " (in 'complex_scalar.stan', line 447, column 2 to column 33)",
 " (in 'complex_scalar.stan', line 448, column 2 to column 33)",
 " (in 'complex_scalar.stan', line 449, column 2 to column 33)",
 " (in 'complex_scalar.stan', line 450, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 451, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 452, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 454, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 455, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 456, column 2 to column 25)",
 " (in 'complex_scalar.stan', line 457, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 458, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 459, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 460, column 2 to column 33)",
 " (in 'complex_scalar.stan', line 461, column 2 to column 41)",
 " (in 'complex_scalar.stan', line 462, column 2 to column 41)",
 " (in 'complex_scalar.stan', line 463, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 464, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 465, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 466, column 2 to column 33)",
 " (in 'complex_scalar.stan', line 467, column 2 to column 41)",
 " (in 'complex_scalar.stan', line 468, column 2 to column 41)",
 " (in 'complex_scalar.stan', line 470, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 471, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 472, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 474, column 2 to column 47)",
 " (in 'complex_scalar.stan', line 475, column 2 to column 46)",
 " (in 'complex_scalar.stan', line 476, column 2 to column 46)",
 " (in 'complex_scalar.stan', line 478, column 2 to column 22)",
 " (in 'complex_scalar.stan', line 479, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 480, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 482, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 483, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 484, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 486, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 487, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 488, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 490, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 491, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 492, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 494, column 2 to column 47)",
 " (in 'complex_scalar.stan', line 495, column 2 to column 46)",
 " (in 'complex_scalar.stan', line 496, column 2 to column 46)",
 " (in 'complex_scalar.stan', line 498, column 2 to column 22)",
 " (in 'complex_scalar.stan', line 499, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 500, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 502, column 2 to column 23)",
 " (in 'complex_scalar.stan', line 503, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 504, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 506, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 507, column 2 to column 38)",
 " (in 'complex_scalar.stan', line 508, column 2 to column 38)",
 " (in 'complex_scalar.stan', line 509, column 2 to column 38)",
 " (in 'complex_scalar.stan', line 510, column 2 to column 38)",
 " (in 'complex_scalar.stan', line 511, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 512, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 513, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 514, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 515, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 516, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 517, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 520, column 2 to column 25)",
 " (in 'complex_scalar.stan', line 521, column 2 to column 15)",
 " (in 'complex_scalar.stan', line 522, column 2 to column 72)",
 " (in 'complex_scalar.stan', line 523, column 2 to column 33)",
 " (in 'complex_scalar.stan', line 186, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 187, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 188, column 2 to column 41)",
 " (in 'complex_scalar.stan', line 190, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 38, column 2 to column 10)",
 " (in 'complex_scalar.stan', line 39, column 2 to column 11)",
 " (in 'complex_scalar.stan', line 40, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 41, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 42, column 2 to column 41)",
 " (in 'complex_scalar.stan', line 45, column 2 to column 15)",
 " (in 'complex_scalar.stan', line 46, column 2 to column 18)",
 " (in 'complex_scalar.stan', line 47, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 48, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 49, column 2 to column 42)",
 " (in 'complex_scalar.stan', line 51, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 52, column 2 to column 20)",
 " (in 'complex_scalar.stan', line 53, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 54, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 55, column 2 to column 17)",
 " (in 'complex_scalar.stan', line 56, column 2 to column 19)",
 " (in 'complex_scalar.stan', line 57, column 2 to column 25)",
 " (in 'complex_scalar.stan', line 58, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 59, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 60, column 2 to column 29)",
 " (in 'complex_scalar.stan', line 61, column 2 to column 31)",
 " (in 'complex_scalar.stan', line 62, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 63, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 64, column 2 to column 34)",
 " (in 'complex_scalar.stan', line 65, column 2 to column 36)",
 " (in 'complex_scalar.stan', line 67, column 2 to column 37)",
 " (in 'complex_scalar.stan', line 68, column 2 to column 55)",
 " (in 'complex_scalar.stan', line 69, column 2 to column 43)",
 " (in 'complex_scalar.stan', line 71, column 2 to column 43)",
 " (in 'complex_scalar.stan', line 72, column 2 to line 73, column 78)",
 " (in 'complex_scalar.stan', line 74, column 2 to column 47)",
 " (in 'complex_scalar.stan', line 75, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 76, column 2 to column 44)",
 " (in 'complex_scalar.stan', line 77, column 2 to column 63)",
 " (in 'complex_scalar.stan', line 81, column 6 to column 59)",
 " (in 'complex_scalar.stan', line 80, column 24 to line 82, column 5)",
 " (in 'complex_scalar.stan', line 80, column 4 to line 82, column 5)",
 " (in 'complex_scalar.stan', line 79, column 22 to line 83, column 3)",
 " (in 'complex_scalar.stan', line 79, column 2 to line 83, column 3)",
 " (in 'complex_scalar.stan', line 85, column 2 to line 89, column 3)",
 " (in 'complex_scalar.stan', line 86, column 4 to line 88, column 5)",
 " (in 'complex_scalar.stan', line 87, column 6 to column 24)",
 " (in 'complex_scalar.stan', line 91, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 92, column 2 to column 30)",
 " (in 'complex_scalar.stan', line 93, column 2 to column 39)",
 " (in 'complex_scalar.stan', line 94, column 2 to column 39)",
 " (in 'complex_scalar.stan', line 95, column 2 to column 45)",
 " (in 'complex_scalar.stan', line 96, column 2 to column 45)",
 " (in 'complex_scalar.stan', line 98, column 2 to column 21)",
 " (in 'complex_scalar.stan', line 99, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 100, column 2 to column 26)",
 " (in 'complex_scalar.stan', line 101, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 102, column 2 to column 28)",
 " (in 'complex_scalar.stan', line 103, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 104, column 2 to column 32)",
 " (in 'complex_scalar.stan', line 105, column 2 to column 44)",
 " (in 'complex_scalar.stan', line 106, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 107, column 2 to column 35)",
 " (in 'complex_scalar.stan', line 108, column 2 to column 51)",
 " (in 'complex_scalar.stan', line 265, column 8 to column 9)",
 " (in 'complex_scalar.stan', line 266, column 8 to column 9)",
 " (in 'complex_scalar.stan', line 3, column 4 to column 24)",
 " (in 'complex_scalar.stan', line 2, column 16 to line 4, column 3)",
 " (in 'complex_scalar.stan', line 6, column 4 to column 15)",
 " (in 'complex_scalar.stan', line 5, column 23 to line 7, column 3)",
 " (in 'complex_scalar.stan', line 9, column 4 to column 25)",
 " (in 'complex_scalar.stan', line 8, column 23 to line 10, column 3)",
 " (in 'complex_scalar.stan', line 12, column 4 to column 13)",
 " (in 'complex_scalar.stan', line 11, column 26 to line 13, column 3)",
 " (in 'complex_scalar.stan', line 15, column 4 to column 40)",
 " (in 'complex_scalar.stan', line 14, column 25 to line 16, column 3)",
 " (in 'complex_scalar.stan', line 18, column 4 to column 15)",
 " (in 'complex_scalar.stan', line 17, column 31 to line 19, column 3)",
 " (in 'complex_scalar.stan', line 21, column 4 to column 45)",
 " (in 'complex_scalar.stan', line 20, column 31 to line 22, column 3)",
 " (in 'complex_scalar.stan', line 24, column 4 to column 13)",
 " (in 'complex_scalar.stan', line 23, column 42 to line 25, column 3)",
 " (in 'complex_scalar.stan', line 27, column 4 to column 15)",
 " (in 'complex_scalar.stan', line 26, column 32 to line 28, column 3)",
 " (in 'complex_scalar.stan', line 30, column 4 to line 31, column 59)",
 " (in 'complex_scalar.stan', line 29, column 32 to line 32, column 3)",
 " (in 'complex_scalar.stan', line 34, column 4 to column 13)",
 " (in 'complex_scalar.stan', line 33, column 45 to line 35, column 3)"};

struct foo8_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const std::vector<std::vector<std::complex<T0__>>>& z,
             std::ostream* pstream__) const;
};
struct foo1_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const std::complex<T0__>& z, std::ostream* pstream__) const;
};
struct foo4_functor__ {
  std::vector<std::complex<double>>
  operator()(std::ostream* pstream__) const;
};
struct foo6_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::vector<std::complex<stan::promote_args_t<T0__>>>
  operator()(const T0__& r, std::ostream* pstream__) const;
};
struct foo10_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
  operator()(const std::vector<std::vector<std::complex<T0__>>>& z,
             std::ostream* pstream__) const;
};
struct foo2_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::complex<stan::promote_args_t<T0__>>
  operator()(const T0__& r, std::ostream* pstream__) const;
};
struct foo9_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
  operator()(const T0__& r, std::ostream* pstream__) const;
};
struct foo3_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::complex<stan::promote_args_t<T0__>>
  operator()(const std::complex<T0__>& z, std::ostream* pstream__) const;
};
struct foo7_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::vector<std::complex<stan::promote_args_t<T0__>>>
  operator()(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__) const;
};
struct foo5_functor__ {
  template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__) const;
};
struct foo_functor__ {
  std::complex<double>
  operator()(std::ostream* pstream__) const;
};

std::complex<double> foo(std::ostream* pstream__) {
    using local_scalar_t__ = double;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 405;
      return stan::math::to_complex();
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  stan::promote_args_t<T0__>
  foo1(const std::complex<T0__>& z, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 407;
      return 1.0;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::complex<stan::promote_args_t<T0__>>
  foo2(const T0__& r, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 409;
      return stan::math::to_complex(r);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::complex<stan::promote_args_t<T0__>>
  foo3(const std::complex<T0__>& z, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 411;
      return z;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
std::vector<std::complex<double>> foo4(std::ostream* pstream__) {
    using local_scalar_t__ = double;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 413;
      return std::vector<std::complex<double>>{stan::math::to_complex(),
          stan::math::to_complex()};
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  stan::promote_args_t<T0__>
  foo5(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 415;
      return 1.0;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::vector<std::complex<stan::promote_args_t<T0__>>>
  foo6(const T0__& r, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 417;
      return std::vector<std::complex<local_scalar_t__>>{
          stan::math::to_complex(r), stan::math::to_complex(r, r)};
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::vector<std::complex<stan::promote_args_t<T0__>>>
  foo7(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 419;
      return z;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  stan::promote_args_t<T0__>
  foo8(const std::vector<std::vector<std::complex<T0__>>>& z,
       std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 421;
      return 1.0;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
  foo9(const T0__& r, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 423;
      return std::vector<std::vector<std::complex<local_scalar_t__>>>{
          std::vector<std::complex<local_scalar_t__>>{
          stan::math::to_complex(r), stan::math::to_complex(r),
          stan::math::to_complex(r)},
          std::vector<std::complex<local_scalar_t__>>{
          stan::math::to_complex(r), stan::math::to_complex(r),
          stan::math::to_complex(r)}};
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>* = nullptr>
  std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
  foo10(const std::vector<std::vector<std::complex<T0__>>>& z,
        std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0;
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 425;
      return z;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_stan_scalar_t<T0__>*>
stan::promote_args_t<T0__>
foo8_functor__::operator()(const std::vector<std::vector<std::complex<T0__>>>& z,
                           std::ostream* pstream__)  const
{
  return foo8(z, pstream__);
}

template <typename T0__, stan::require_stan_scalar_t<T0__>*>
stan::promote_args_t<T0__>
foo1_functor__::operator()(const std::complex<T0__>& z,
                           std::ostream* pstream__)  const
{
  return foo1(z, pstream__);
}

std::vector<std::complex<double>>
foo4_functor__::operator()(std::ostream* pstream__)  const
{
  return foo4(pstream__);
}

template <typename T0__, stan::require_stan_scalar_t<T0__>*>
std::vector<std::complex<stan::promote_args_t<T0__>>>
foo6_functor__::operator()(const T0__& r, std::ostream* pstream__)  const
{
  return foo6(r, pstream__);
}

template <typename T0__, stan::require_stan_scalar_t<T0__>*>
std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
foo10_functor__::operator()(const std::vector<std::vector<std::complex<T0__>>>& z,
                            std::ostream* pstream__)  const
{
  return foo10(z, pstream__);
}

template <typename T0__, stan::require_stan_scalar_t<T0__>*>
std::complex<stan::promote_args_t<T0__>>
foo2_functor__::operator()(const T0__& r, std::ostream* pstream__)  const
{
  return foo2(r, pstream__);
}

template <typename T0__, stan::require_stan_scalar_t<T0__>*>
std::vector<std::vector<std::complex<stan::promote_args_t<T0__>>>>
foo9_functor__::operator()(const T0__& r, std::ostream* pstream__)  const
{
  return foo9(r, pstream__);
}

template <typename T0__, stan::require_stan_scalar_t<T0__>*>
std::complex<stan::promote_args_t<T0__>>
foo3_functor__::operator()(const std::complex<T0__>& z,
                           std::ostream* pstream__)  const
{
  return foo3(z, pstream__);
}

template <typename T0__, stan::require_stan_scalar_t<T0__>*>
std::vector<std::complex<stan::promote_args_t<T0__>>>
foo7_functor__::operator()(const std::vector<std::complex<T0__>>& z,
                           std::ostream* pstream__)  const
{
  return foo7(z, pstream__);
}

template <typename T0__, stan::require_stan_scalar_t<T0__>*>
stan::promote_args_t<T0__>
foo5_functor__::operator()(const std::vector<std::complex<T0__>>& z,
                           std::ostream* pstream__)  const
{
  return foo5(z, pstream__);
}

std::complex<double> foo_functor__::operator()(std::ostream* pstream__)
const
{
  return foo(pstream__);
}


class complex_scalar_model final : public model_base_crtp<complex_scalar_model> {

 private:
  int d_i;
  double d_r;
  std::complex<double> d_complex;
  std::vector<std::complex<double>> d_complex_array;
  std::vector<std::vector<std::complex<double>>> d_complex_array_2d;
  int td_i;
  double td_r;
  std::complex<double> td_complex;
  std::vector<std::complex<double>> td_complex_array;
  std::vector<std::vector<std::complex<double>>> td_complex_array_2d;


 public:
  ~complex_scalar_model() { }

  inline std::string model_name() const final { return "complex_scalar_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }


  complex_scalar_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ =
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_scalar_model_namespace::complex_scalar_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 344;
      context__.validate_dims("data initialization","d_i","int",
           std::vector<size_t>{});
      d_i = std::numeric_limits<int>::min();


      current_statement__ = 344;
      d_i = context__.vals_i("d_i")[(1 - 1)];
      current_statement__ = 345;
      context__.validate_dims("data initialization","d_r","double",
           std::vector<size_t>{});
      d_r = std::numeric_limits<double>::quiet_NaN();


      current_statement__ = 345;
      d_r = context__.vals_r("d_r")[(1 - 1)];
      current_statement__ = 346;
      context__.validate_dims("data initialization","d_complex","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      d_complex =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());


      current_statement__ = 346;
      d_complex = context__.vals_c("d_complex")[(1 - 1)];
      current_statement__ = 347;
      context__.validate_dims("data initialization","d_complex_array",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(2)});
      d_complex_array =
        std::vector<std::complex<double>>(2,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));


      {
        std::vector<std::complex<local_scalar_t__>> d_complex_array_flat__;
        current_statement__ = 347;
        d_complex_array_flat__ = context__.vals_c("d_complex_array");
        current_statement__ = 347;
        pos__ = 1;
        current_statement__ = 347;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 347;
          stan::model::assign(d_complex_array,
            d_complex_array_flat__[(pos__ - 1)],
            "assigning variable d_complex_array", stan::model::index_uni(sym1__));
          current_statement__ = 347;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 348;
      context__.validate_dims("data initialization","d_complex_array_2d",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(3), static_cast<size_t>(2)});
      d_complex_array_2d =
        std::vector<std::vector<std::complex<double>>>(2,
          std::vector<std::complex<double>>(3,
            std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<double>::quiet_NaN())));


      {
        std::vector<std::complex<local_scalar_t__>> d_complex_array_2d_flat__;
        current_statement__ = 348;
        d_complex_array_2d_flat__ = context__.vals_c("d_complex_array_2d");
        current_statement__ = 348;
        pos__ = 1;
        current_statement__ = 348;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 348;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 348;
            stan::model::assign(d_complex_array_2d,
              d_complex_array_2d_flat__[(pos__ - 1)],
              "assigning variable d_complex_array_2d", stan::model::index_uni(sym2__),
                                                         stan::model::index_uni(sym1__));
            current_statement__ = 348;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 349;
      td_i = std::numeric_limits<int>::min();


      current_statement__ = 349;
      td_i = 1;
      current_statement__ = 350;
      td_r = std::numeric_limits<double>::quiet_NaN();


      current_statement__ = 350;
      td_r = 1.1;
      current_statement__ = 351;
      td_complex =
        std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
          std::numeric_limits<double>::quiet_NaN());


      current_statement__ = 352;
      td_complex_array =
        std::vector<std::complex<double>>(2,
          std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
            std::numeric_limits<double>::quiet_NaN()));


      current_statement__ = 353;
      td_complex_array_2d =
        std::vector<std::vector<std::complex<double>>>(2,
          std::vector<std::complex<double>>(3,
            std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
              std::numeric_limits<double>::quiet_NaN())));


      current_statement__ = 354;
      td_complex = td_i;
      current_statement__ = 355;
      td_complex = td_r;
      current_statement__ = 356;
      td_complex = d_i;
      current_statement__ = 357;
      td_complex = d_r;
      current_statement__ = 358;
      td_complex = 1;
      current_statement__ = 359;
      td_complex = 1.1;
      current_statement__ = 360;
      td_complex = d_complex;
      current_statement__ = 361;
      td_complex = stan::model::rvalue(d_complex_array, "d_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 362;
      td_complex = stan::math::to_complex();
      current_statement__ = 363;
      td_complex = stan::math::to_complex(1);
      current_statement__ = 364;
      td_complex = stan::math::to_complex(1.2);
      current_statement__ = 365;
      td_complex = stan::math::to_complex(1, 2);
      current_statement__ = 366;
      td_complex = stan::math::to_complex(1.1, 2);
      current_statement__ = 367;
      td_complex = stan::math::to_complex(1, 2.2);
      current_statement__ = 368;
      td_complex = stan::math::to_complex(1.1, 2.2);
      current_statement__ = 369;
      stan::model::assign(td_complex_array, d_complex_array,
        "assigning variable td_complex_array");
      current_statement__ = 370;
      stan::model::assign(td_complex_array,
        std::vector<std::complex<double>>{td_complex,
        stan::math::to_complex(1, 0), stan::math::to_complex(2, 3)},
        "assigning variable td_complex_array");
      current_statement__ = 371;
      stan::model::assign(td_complex_array, stan::math::to_complex(5.1, 6),
        "assigning variable td_complex_array", stan::model::index_uni(1));
      current_statement__ = 372;
      stan::model::assign(td_complex_array_2d, d_complex_array_2d,
        "assigning variable td_complex_array_2d");
      current_statement__ = 373;
      stan::model::assign(td_complex_array_2d,
        std::vector<std::vector<std::complex<double>>>{
        std::vector<std::complex<double>>{stan::math::to_complex(1, 0),
        td_complex, stan::math::to_complex(3, 0)},
        std::vector<std::complex<double>>{stan::math::to_complex(),
        stan::math::to_complex(1.1), stan::math::to_complex(1, 2.1)}},
        "assigning variable td_complex_array_2d");
      current_statement__ = 374;
      stan::model::assign(td_complex_array_2d, stan::math::to_complex(1, 2),
        "assigning variable td_complex_array_2d", stan::model::index_uni(1),
                                                    stan::model::index_uni(1));
      current_statement__ = 375;
      stan::model::assign(td_complex_array_2d, 1,
        "assigning variable td_complex_array_2d", stan::model::index_uni(1),
                                                    stan::model::index_uni(1));
      current_statement__ = 376;
      stan::model::assign(td_complex_array_2d, td_complex_array,
        "assigning variable td_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 377;
      stan::model::assign(td_complex_array_2d,
        std::vector<std::complex<double>>{td_complex,
        stan::math::to_complex(1, 2), stan::math::to_complex(2.4, 0)},
        "assigning variable td_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 382;
      for (int td_j = 1; td_j <= 2; ++td_j) {
        current_statement__ = 380;
        for (int td_k = 1; td_k <= 3; ++td_k) {
          current_statement__ = 378;
          stan::model::assign(td_complex_array_2d,
            stan::math::to_complex(1, 2.2),
            "assigning variable td_complex_array_2d", stan::model::index_uni(td_j),
                                                        stan::model::index_uni(td_k));
        }
      }
      current_statement__ = 383;
      for (int sym1__ = 1; sym1__ <= stan::math::size(td_complex_array_2d);
           ++sym1__) {
        {
          std::vector<std::complex<double>> td_j;
          current_statement__ = 383;
          stan::model::assign(td_j, td_complex_array_2d[(sym1__ - 1)],
            "assigning variable td_j");
          current_statement__ = 384;
          for (int sym1__ = 1; sym1__ <= stan::math::size(td_j); ++sym1__) {
            {
              std::complex<double> td_k;
              current_statement__ = 384;
              td_k = td_j[(sym1__ - 1)];
              current_statement__ = 385;
              td_complex = td_k;
            }
          }
        }
      }
      current_statement__ = 386;
      td_r = stan::math::get_real(td_complex);
      current_statement__ = 387;
      td_r = stan::math::get_imag(td_complex);
      current_statement__ = 388;
      td_r = stan::math::get_real(
               stan::model::rvalue(td_complex_array, "td_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 389;
      td_r = stan::math::get_imag(
               stan::model::rvalue(td_complex_array, "td_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 390;
      td_r = stan::math::get_real(
               stan::model::rvalue(td_complex_array_2d,
                 "td_complex_array_2d",
                 stan::model::index_uni(1), stan::model::index_uni(1)));
      current_statement__ = 391;
      td_r = stan::math::get_imag(
               stan::model::rvalue(td_complex_array_2d,
                 "td_complex_array_2d",
                 stan::model::index_uni(1), stan::model::index_uni(1)));
      current_statement__ = 392;
      td_complex = foo(pstream__);
      current_statement__ = 393;
      td_r = foo1(td_complex, pstream__);
      current_statement__ = 394;
      td_complex = foo2(td_r, pstream__);
      current_statement__ = 395;
      td_complex = foo3(td_complex, pstream__);
      current_statement__ = 396;
      stan::model::assign(td_complex_array, foo4(pstream__),
        "assigning variable td_complex_array");
      current_statement__ = 397;
      td_r = foo5(td_complex_array, pstream__);
      current_statement__ = 398;
      stan::model::assign(td_complex_array, foo6(td_r, pstream__),
        "assigning variable td_complex_array");
      current_statement__ = 399;
      stan::model::assign(td_complex_array,
        foo7(stan::model::deep_copy(td_complex_array), pstream__),
        "assigning variable td_complex_array");
      current_statement__ = 400;
      td_r = foo8(td_complex_array_2d, pstream__);
      current_statement__ = 401;
      stan::model::assign(td_complex_array_2d, foo9(td_r, pstream__),
        "assigning variable td_complex_array_2d");
      current_statement__ = 402;
      stan::model::assign(td_complex_array_2d,
        foo10(stan::model::deep_copy(td_complex_array_2d), pstream__),
        "assigning variable td_complex_array_2d");
      current_statement__ = 403;
      stan::math::validate_non_negative_index("i_arr", "0", 0);
      current_statement__ = 404;
      stan::math::validate_non_negative_index("i_arr_1", "1", 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 2 + (2 * 2) + (2 * 3 * 2);

  }

  template <bool propto__, bool jacobian__ , typename VecR, typename VecI,
  stan::require_vector_like_t<VecR>* = nullptr,
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_scalar_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning

    try {
      local_scalar_t__ p_r = DUMMY_VAR__;
      current_statement__ = 1;
      p_r = in__.template read<local_scalar_t__>();
      std::complex<local_scalar_t__> p_complex =
         std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      current_statement__ = 2;
      p_complex = in__.template read<std::complex<local_scalar_t__>>();
      std::vector<std::complex<local_scalar_t__>> p_complex_array =
         std::vector<std::complex<local_scalar_t__>>(2,
           std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      current_statement__ = 3;
      p_complex_array = in__.template read<
                          std::vector<std::complex<local_scalar_t__>>>(2);
      std::vector<std::vector<std::complex<local_scalar_t__>>> p_complex_array_2d =
         std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
           std::vector<std::complex<local_scalar_t__>>(3,
             std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 4;
      p_complex_array_2d = in__.template read<
                             std::vector<
                               std::vector<std::complex<local_scalar_t__>>>>(
                             2, 3);
      local_scalar_t__ tp_r = DUMMY_VAR__;
      current_statement__ = 5;
      tp_r = 1.1;
      std::complex<local_scalar_t__> tp_complex =
         std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      std::vector<std::complex<local_scalar_t__>> tp_complex_array =
         std::vector<std::complex<local_scalar_t__>>(2,
           std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      std::vector<std::vector<std::complex<local_scalar_t__>>> tp_complex_array_2d =
         std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
           std::vector<std::complex<local_scalar_t__>>(3,
             std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      current_statement__ = 9;
      tp_complex = tp_r;
      current_statement__ = 10;
      tp_complex = d_i;
      current_statement__ = 11;
      tp_complex = d_r;
      current_statement__ = 12;
      tp_complex = p_r;
      current_statement__ = 13;
      tp_complex = 1;
      current_statement__ = 14;
      tp_complex = 1.1;
      current_statement__ = 15;
      tp_complex = d_complex;
      current_statement__ = 16;
      tp_complex = stan::model::rvalue(d_complex_array, "d_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 17;
      tp_complex = p_complex;
      current_statement__ = 18;
      tp_complex = stan::model::rvalue(p_complex_array, "p_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 19;
      tp_complex = stan::math::to_complex();
      current_statement__ = 20;
      tp_complex = stan::math::to_complex(1);
      current_statement__ = 21;
      tp_complex = stan::math::to_complex(1.2);
      current_statement__ = 22;
      tp_complex = stan::math::to_complex(1, 2);
      current_statement__ = 23;
      tp_complex = stan::math::to_complex(1.1, 2);
      current_statement__ = 24;
      tp_complex = stan::math::to_complex(1, 2.2);
      current_statement__ = 25;
      tp_complex = stan::math::to_complex(1.1, 2.2);
      current_statement__ = 26;
      stan::model::assign(tp_complex_array, d_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 27;
      stan::model::assign(tp_complex_array, p_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 28;
      stan::model::assign(tp_complex_array,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(1),
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    2, 3))},
        "assigning variable tp_complex_array");
      current_statement__ = 29;
      stan::model::assign(tp_complex_array, stan::math::to_complex(5.1, 6),
        "assigning variable tp_complex_array", stan::model::index_uni(1));
      current_statement__ = 30;
      stan::model::assign(tp_complex_array_2d, d_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 31;
      stan::model::assign(tp_complex_array_2d, p_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 32;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::vector<std::complex<local_scalar_t__>>>{
        std::vector<std::complex<local_scalar_t__>>{
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(1),
        tp_complex,
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(3)},
        std::vector<std::complex<local_scalar_t__>>{
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    )),
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    1.1)),
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    1, 2.1))}},
        "assigning variable tp_complex_array_2d");
      current_statement__ = 33;
      stan::model::assign(tp_complex_array_2d, stan::math::to_complex(1, 2),
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
                                                    stan::model::index_uni(1));
      current_statement__ = 34;
      stan::model::assign(tp_complex_array_2d, 1,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
                                                    stan::model::index_uni(1));
      current_statement__ = 35;
      stan::model::assign(tp_complex_array_2d, tp_complex_array,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 36;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    1, 2)),
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(2.4)},
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 41;
      for (int tp_j = 1; tp_j <= 2; ++tp_j) {
        current_statement__ = 39;
        for (int tp_k = 1; tp_k <= 3; ++tp_k) {
          current_statement__ = 37;
          stan::model::assign(tp_complex_array_2d,
            stan::math::to_complex(1, 2.2),
            "assigning variable tp_complex_array_2d", stan::model::index_uni(tp_j),
                                                        stan::model::index_uni(tp_k));
        }
      }
      current_statement__ = 42;
      for (int sym1__ = 1; sym1__ <= stan::math::size(tp_complex_array_2d);
           ++sym1__) {
        {
          std::vector<std::complex<local_scalar_t__>> tp_j;
          current_statement__ = 42;
          stan::model::assign(tp_j, tp_complex_array_2d[(sym1__ - 1)],
            "assigning variable tp_j");
          current_statement__ = 43;
          for (int sym1__ = 1; sym1__ <= stan::math::size(tp_j); ++sym1__) {
            {
              std::complex<local_scalar_t__> tp_k;
              current_statement__ = 43;
              tp_k = tp_j[(sym1__ - 1)];
              current_statement__ = 44;
              tp_complex = tp_k;
            }
          }
        }
      }
      current_statement__ = 45;
      tp_r = stan::math::get_real(tp_complex);
      current_statement__ = 46;
      tp_r = stan::math::get_imag(tp_complex);
      current_statement__ = 47;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 48;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 49;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d",
                 stan::model::index_uni(1), stan::model::index_uni(1)));
      current_statement__ = 50;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d",
                 stan::model::index_uni(1), stan::model::index_uni(1)));
      current_statement__ = 51;
      tp_complex = foo(pstream__);
      current_statement__ = 52;
      tp_r = foo1(tp_complex, pstream__);
      current_statement__ = 53;
      tp_complex = foo2(tp_r, pstream__);
      current_statement__ = 54;
      tp_complex = foo3(tp_complex, pstream__);
      current_statement__ = 55;
      stan::model::assign(tp_complex_array, foo4(pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 56;
      tp_r = foo5(tp_complex_array, pstream__);
      current_statement__ = 57;
      stan::model::assign(tp_complex_array, foo6(tp_r, pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 58;
      stan::model::assign(tp_complex_array,
        foo7(stan::model::deep_copy(tp_complex_array), pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 59;
      tp_r = foo8(tp_complex_array_2d, pstream__);
      current_statement__ = 60;
      stan::model::assign(tp_complex_array_2d, foo9(tp_r, pstream__),
        "assigning variable tp_complex_array_2d");
      current_statement__ = 61;
      stan::model::assign(tp_complex_array_2d,
        foo10(stan::model::deep_copy(tp_complex_array_2d), pstream__),
        "assigning variable tp_complex_array_2d");
      {
        std::complex<local_scalar_t__> m_complex =
           std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
        std::vector<std::complex<local_scalar_t__>> m_complex_array =
           std::vector<std::complex<local_scalar_t__>>(2,
             std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
        std::vector<std::vector<std::complex<local_scalar_t__>>> m_complex_array_2d =
           std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
             std::vector<std::complex<local_scalar_t__>>(3,
               std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
        current_statement__ = 343;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(stan::math::abs(p_complex), 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl()

  template <typename RNG, typename VecR, typename VecI, typename VecVar,
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr,
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_scalar_model_namespace::write_array";
    (void) function__;  // suppress unused var warning

    try {
      double p_r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      p_r = in__.template read<local_scalar_t__>();
      std::complex<double> p_complex =
         std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      p_complex = in__.template read<std::complex<local_scalar_t__>>();
      std::vector<std::complex<double>> p_complex_array =
         std::vector<std::complex<double>>(2,
           std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 3;
      p_complex_array = in__.template read<
                          std::vector<std::complex<local_scalar_t__>>>(2);
      std::vector<std::vector<std::complex<double>>> p_complex_array_2d =
         std::vector<std::vector<std::complex<double>>>(2,
           std::vector<std::complex<double>>(3,
             std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
               std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 4;
      p_complex_array_2d = in__.template read<
                             std::vector<
                               std::vector<std::complex<local_scalar_t__>>>>(
                             2, 3);
      double tp_r = std::numeric_limits<double>::quiet_NaN();
      std::complex<double> tp_complex =
         std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
           std::numeric_limits<double>::quiet_NaN());
      std::vector<std::complex<double>> tp_complex_array =
         std::vector<std::complex<double>>(2,
           std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<std::complex<double>>> tp_complex_array_2d =
         std::vector<std::vector<std::complex<double>>>(2,
           std::vector<std::complex<double>>(3,
             std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
               std::numeric_limits<double>::quiet_NaN())));
      out__.write(p_r);
      out__.write(p_complex);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(p_complex_array[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          out__.write(p_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 5;
      tp_r = 1.1;
      current_statement__ = 9;
      tp_complex = tp_r;
      current_statement__ = 10;
      tp_complex = d_i;
      current_statement__ = 11;
      tp_complex = d_r;
      current_statement__ = 12;
      tp_complex = p_r;
      current_statement__ = 13;
      tp_complex = 1;
      current_statement__ = 14;
      tp_complex = 1.1;
      current_statement__ = 15;
      tp_complex = d_complex;
      current_statement__ = 16;
      tp_complex = stan::model::rvalue(d_complex_array, "d_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 17;
      tp_complex = p_complex;
      current_statement__ = 18;
      tp_complex = stan::model::rvalue(p_complex_array, "p_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 19;
      tp_complex = stan::math::to_complex();
      current_statement__ = 20;
      tp_complex = stan::math::to_complex(1);
      current_statement__ = 21;
      tp_complex = stan::math::to_complex(1.2);
      current_statement__ = 22;
      tp_complex = stan::math::to_complex(1, 2);
      current_statement__ = 23;
      tp_complex = stan::math::to_complex(1.1, 2);
      current_statement__ = 24;
      tp_complex = stan::math::to_complex(1, 2.2);
      current_statement__ = 25;
      tp_complex = stan::math::to_complex(1.1, 2.2);
      current_statement__ = 26;
      stan::model::assign(tp_complex_array, d_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 27;
      stan::model::assign(tp_complex_array, p_complex_array,
        "assigning variable tp_complex_array");
      current_statement__ = 28;
      stan::model::assign(tp_complex_array,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(1),
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    2, 3))},
        "assigning variable tp_complex_array");
      current_statement__ = 29;
      stan::model::assign(tp_complex_array, stan::math::to_complex(5.1, 6),
        "assigning variable tp_complex_array", stan::model::index_uni(1));
      current_statement__ = 30;
      stan::model::assign(tp_complex_array_2d, d_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 31;
      stan::model::assign(tp_complex_array_2d, p_complex_array_2d,
        "assigning variable tp_complex_array_2d");
      current_statement__ = 32;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::vector<std::complex<local_scalar_t__>>>{
        std::vector<std::complex<local_scalar_t__>>{
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(1),
        tp_complex,
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(3)},
        std::vector<std::complex<local_scalar_t__>>{
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    )),
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    1.1)),
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    1, 2.1))}},
        "assigning variable tp_complex_array_2d");
      current_statement__ = 33;
      stan::model::assign(tp_complex_array_2d, stan::math::to_complex(1, 2),
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
                                                    stan::model::index_uni(1));
      current_statement__ = 34;
      stan::model::assign(tp_complex_array_2d, 1,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1),
                                                    stan::model::index_uni(1));
      current_statement__ = 35;
      stan::model::assign(tp_complex_array_2d, tp_complex_array,
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 36;
      stan::model::assign(tp_complex_array_2d,
        std::vector<std::complex<local_scalar_t__>>{tp_complex,
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(stan::math::to_complex(
                                                                    1, 2)),
        stan::math::promote_scalar<std::complex<local_scalar_t__>>(2.4)},
        "assigning variable tp_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 41;
      for (int tp_j = 1; tp_j <= 2; ++tp_j) {
        current_statement__ = 39;
        for (int tp_k = 1; tp_k <= 3; ++tp_k) {
          current_statement__ = 37;
          stan::model::assign(tp_complex_array_2d,
            stan::math::to_complex(1, 2.2),
            "assigning variable tp_complex_array_2d", stan::model::index_uni(tp_j),
                                                        stan::model::index_uni(tp_k));
        }
      }
      current_statement__ = 42;
      for (int sym1__ = 1; sym1__ <= stan::math::size(tp_complex_array_2d);
           ++sym1__) {
        {
          std::vector<std::complex<local_scalar_t__>> tp_j;
          current_statement__ = 42;
          stan::model::assign(tp_j, tp_complex_array_2d[(sym1__ - 1)],
            "assigning variable tp_j");
          current_statement__ = 43;
          for (int sym1__ = 1; sym1__ <= stan::math::size(tp_j); ++sym1__) {
            {
              std::complex<local_scalar_t__> tp_k;
              current_statement__ = 43;
              tp_k = tp_j[(sym1__ - 1)];
              current_statement__ = 44;
              tp_complex = tp_k;
            }
          }
        }
      }
      current_statement__ = 45;
      tp_r = stan::math::get_real(tp_complex);
      current_statement__ = 46;
      tp_r = stan::math::get_imag(tp_complex);
      current_statement__ = 47;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 48;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array, "tp_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 49;
      tp_r = stan::math::get_real(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d",
                 stan::model::index_uni(1), stan::model::index_uni(1)));
      current_statement__ = 50;
      tp_r = stan::math::get_imag(
               stan::model::rvalue(tp_complex_array_2d,
                 "tp_complex_array_2d",
                 stan::model::index_uni(1), stan::model::index_uni(1)));
      current_statement__ = 51;
      tp_complex = foo(pstream__);
      current_statement__ = 52;
      tp_r = foo1(tp_complex, pstream__);
      current_statement__ = 53;
      tp_complex = foo2(tp_r, pstream__);
      current_statement__ = 54;
      tp_complex = foo3(tp_complex, pstream__);
      current_statement__ = 55;
      stan::model::assign(tp_complex_array, foo4(pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 56;
      tp_r = foo5(tp_complex_array, pstream__);
      current_statement__ = 57;
      stan::model::assign(tp_complex_array, foo6(tp_r, pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 58;
      stan::model::assign(tp_complex_array,
        foo7(stan::model::deep_copy(tp_complex_array), pstream__),
        "assigning variable tp_complex_array");
      current_statement__ = 59;
      tp_r = foo8(tp_complex_array_2d, pstream__);
      current_statement__ = 60;
      stan::model::assign(tp_complex_array_2d, foo9(tp_r, pstream__),
        "assigning variable tp_complex_array_2d");
      current_statement__ = 61;
      stan::model::assign(tp_complex_array_2d,
        foo10(stan::model::deep_copy(tp_complex_array_2d), pstream__),
        "assigning variable tp_complex_array_2d");
      if (emit_transformed_parameters__) {
        out__.write(tp_r);
        out__.write(tp_complex);
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          out__.write(tp_complex_array[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            out__.write(tp_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      int gq_i = std::numeric_limits<int>::min();
      current_statement__ = 62;
      gq_i = 1;
      double gq_r = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 63;
      gq_r = 1.1;
      std::complex<double> gq_complex =
         std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
           std::numeric_limits<double>::quiet_NaN());
      std::vector<std::complex<double>> gq_complex_array =
         std::vector<std::complex<double>>(2,
           std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<std::complex<double>>> gq_complex_array_2d =
         std::vector<std::vector<std::complex<double>>>(2,
           std::vector<std::complex<double>>(3,
             std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
               std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 67;
      gq_complex = gq_i;
      current_statement__ = 68;
      gq_complex = gq_r;
      current_statement__ = 69;
      gq_complex = d_i;
      current_statement__ = 70;
      gq_complex = d_r;
      current_statement__ = 71;
      gq_complex = p_r;
      current_statement__ = 72;
      gq_complex = 1;
      current_statement__ = 73;
      gq_complex = 1.1;
      current_statement__ = 74;
      gq_complex = d_complex;
      current_statement__ = 75;
      gq_complex = stan::model::rvalue(d_complex_array, "d_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 76;
      gq_complex = p_complex;
      current_statement__ = 77;
      gq_complex = stan::model::rvalue(p_complex_array, "p_complex_array",
                     stan::model::index_uni(1));
      current_statement__ = 78;
      gq_complex = stan::math::to_complex();
      current_statement__ = 79;
      gq_complex = stan::math::to_complex(1);
      current_statement__ = 80;
      gq_complex = stan::math::to_complex(1.2);
      current_statement__ = 81;
      gq_complex = stan::math::to_complex(1, 2);
      current_statement__ = 82;
      gq_complex = stan::math::to_complex(1.1, 2);
      current_statement__ = 83;
      gq_complex = stan::math::to_complex(1, 2.2);
      current_statement__ = 84;
      gq_complex = stan::math::to_complex(1.1, 2.2);
      current_statement__ = 85;
      stan::model::assign(gq_complex_array, d_complex_array,
        "assigning variable gq_complex_array");
      current_statement__ = 86;
      stan::model::assign(gq_complex_array, p_complex_array,
        "assigning variable gq_complex_array");
      current_statement__ = 87;
      stan::model::assign(gq_complex_array,
        std::vector<std::complex<double>>{gq_complex,
        stan::math::to_complex(1, 0), stan::math::to_complex(2, 3)},
        "assigning variable gq_complex_array");
      current_statement__ = 88;
      stan::model::assign(gq_complex_array, stan::math::to_complex(5.1, 6),
        "assigning variable gq_complex_array", stan::model::index_uni(1));
      current_statement__ = 89;
      stan::model::assign(gq_complex_array_2d, d_complex_array_2d,
        "assigning variable gq_complex_array_2d");
      current_statement__ = 90;
      stan::model::assign(gq_complex_array_2d, p_complex_array_2d,
        "assigning variable gq_complex_array_2d");
      current_statement__ = 91;
      stan::model::assign(gq_complex_array_2d,
        std::vector<std::vector<std::complex<double>>>{
        std::vector<std::complex<double>>{stan::math::to_complex(1, 0),
        gq_complex, stan::math::to_complex(3, 0)},
        std::vector<std::complex<double>>{stan::math::to_complex(),
        stan::math::to_complex(1.1), stan::math::to_complex(1, 2.1)}},
        "assigning variable gq_complex_array_2d");
      current_statement__ = 92;
      stan::model::assign(gq_complex_array_2d, stan::math::to_complex(1, 2),
        "assigning variable gq_complex_array_2d", stan::model::index_uni(1),
                                                    stan::model::index_uni(1));
      current_statement__ = 93;
      stan::model::assign(gq_complex_array_2d, 1,
        "assigning variable gq_complex_array_2d", stan::model::index_uni(1),
                                                    stan::model::index_uni(1));
      current_statement__ = 94;
      stan::model::assign(gq_complex_array_2d, gq_complex_array,
        "assigning variable gq_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 95;
      stan::model::assign(gq_complex_array_2d,
        std::vector<std::complex<double>>{gq_complex,
        stan::math::to_complex(1, 2), stan::math::to_complex(2.4, 0)},
        "assigning variable gq_complex_array_2d", stan::model::index_uni(1));
      current_statement__ = 100;
      for (int gq_j = 1; gq_j <= 2; ++gq_j) {
        current_statement__ = 98;
        for (int gq_k = 1; gq_k <= 3; ++gq_k) {
          current_statement__ = 96;
          stan::model::assign(gq_complex_array_2d,
            stan::math::to_complex(1, 2.2),
            "assigning variable gq_complex_array_2d", stan::model::index_uni(gq_j),
                                                        stan::model::index_uni(gq_k));
        }
      }
      current_statement__ = 101;
      for (int sym1__ = 1; sym1__ <= stan::math::size(gq_complex_array_2d);
           ++sym1__) {
        {
          std::vector<std::complex<double>> gq_j;
          current_statement__ = 101;
          stan::model::assign(gq_j, gq_complex_array_2d[(sym1__ - 1)],
            "assigning variable gq_j");
          current_statement__ = 102;
          for (int sym1__ = 1; sym1__ <= stan::math::size(gq_j); ++sym1__) {
            {
              std::complex<double> gq_k;
              current_statement__ = 102;
              gq_k = gq_j[(sym1__ - 1)];
              current_statement__ = 103;
              gq_complex = gq_k;
            }
          }
        }
      }
      current_statement__ = 104;
      gq_r = stan::math::get_real(gq_complex);
      current_statement__ = 105;
      gq_r = stan::math::get_imag(gq_complex);
      current_statement__ = 106;
      gq_r = stan::math::get_real(
               stan::model::rvalue(gq_complex_array, "gq_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 107;
      gq_r = stan::math::get_imag(
               stan::model::rvalue(gq_complex_array, "gq_complex_array",
                 stan::model::index_uni(1)));
      current_statement__ = 108;
      gq_r = stan::math::get_real(
               stan::model::rvalue(gq_complex_array_2d,
                 "gq_complex_array_2d",
                 stan::model::index_uni(1), stan::model::index_uni(1)));
      current_statement__ = 109;
      gq_r = stan::math::get_imag(
               stan::model::rvalue(gq_complex_array_2d,
                 "gq_complex_array_2d",
                 stan::model::index_uni(1), stan::model::index_uni(1)));
      current_statement__ = 110;
      gq_complex = foo(pstream__);
      current_statement__ = 111;
      gq_r = foo1(gq_complex, pstream__);
      current_statement__ = 112;
      gq_complex = foo2(gq_r, pstream__);
      current_statement__ = 113;
      gq_complex = foo3(gq_complex, pstream__);
      current_statement__ = 114;
      stan::model::assign(gq_complex_array, foo4(pstream__),
        "assigning variable gq_complex_array");
      current_statement__ = 115;
      gq_r = foo5(gq_complex_array, pstream__);
      current_statement__ = 116;
      stan::model::assign(gq_complex_array, foo6(gq_r, pstream__),
        "assigning variable gq_complex_array");
      current_statement__ = 117;
      stan::model::assign(gq_complex_array,
        foo7(stan::model::deep_copy(gq_complex_array), pstream__),
        "assigning variable gq_complex_array");
      current_statement__ = 118;
      gq_r = foo8(gq_complex_array_2d, pstream__);
      current_statement__ = 119;
      stan::model::assign(gq_complex_array_2d, foo9(gq_r, pstream__),
        "assigning variable gq_complex_array_2d");
      current_statement__ = 120;
      stan::model::assign(gq_complex_array_2d,
        foo10(stan::model::deep_copy(gq_complex_array_2d), pstream__),
        "assigning variable gq_complex_array_2d");
      std::complex<double> z =
         std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 121;
      z = stan::math::to_complex(1, 2);
      std::complex<double> y =
         std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 122;
      y = stan::math::to_complex(3, 4);
      std::vector<int> i_arr =
         std::vector<int>(0, std::numeric_limits<int>::min());
      std::vector<int> i_arr_1 =
         std::vector<int>(1, std::numeric_limits<int>::min());
      current_statement__ = 125;
      gq_complex = (z + y);
      current_statement__ = 126;
      gq_complex = (z + gq_r);
      current_statement__ = 127;
      gq_complex = (gq_r + z);
      current_statement__ = 128;
      gq_complex = (z + gq_i);
      current_statement__ = 129;
      gq_complex = (gq_i + z);
      current_statement__ = 130;
      gq_complex = (d_complex + p_complex);
      current_statement__ = 131;
      gq_complex = (d_complex + d_r);
      current_statement__ = 132;
      gq_complex = (d_complex + p_r);
      current_statement__ = 133;
      gq_complex = (d_r + p_complex);
      current_statement__ = 134;
      gq_complex = (p_complex + p_r);
      current_statement__ = 135;
      gq_complex = (d_complex + gq_i);
      current_statement__ = 136;
      gq_complex = (gq_i + p_complex);
      current_statement__ = 137;
      gq_complex = (z - y);
      current_statement__ = 138;
      gq_complex = (z - gq_r);
      current_statement__ = 139;
      gq_complex = (gq_r - z);
      current_statement__ = 140;
      gq_complex = (z - gq_i);
      current_statement__ = 141;
      gq_complex = (gq_i - z);
      current_statement__ = 142;
      gq_complex = (d_complex - p_complex);
      current_statement__ = 143;
      gq_complex = (d_complex - d_r);
      current_statement__ = 144;
      gq_complex = (d_complex - p_r);
      current_statement__ = 145;
      gq_complex = (d_r - p_complex);
      current_statement__ = 146;
      gq_complex = (p_complex - p_r);
      current_statement__ = 147;
      gq_complex = (d_complex - gq_i);
      current_statement__ = 148;
      gq_complex = (gq_i - p_complex);
      current_statement__ = 149;
      gq_complex = (z * y);
      current_statement__ = 150;
      gq_complex = (z * gq_r);
      current_statement__ = 151;
      gq_complex = (gq_r * z);
      current_statement__ = 152;
      gq_complex = (z * gq_i);
      current_statement__ = 153;
      gq_complex = (gq_i * z);
      current_statement__ = 154;
      gq_complex = (d_complex * p_complex);
      current_statement__ = 155;
      gq_complex = (d_complex * d_r);
      current_statement__ = 156;
      gq_complex = (d_complex * p_r);
      current_statement__ = 157;
      gq_complex = (d_r * p_complex);
      current_statement__ = 158;
      gq_complex = (p_complex * p_r);
      current_statement__ = 159;
      gq_complex = (d_complex * gq_i);
      current_statement__ = 160;
      gq_complex = (gq_i * p_complex);
      current_statement__ = 161;
      gq_complex = (z / y);
      current_statement__ = 162;
      gq_complex = (z / gq_r);
      current_statement__ = 163;
      gq_complex = (gq_r / z);
      current_statement__ = 164;
      gq_complex = (z / gq_i);
      current_statement__ = 165;
      gq_complex = (gq_i / z);
      current_statement__ = 166;
      gq_complex = (d_complex / p_complex);
      current_statement__ = 167;
      gq_complex = (d_complex / d_r);
      current_statement__ = 168;
      gq_complex = (d_complex / p_r);
      current_statement__ = 169;
      gq_complex = (d_r / p_complex);
      current_statement__ = 170;
      gq_complex = (p_complex / p_r);
      current_statement__ = 171;
      gq_complex = (d_complex / gq_i);
      current_statement__ = 172;
      gq_complex = (gq_i / p_complex);
      current_statement__ = 173;
      gq_complex = stan::math::pow(z, y);
      current_statement__ = 174;
      gq_complex = stan::math::pow(z, gq_r);
      current_statement__ = 175;
      gq_complex = stan::math::pow(gq_r, z);
      current_statement__ = 176;
      gq_complex = stan::math::pow(z, gq_i);
      current_statement__ = 177;
      gq_complex = stan::math::pow(gq_i, z);
      current_statement__ = 178;
      gq_complex = stan::math::pow(d_complex, p_complex);
      current_statement__ = 179;
      gq_complex = stan::math::pow(d_complex, d_r);
      current_statement__ = 180;
      gq_complex = stan::math::pow(d_complex, p_r);
      current_statement__ = 181;
      gq_complex = stan::math::pow(d_r, p_complex);
      current_statement__ = 182;
      gq_complex = stan::math::pow(p_complex, p_r);
      current_statement__ = 183;
      gq_complex = stan::math::pow(d_complex, gq_i);
      current_statement__ = 184;
      gq_complex = stan::math::pow(gq_i, p_complex);
      current_statement__ = 185;
      gq_complex = -z;
      current_statement__ = 186;
      gq_complex = -gq_r;
      current_statement__ = 187;
      gq_complex = -gq_i;
      current_statement__ = 188;
      gq_complex = -d_complex;
      current_statement__ = 189;
      gq_complex = -d_r;
      current_statement__ = 190;
      gq_complex = -p_complex;
      current_statement__ = 191;
      gq_complex = -p_r;
      current_statement__ = 192;
      gq_complex = (gq_i ? z : y);
      current_statement__ = 193;
      gq_complex = (gq_i ? p_complex : z);
      current_statement__ = 194;
      gq_complex = (gq_i ? d_complex : z);
      current_statement__ = 195;
      gq_i = stan::math::logical_eq(z, z);
      current_statement__ = 196;
      gq_i = stan::math::logical_eq(z, gq_r);
      current_statement__ = 197;
      gq_i = stan::math::logical_eq(z, gq_i);
      current_statement__ = 198;
      gq_i = stan::math::logical_eq(p_complex, z);
      current_statement__ = 199;
      gq_i = stan::math::logical_eq(d_complex, z);
      current_statement__ = 200;
      gq_i = stan::math::logical_eq(p_complex, d_complex);
      current_statement__ = 201;
      gq_i = stan::math::logical_eq(p_complex, p_r);
      current_statement__ = 202;
      gq_i = stan::math::logical_eq(d_complex, d_r);
      current_statement__ = 203;
      gq_i = stan::math::logical_eq(p_r, d_complex);
      current_statement__ = 204;
      gq_i = stan::math::logical_eq(p_complex, d_r);
      current_statement__ = 205;
      gq_i = stan::math::logical_neq(z, z);
      current_statement__ = 206;
      gq_i = stan::math::logical_neq(z, gq_r);
      current_statement__ = 207;
      gq_i = stan::math::logical_neq(z, gq_i);
      current_statement__ = 208;
      gq_i = stan::math::logical_neq(p_complex, z);
      current_statement__ = 209;
      gq_i = stan::math::logical_neq(d_complex, z);
      current_statement__ = 210;
      gq_i = stan::math::logical_neq(p_complex, d_complex);
      current_statement__ = 211;
      gq_i = stan::math::logical_neq(p_complex, p_r);
      current_statement__ = 212;
      gq_i = stan::math::logical_neq(d_complex, d_r);
      current_statement__ = 213;
      gq_i = stan::math::logical_neq(p_r, d_complex);
      current_statement__ = 214;
      gq_i = stan::math::logical_neq(p_complex, d_r);
      current_statement__ = 215;
      gq_r = stan::math::abs(z);
      current_statement__ = 216;
      gq_r = stan::math::abs(p_complex);
      current_statement__ = 217;
      gq_r = stan::math::abs(d_complex);
      current_statement__ = 218;
      gq_complex = stan::math::acos(z);
      current_statement__ = 219;
      gq_complex = stan::math::acos(p_complex);
      current_statement__ = 220;
      gq_complex = stan::math::acos(d_complex);
      current_statement__ = 221;
      gq_complex = stan::math::acosh(z);
      current_statement__ = 222;
      gq_complex = stan::math::acosh(p_complex);
      current_statement__ = 223;
      gq_complex = stan::math::acosh(d_complex);
      current_statement__ = 224;
      gq_complex = stan::math::asin(z);
      current_statement__ = 225;
      gq_complex = stan::math::asin(p_complex);
      current_statement__ = 226;
      gq_complex = stan::math::asin(d_complex);
      current_statement__ = 227;
      gq_complex = stan::math::asinh(z);
      current_statement__ = 228;
      gq_complex = stan::math::asinh(p_complex);
      current_statement__ = 229;
      gq_complex = stan::math::asinh(d_complex);
      current_statement__ = 230;
      gq_complex = stan::math::atan(z);
      current_statement__ = 231;
      gq_complex = stan::math::atan(p_complex);
      current_statement__ = 232;
      gq_complex = stan::math::atan(d_complex);
      current_statement__ = 233;
      gq_complex = stan::math::atanh(z);
      current_statement__ = 234;
      gq_complex = stan::math::atanh(p_complex);
      current_statement__ = 235;
      gq_complex = stan::math::atanh(d_complex);
      current_statement__ = 236;
      gq_complex = stan::math::conj(z);
      current_statement__ = 237;
      gq_complex = stan::math::conj(p_complex);
      current_statement__ = 238;
      gq_complex = stan::math::conj(d_complex);
      current_statement__ = 239;
      gq_complex = stan::math::cos(z);
      current_statement__ = 240;
      gq_complex = stan::math::cos(p_complex);
      current_statement__ = 241;
      gq_complex = stan::math::cos(d_complex);
      current_statement__ = 242;
      gq_complex = stan::math::cosh(z);
      current_statement__ = 243;
      gq_complex = stan::math::cosh(p_complex);
      current_statement__ = 244;
      gq_complex = stan::math::cosh(d_complex);
      current_statement__ = 245;
      stan::model::assign(i_arr, stan::math::dims(z),
        "assigning variable i_arr");
      current_statement__ = 246;
      stan::model::assign(i_arr, stan::math::dims(p_complex),
        "assigning variable i_arr");
      current_statement__ = 247;
      stan::model::assign(i_arr, stan::math::dims(d_complex),
        "assigning variable i_arr");
      current_statement__ = 248;
      stan::model::assign(i_arr_1, stan::math::dims(gq_complex_array),
        "assigning variable i_arr_1");
      current_statement__ = 249;
      stan::model::assign(i_arr_1, stan::math::dims(p_complex_array),
        "assigning variable i_arr_1");
      current_statement__ = 250;
      stan::model::assign(i_arr_1, stan::math::dims(d_complex_array),
        "assigning variable i_arr_1");
      current_statement__ = 251;
      gq_complex = stan::math::exp(z);
      current_statement__ = 252;
      gq_complex = stan::math::exp(p_complex);
      current_statement__ = 253;
      gq_complex = stan::math::exp(d_complex);
      current_statement__ = 254;
      gq_r = stan::math::get_imag(z);
      current_statement__ = 255;
      gq_r = stan::math::get_imag(p_complex);
      current_statement__ = 256;
      gq_r = stan::math::get_imag(d_complex);
      current_statement__ = 257;
      gq_r = stan::math::get_real(z);
      current_statement__ = 258;
      gq_r = stan::math::get_real(p_complex);
      current_statement__ = 259;
      gq_r = stan::math::get_real(d_complex);
      current_statement__ = 260;
      stan::model::assign(gq_complex_array,
        stan::math::head(stan::model::deep_copy(gq_complex_array), 1),
        "assigning variable gq_complex_array");
      current_statement__ = 261;
      stan::model::assign(gq_complex_array,
        stan::math::head(p_complex_array, 1),
        "assigning variable gq_complex_array");
      current_statement__ = 262;
      stan::model::assign(gq_complex_array,
        stan::math::head(d_complex_array, 1),
        "assigning variable gq_complex_array");
      current_statement__ = 263;
      gq_complex = stan::math::log(z);
      current_statement__ = 264;
      gq_complex = stan::math::log(p_complex);
      current_statement__ = 265;
      gq_complex = stan::math::log(d_complex);
      current_statement__ = 266;
      gq_complex = stan::math::log10(z);
      current_statement__ = 267;
      gq_complex = stan::math::log10(p_complex);
      current_statement__ = 268;
      gq_complex = stan::math::log10(d_complex);
      current_statement__ = 269;
      gq_r = stan::math::norm(z);
      current_statement__ = 270;
      gq_r = stan::math::norm(p_complex);
      current_statement__ = 271;
      gq_r = stan::math::norm(d_complex);
      current_statement__ = 272;
      gq_i = stan::math::num_elements(gq_complex_array);
      current_statement__ = 273;
      gq_i = stan::math::num_elements(p_complex_array);
      current_statement__ = 274;
      gq_i = stan::math::num_elements(d_complex_array);
      current_statement__ = 275;
      gq_complex = stan::math::polar(gq_r, gq_r);
      current_statement__ = 276;
      gq_complex = stan::math::polar(gq_i, gq_i);
      current_statement__ = 277;
      gq_complex = stan::math::polar(gq_r, gq_i);
      current_statement__ = 278;
      gq_complex = stan::math::polar(gq_i, gq_r);
      current_statement__ = 279;
      gq_complex = stan::math::polar(p_r, gq_r);
      current_statement__ = 280;
      gq_complex = stan::math::polar(d_r, gq_r);
      current_statement__ = 281;
      gq_complex = stan::math::polar(p_r, d_r);
      current_statement__ = 282;
      gq_complex = stan::math::pow(z, gq_r);
      current_statement__ = 283;
      gq_complex = stan::math::pow(z, gq_i);
      current_statement__ = 284;
      gq_complex = stan::math::pow(z, z);
      current_statement__ = 285;
      gq_complex = stan::math::pow(p_complex, p_r);
      current_statement__ = 286;
      gq_complex = stan::math::pow(p_complex, d_r);
      current_statement__ = 287;
      gq_complex = stan::math::pow(p_complex, gq_r);
      current_statement__ = 288;
      gq_complex = stan::math::pow(p_complex, z);
      current_statement__ = 289;
      gq_complex = stan::math::pow(p_complex, d_complex);
      current_statement__ = 290;
      gq_complex = stan::math::pow(p_complex, p_complex);
      current_statement__ = 291;
      gq_complex = stan::math::pow(d_complex, p_r);
      current_statement__ = 292;
      gq_complex = stan::math::pow(d_complex, d_r);
      current_statement__ = 293;
      gq_complex = stan::math::pow(d_complex, gq_r);
      current_statement__ = 294;
      gq_complex = stan::math::pow(d_complex, z);
      current_statement__ = 295;
      gq_complex = stan::math::pow(d_complex, d_complex);
      current_statement__ = 296;
      gq_complex = stan::math::pow(d_complex, p_complex);
      current_statement__ = 297;
      gq_complex = stan::math::proj(z);
      current_statement__ = 298;
      gq_complex = stan::math::proj(p_complex);
      current_statement__ = 299;
      gq_complex = stan::math::proj(d_complex);
      current_statement__ = 300;
      stan::model::assign(gq_complex_array,
        stan::math::reverse(stan::model::deep_copy(gq_complex_array)),
        "assigning variable gq_complex_array");
      current_statement__ = 301;
      stan::model::assign(gq_complex_array,
        stan::math::reverse(p_complex_array),
        "assigning variable gq_complex_array");
      current_statement__ = 302;
      stan::model::assign(gq_complex_array,
        stan::math::reverse(d_complex_array),
        "assigning variable gq_complex_array");
      current_statement__ = 303;
      gq_complex = stan::math::sin(z);
      current_statement__ = 304;
      gq_complex = stan::math::sin(p_complex);
      current_statement__ = 305;
      gq_complex = stan::math::sin(d_complex);
      current_statement__ = 306;
      gq_complex = stan::math::sinh(z);
      current_statement__ = 307;
      gq_complex = stan::math::sinh(p_complex);
      current_statement__ = 308;
      gq_complex = stan::math::sinh(d_complex);
      current_statement__ = 309;
      gq_i = stan::math::size(gq_complex_array);
      current_statement__ = 310;
      gq_i = stan::math::size(p_complex_array);
      current_statement__ = 311;
      gq_i = stan::math::size(d_complex_array);
      current_statement__ = 312;
      gq_complex = stan::math::sqrt(z);
      current_statement__ = 313;
      gq_complex = stan::math::sqrt(p_complex);
      current_statement__ = 314;
      gq_complex = stan::math::sqrt(d_complex);
      current_statement__ = 315;
      stan::model::assign(gq_complex_array,
        stan::math::tail(stan::model::deep_copy(gq_complex_array), 1),
        "assigning variable gq_complex_array");
      current_statement__ = 316;
      stan::model::assign(gq_complex_array,
        stan::math::tail(p_complex_array, 1),
        "assigning variable gq_complex_array");
      current_statement__ = 317;
      stan::model::assign(gq_complex_array,
        stan::math::tail(d_complex_array, 1),
        "assigning variable gq_complex_array");
      current_statement__ = 318;
      gq_complex = stan::math::tan(z);
      current_statement__ = 319;
      gq_complex = stan::math::tan(p_complex);
      current_statement__ = 320;
      gq_complex = stan::math::tan(d_complex);
      current_statement__ = 321;
      gq_complex = stan::math::tanh(z);
      current_statement__ = 322;
      gq_complex = stan::math::tanh(p_complex);
      current_statement__ = 323;
      gq_complex = stan::math::tanh(d_complex);
      current_statement__ = 324;
      gq_complex = stan::math::to_complex();
      current_statement__ = 325;
      gq_complex = stan::math::to_complex(gq_r, gq_r);
      current_statement__ = 326;
      gq_complex = stan::math::to_complex(gq_i, gq_i);
      current_statement__ = 327;
      gq_complex = stan::math::to_complex(gq_r, gq_i);
      current_statement__ = 328;
      gq_complex = stan::math::to_complex(gq_i, gq_r);
      current_statement__ = 329;
      gq_complex = stan::math::to_complex(gq_r);
      current_statement__ = 330;
      gq_complex = stan::math::to_complex(gq_i);
      current_statement__ = 331;
      gq_complex = stan::math::to_complex(p_r, gq_r);
      current_statement__ = 332;
      gq_complex = stan::math::to_complex(p_r, d_r);
      current_statement__ = 333;
      gq_complex = stan::math::to_complex(d_r, gq_r);
      current_statement__ = 334;
      gq_complex = stan::math::to_complex(p_r);
      current_statement__ = 335;
      gq_complex = stan::math::to_complex(d_r);
      std::complex<double> zi =
         std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 336;
      zi = (1 + stan::math::to_complex(0, 3.14));
      current_statement__ = 337;
      zi = (zi * stan::math::to_complex(0, 0));
      std::complex<double> yi =
         std::complex<double>(std::numeric_limits<double>::quiet_NaN(),
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 338;
      yi = ((stan::math::to_complex(0, 1.1) +
              stan::math::to_complex(0.0, 2.2)) + stan::math::to_complex());
      double x = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 339;
      x = stan::math::get_real(
            (stan::math::to_complex(0, 3) - stan::math::to_complex(0, 40e-3)));
      out__.write(gq_i);
      out__.write(gq_r);
      out__.write(gq_complex);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        out__.write(gq_complex_array[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          out__.write(gq_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(z);
      out__.write(y);
      out__.write(i_arr);
      out__.write(i_arr_1);
      out__.write(zi);
      out__.write(yi);
      out__.write(x);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl()

  template <typename VecVar, typename VecI,
  stan::require_std_vector_t<VecVar>* = nullptr,
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());

    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ p_r = DUMMY_VAR__;
      p_r = in__.read<local_scalar_t__>();
      out__.write(p_r);
      std::complex<local_scalar_t__> p_complex =
         std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__);
      p_complex = in__.read<local_scalar_t__>();
      out__.write(p_complex);
      std::vector<std::complex<local_scalar_t__>> p_complex_array =
         std::vector<std::complex<local_scalar_t__>>(2,
           std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(p_complex_array, in__.read<local_scalar_t__>(),
          "assigning variable p_complex_array", stan::model::index_uni(sym1__));
      }
      out__.write(p_complex_array);
      std::vector<std::vector<std::complex<local_scalar_t__>>> p_complex_array_2d =
         std::vector<std::vector<std::complex<local_scalar_t__>>>(2,
           std::vector<std::complex<local_scalar_t__>>(3,
             std::complex<local_scalar_t__>(DUMMY_VAR__, DUMMY_VAR__)));
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          stan::model::assign(p_complex_array_2d,
            in__.read<local_scalar_t__>(),
            "assigning variable p_complex_array_2d", stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(sym1__));
        }
      }
      out__.write(p_complex_array_2d);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl()

  inline void get_param_names(std::vector<std::string>& names__) const {

    names__ = std::vector<std::string>{"p_r", "p_complex", "p_complex_array",
      "p_complex_array_2d", "tp_r", "tp_complex", "tp_complex_array",
      "tp_complex_array_2d", "gq_i", "gq_r", "gq_complex",
      "gq_complex_array", "gq_complex_array_2d", "z", "y", "i_arr",
      "i_arr_1", "zi", "yi", "x"};

    } // get_param_names()

  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {

    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(0)},
      std::vector<size_t>{static_cast<size_t>(1)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }};

    } // get_dims()

  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {

    param_names__.emplace_back(std::string() + "p_r");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "real");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "p_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
      }
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
            param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
          }
        }
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_r");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "tp_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "tp_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            }
          }
        }
      }
    }

    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_i");
      param_names__.emplace_back(std::string() + "gq_r");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "gq_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "gq_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            }
          }
        }
      }
      param_names__.emplace_back(std::string() + "z" + '.' + "real");
      param_names__.emplace_back(std::string() + "z" + '.' + "imag");
      param_names__.emplace_back(std::string() + "y" + '.' + "real");
      param_names__.emplace_back(std::string() + "y" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 0; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "i_arr" + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "i_arr_1" + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "zi" + '.' + "real");
      param_names__.emplace_back(std::string() + "zi" + '.' + "imag");
      param_names__.emplace_back(std::string() + "yi" + '.' + "real");
      param_names__.emplace_back(std::string() + "yi" + '.' + "imag");
      param_names__.emplace_back(std::string() + "x");
    }

    } // constrained_param_names()

  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {

    param_names__.emplace_back(std::string() + "p_r");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "real");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "p_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
      }
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
            param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
          }
        }
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_r");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "tp_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "tp_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            }
          }
        }
      }
    }

    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_i");
      param_names__.emplace_back(std::string() + "gq_r");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "gq_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "gq_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            }
          }
        }
      }
      param_names__.emplace_back(std::string() + "z" + '.' + "real");
      param_names__.emplace_back(std::string() + "z" + '.' + "imag");
      param_names__.emplace_back(std::string() + "y" + '.' + "real");
      param_names__.emplace_back(std::string() + "y" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 0; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "i_arr" + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "i_arr_1" + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "zi" + '.' + "real");
      param_names__.emplace_back(std::string() + "zi" + '.' + "imag");
      param_names__.emplace_back(std::string() + "yi" + '.' + "real");
      param_names__.emplace_back(std::string() + "yi" + '.' + "imag");
      param_names__.emplace_back(std::string() + "x");
    }

    } // unconstrained_param_names()

  inline std::string get_constrained_sizedtypes() const {

    return std::string("[{\"name\":\"p_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"p_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"parameters\"},{\"name\":\"p_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"parameters\"},{\"name\":\"tp_r\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_i\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"i_arr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(0) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"i_arr_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"zi\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"yi\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");

    } // get_constrained_sizedtypes()

  inline std::string get_unconstrained_sizedtypes() const {

    return std::string("[{\"name\":\"p_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"p_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"parameters\"},{\"name\":\"p_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"parameters\"},{\"name\":\"tp_r\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_i\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"y\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"i_arr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(0) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"i_arr_1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"zi\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"yi\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"x\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");

    } // get_unconstrained_sizedtypes()


    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ =
  (((1 + 2) + (2 * 2)) + ((2 * 3) * 2));
      const size_t num_transformed =
  (((1 + 2) + (2 * 2)) + ((2 * 3) * 2));
      const size_t num_gen_quantities =
  (((((((((((1 + 1) + 2) + (2 * 2)) + ((2 * 3) * 2)) + 2) + 2) + 0) + 1) + 2)
     + 2) + 1);
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ =
  (((1 + 2) + (2 * 2)) + ((2 * 3) * 2));
      const size_t num_transformed =
  (((1 + 2) + (2 * 2)) + ((2 * 3) * 2));
      const size_t num_gen_quantities =
  (((((((((((1 + 1) + 2) + (2 * 2)) + ((2 * 3) * 2)) + 2) + 2) + 0) + 1) + 2)
     + 2) + 1);
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 4> names__{"p_r", "p_complex",
      "p_complex_array", "p_complex_array_2d"};
      const std::array<Eigen::Index, 4> constrain_param_sizes__{1, 2,
       (2 * 2), (2 * 3 * 2)};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);

     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits()
     }; }
using stan_model = complex_scalar_model_namespace::complex_scalar_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return complex_scalar_model_namespace::profiles__;
}

#endif



  $ ../../../../../../install/default/bin/stanc --print-cpp complex_vectors.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace complex_vectors_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 5> locations_array__ =
{" (found before start of program)",
 " (in 'complex_vectors.stan', line 4, column 3 to column 37)",
 " (in 'complex_vectors.stan', line 5, column 3 to column 42)",
 " (in 'complex_vectors.stan', line 6, column 3 to column 27)",
 " (in 'complex_vectors.stan', line 7, column 3 to column 32)"};




class complex_vectors_model final : public model_base_crtp<complex_vectors_model> {

 private:



 public:
  ~complex_vectors_model() { }

  inline std::string model_name() const final { return "complex_vectors_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp"};
  }


  complex_vectors_model(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ =
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_vectors_model_namespace::complex_vectors_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;

  }

  template <bool propto__, bool jacobian__ , typename VecR, typename VecI,
  stan::require_vector_like_t<VecR>* = nullptr,
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_vectors_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning

    try {
      Eigen::Matrix<std::complex<local_scalar_t__>, -1, 1> z =
         Eigen::Matrix<std::complex<local_scalar_t__>, -1, 1>::Constant(3,
           DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(z,
        stan::math::transpose((Eigen::Matrix<std::complex<double>,1,-1>(3) <<
          stan::math::to_complex(3, 0), stan::math::to_complex(0, 4),
          stan::math::to_complex(4, 0)).finished()), "assigning variable z");
      Eigen::Matrix<std::complex<local_scalar_t__>, -1, -1> zs =
         Eigen::Matrix<std::complex<local_scalar_t__>, -1, -1>::Constant(2,
           2, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(zs, stan::math::to_matrix(
        std::vector<Eigen::Matrix<std::complex<double>, 1, -1>>{
        (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
        stan::math::to_complex(1, 0),
        stan::math::to_complex(2, 0)).finished(),
        (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
        stan::math::to_complex(3, 0),
        stan::math::to_complex(4, 0)).finished()}), "assigning variable zs");
      Eigen::Matrix<local_scalar_t__, 1, -1> x =
         Eigen::Matrix<local_scalar_t__, 1, -1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(x, (Eigen::Matrix<double,1,-1>(2) << 1,
        2).finished(), "assigning variable x");
      Eigen::Matrix<std::complex<local_scalar_t__>, 1, -1> zx =
         Eigen::Matrix<std::complex<local_scalar_t__>, 1, -1>::Constant(2,
           DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(zx, x, "assigning variable zx");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl()

  template <typename RNG, typename VecR, typename VecI, typename VecVar,
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr,
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_vectors_model_namespace::write_array";
    (void) function__;  // suppress unused var warning

    try {
      Eigen::Matrix<std::complex<double>, -1, 1> z =
         Eigen::Matrix<std::complex<double>, -1, 1>::Constant(3,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<std::complex<double>, -1, -1> zs =
         Eigen::Matrix<std::complex<double>, -1, -1>::Constant(2, 2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, 1, -1> x =
         Eigen::Matrix<double, 1, -1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<std::complex<double>, 1, -1> zx =
         Eigen::Matrix<std::complex<double>, 1, -1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 1;
      stan::model::assign(z,
        stan::math::transpose((Eigen::Matrix<std::complex<double>,1,-1>(3) <<
          stan::math::to_complex(3, 0), stan::math::to_complex(0, 4),
          stan::math::to_complex(4, 0)).finished()), "assigning variable z");
      current_statement__ = 2;
      stan::model::assign(zs, stan::math::to_matrix(
        std::vector<Eigen::Matrix<std::complex<double>, 1, -1>>{
        (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
        stan::math::to_complex(1, 0),
        stan::math::to_complex(2, 0)).finished(),
        (Eigen::Matrix<std::complex<double>,1,-1>(2) <<
        stan::math::to_complex(3, 0),
        stan::math::to_complex(4, 0)).finished()}), "assigning variable zs");
      current_statement__ = 3;
      stan::model::assign(x, (Eigen::Matrix<double,1,-1>(2) << 1,
        2).finished(), "assigning variable x");
      current_statement__ = 4;
      stan::model::assign(zx, x, "assigning variable zx");
      if (emit_transformed_parameters__) {
        out__.write(z);
        out__.write(zs);
        out__.write(x);
        out__.write(zx);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl()

  template <typename VecVar, typename VecI,
  stan::require_std_vector_t<VecVar>* = nullptr,
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());

    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl()

  inline void get_param_names(std::vector<std::string>& names__) const {

    names__ = std::vector<std::string>{"z", "zs", "x", "zx"};

    } // get_param_names()

  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {

    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(3)
                                                                   ,
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)}};

    } // get_dims()

  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {


    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__) + '.' + "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "zs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "zs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "zx" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "zx" + '.' + std::to_string(sym1__) + '.' + "imag");
        }
      }
    }

    if (emit_generated_quantities__) {

    }

    } // constrained_param_names()

  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {


    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__) + '.' + "imag");
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "zs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "zs" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "zx" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "zx" + '.' + std::to_string(sym1__) + '.' + "imag");
        }
      }
    }

    if (emit_generated_quantities__) {

    }

    } // unconstrained_param_names()

  inline std::string get_constrained_sizedtypes() const {

    return std::string("[{\"name\":\"z\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zs\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zx\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"}]");

    } // get_constrained_sizedtypes()

  inline std::string get_unconstrained_sizedtypes() const {

    return std::string("[{\"name\":\"z\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zs\",\"type\":{\"name\":\"complex_matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"zx\",\"type\":{\"name\":\"complex_vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"}]");

    } // get_unconstrained_sizedtypes()


    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed =
  ((((3 * 2) + ((2 * 2) * 2)) + 2) + (2 * 2));
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed =
  ((((3 * 2) + ((2 * 2) * 2)) + 2) + (2 * 2));
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);

     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits()

};
}
using stan_model = complex_vectors_model_namespace::complex_vectors_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return complex_vectors_model_namespace::profiles__;
}

#endif
