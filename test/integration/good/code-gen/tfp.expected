  $ ../../../../../install/default/bin/stan2tfp eight_schools_ncp.stan

import numpy as np
import tensorflow as tf
import tensorflow_probability as tfp
tfd = tfp.distributions

class eight_schools_ncp_model(tfd.Distribution):

  def __init__(self, J, y, sigma):
    self.J = J
    self.y = y
    self.sigma = sigma
     
  def log_prob(self, params):
    target = 0
    J = self.J
    y = tf.cast(self.y, tf.float64)
    sigma = tf.cast(self.sigma, tf.float64)
    mu = tf.cast(params[0], tf.float64)
    tau = tf.cast(params[1], tf.float64)
    theta_tilde = tf.cast(params[2], tf.float64)
    
    
    tau = tf.exp(tau) + tf.cast(0, tf.float64)
    
    
    theta = mu + tau * theta_tilde
    target += tfd.Normal(tf.cast(0, tf.float64), tf.cast(5, tf.float64)).log_prob(mu)
    target += tfd.Cauchy(tf.cast(0, tf.float64), tf.cast(5, tf.float64)).log_prob(tau)
    target += tfd.Normal(tf.cast(0, tf.float64), tf.cast(1, tf.float64)).log_prob(theta_tilde)
    target += tfd.Normal(theta, sigma).log_prob(y)
    return target
     
  def sample(self, nchains__):
    J = self.J
    y = tf.cast(self.y, tf.float64)
    sigma = tf.cast(self.sigma, tf.float64)
    
    
    
    
    
    
    mu = tfd.Normal(tf.cast(0, tf.float64), tf.cast(5, tf.float64)).sample(
    (nchains__))
    tau = tfd.Cauchy(tf.cast(0, tf.float64), tf.cast(5, tf.float64)).sample(
    (nchains__))
    theta_tilde = tfd.Normal(tf.cast(0, tf.float64), tf.cast(1, tf.float64)).sample(
    (nchains__, J))
    
    
    return [mu, tau, theta_tilde]
     
