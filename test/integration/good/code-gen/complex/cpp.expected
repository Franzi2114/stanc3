  $ ../../../../../../install/default/bin/stanc --print-cpp --use-opencl complex.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace complex_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 19> locations_array__ = 
{" (found before start of program)",
 " (in 'complex.stan', line 11, column 4 to column 16)",
 " (in 'complex.stan', line 12, column 4 to column 22)",
 " (in 'complex.stan', line 19, column 4 to column 34)",
 " (in 'complex.stan', line 20, column 4 to column 31)",
 " (in 'complex.stan', line 22, column 4 to column 32)",
 " (in 'complex.stan', line 23, column 4 to column 32)",
 " (in 'complex.stan', line 25, column 4 to column 45)",
 " (in 'complex.stan', line 27, column 4 to column 14)",
 " (in 'complex.stan', line 28, column 4 to column 17)",
 " (in 'complex.stan', line 29, column 4 to column 15)",
 " (in 'complex.stan', line 30, column 4 to column 15)",
 " (in 'complex.stan', line 32, column 4 to column 62)",
 " (in 'complex.stan', line 15, column 4 to column 20)",
 " (in 'complex.stan', line 16, column 4 to column 28)",
 " (in 'complex.stan', line 7, column 4 to column 16)",
 " (in 'complex.stan', line 8, column 4 to column 22)",
 " (in 'complex.stan', line 3, column 8 to column 32)",
 " (in 'complex.stan', line 2, column 31 to line 4, column 5)"};


template <typename T0__, typename T1__>
std::complex<stan::promote_args_t<T0__,
T1__>>
foo(const T0__& r, const T1__& i, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 17;
    return to_complex(r, i);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_functor__ {
template <typename T0__, typename T1__>
std::complex<stan::promote_args_t<T0__,
T1__>>
operator()(const T0__& r, const T1__& i, std::ostream* pstream__)  const 
{
return foo(r, i, pstream__);
}
};

class complex_model final : public model_base_crtp<complex_model> {

 private:
  std::complex<double> d_z;
  std::vector<std::complex<double>> d_z_ar; 
  
 
 public:
  ~complex_model() { }
  
  inline std::string model_name() const final { return "complex_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp --use-opencl"};
  }
  
  
  complex_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_model_namespace::complex_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization","d_z","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      d_z = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 15;
      assign(d_z, context__.vals_c("d_z")[(1 - 1)], "assigning variable d_z");
      current_statement__ = 16;
      context__.validate_dims("data initialization","d_z_ar","double",
           std::vector<size_t>{static_cast<size_t>(5),
            static_cast<size_t>(2)});
      d_z_ar = std::vector<std::complex<double>>(5, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<std::complex<local_scalar_t__>> d_z_ar_flat__;
        current_statement__ = 16;
        d_z_ar_flat__ = context__.vals_c("d_z_ar");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 16;
          assign(d_z_ar, d_z_ar_flat__[(pos__ - 1)],
            "assigning variable d_z_ar", index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 2 + (5 * 2);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::complex<local_scalar_t__> p_z;
      p_z = std::complex<T__> (DUMMY_VAR__, DUMMY_VAR__);
      
      current_statement__ = 1;
      p_z = in__.template read<std::complex<local_scalar_t__>>();
      std::vector<std::complex<local_scalar_t__>> p_z_ar;
      p_z_ar = std::vector<std::complex<local_scalar_t__>>(5, std::complex<T__> (DUMMY_VAR__, DUMMY_VAR__));
      
      current_statement__ = 2;
      p_z_ar = in__.template read<std::vector<std::complex<local_scalar_t__>>>(
                 5);
      {
        std::complex<local_scalar_t__> m_z;
        m_z = std::complex<T__> (DUMMY_VAR__, DUMMY_VAR__);
        
        current_statement__ = 13;
        m_z = 1;
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<propto__>(stan::math::abs(m_z), 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::complex<double> p_z;
      p_z = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      p_z = in__.template read<std::complex<local_scalar_t__>>();
      std::vector<std::complex<double>> p_z_ar;
      p_z_ar = std::vector<std::complex<double>>(5, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 2;
      p_z_ar = in__.template read<std::vector<std::complex<local_scalar_t__>>>(
                 5);
      vars__.emplace_back(p_z.real());
      vars__.emplace_back(p_z.imag());
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(p_z_ar[(sym1__ - 1)].real());
        vars__.emplace_back(p_z_ar[(sym1__ - 1)].imag());
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::complex<double> gq_z_1;
      gq_z_1 = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(gq_z_1, to_complex(), "assigning variable gq_z_1");
      std::complex<double> gq_z_2;
      gq_z_2 = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(gq_z_2, foo(1, 2, pstream__), "assigning variable gq_z_2");
      double r_1;
      r_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      r_1 = get_real(gq_z_2);
      double i_1;
      i_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      i_1 = get_imag(gq_z_2);
      int i_2;
      i_2 = std::numeric_limits<int>::min();
      
      current_statement__ = 7;
      i_2 = logical_eq(to_complex(gq_z_1), gq_z_1);
      int a;
      a = std::numeric_limits<int>::min();
      
      current_statement__ = 8;
      a = 1;
      double b;
      b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      b = 1.1;
      current_statement__ = 10;
      gq_z_1 = a;
      current_statement__ = 11;
      gq_z_1 = b;
      std::vector<std::complex<double>> gq_z_ar;
      gq_z_ar = std::vector<std::complex<double>>(5, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 12;
      assign(gq_z_ar, std::vector<std::complex<double>>{gq_z_1,
        to_complex(1, 2), stan::math::promote_scalar<double>(a),
        stan::math::promote_scalar<double>(0),
        stan::math::promote_scalar<double>(2.4)},
        "assigning variable gq_z_ar");
      vars__.emplace_back(gq_z_1.real());
      vars__.emplace_back(gq_z_1.imag());
      vars__.emplace_back(gq_z_2.real());
      vars__.emplace_back(gq_z_2.imag());
      vars__.emplace_back(r_1);
      vars__.emplace_back(i_1);
      vars__.emplace_back(i_2);
      vars__.emplace_back(a);
      vars__.emplace_back(b);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(gq_z_ar[(sym1__ - 1)].real());
        vars__.emplace_back(gq_z_ar[(sym1__ - 1)].imag());
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::complex<double> p_z;
      p_z = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(p_z, context__.vals_c("p_z")[(1 - 1)], "assigning variable p_z");
      std::vector<std::complex<double>> p_z_ar;
      p_z_ar = std::vector<std::complex<double>>(5, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<std::complex<local_scalar_t__>> p_z_ar_flat__;
        current_statement__ = 2;
        p_z_ar_flat__ = context__.vals_c("p_z_ar");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
          current_statement__ = 2;
          assign(p_z_ar, p_z_ar_flat__[(pos__ - 1)],
            "assigning variable p_z_ar", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(p_z.real());
      vars__.emplace_back(p_z.imag());
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        vars__.emplace_back(p_z_ar[(sym1__ - 1)].real());
        vars__.emplace_back(p_z_ar[(sym1__ - 1)].imag());
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"p_z", "p_z_ar", "gq_z_1", "gq_z_2",
      "r_1", "i_1", "i_2", "a", "b", "gq_z_ar"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(5), static_cast<size_t>(2)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_z" + '.' + "real");
    param_names__.emplace_back(std::string() + "p_z" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_z_ar" + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "p_z_ar" + '.' + std::to_string(sym1__) + '.' + "imag");
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_z_1" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_z_1" + '.' + "imag");
      param_names__.emplace_back(std::string() + "gq_z_2" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_z_2" + '.' + "imag");
      param_names__.emplace_back(std::string() + "r_1");
      param_names__.emplace_back(std::string() + "i_1");
      param_names__.emplace_back(std::string() + "i_2");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "b");
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_z_ar" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "gq_z_ar" + '.' + std::to_string(sym1__) + '.' + "imag");
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_z" + '.' + "real");
    param_names__.emplace_back(std::string() + "p_z" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_z_ar" + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "p_z_ar" + '.' + std::to_string(sym1__) + '.' + "imag");
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_z_1" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_z_1" + '.' + "imag");
      param_names__.emplace_back(std::string() + "gq_z_2" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_z_2" + '.' + "imag");
      param_names__.emplace_back(std::string() + "r_1");
      param_names__.emplace_back(std::string() + "i_1");
      param_names__.emplace_back(std::string() + "i_2");
      param_names__.emplace_back(std::string() + "a");
      param_names__.emplace_back(std::string() + "b");
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_z_ar" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "gq_z_ar" + '.' + std::to_string(sym1__) + '.' + "imag");
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_z\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"p_z_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"parameters\"},{\"name\":\"gq_z_1\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_z_2\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"r_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"i_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"i_2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_z_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_z\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"p_z_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"parameters\"},{\"name\":\"gq_z_1\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_z_2\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"r_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"i_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"i_2\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"a\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"b\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_z_ar\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(5) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = complex_model_namespace::complex_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return complex_model_namespace::profiles__;
}

#endif



