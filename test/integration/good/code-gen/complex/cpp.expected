  $ ../../../../../../install/default/bin/stanc --print-cpp --use-opencl complex_math.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace complex_math_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 29> locations_array__ = 
{" (found before start of program)",
 " (in 'complex_math.stan', line 2, column 3 to column 13)",
 " (in 'complex_math.stan', line 5, column 3 to column 31)",
 " (in 'complex_math.stan', line 6, column 3 to column 13)",
 " (in 'complex_math.stan', line 7, column 3 to column 13)",
 " (in 'complex_math.stan', line 8, column 3 to column 16)",
 " (in 'complex_math.stan', line 10, column 3 to column 11)",
 " (in 'complex_math.stan', line 11, column 3 to column 11)",
 " (in 'complex_math.stan', line 12, column 3 to column 11)",
 " (in 'complex_math.stan', line 13, column 3 to column 11)",
 " (in 'complex_math.stan', line 14, column 3 to column 11)",
 " (in 'complex_math.stan', line 16, column 3 to column 11)",
 " (in 'complex_math.stan', line 17, column 3 to column 11)",
 " (in 'complex_math.stan', line 18, column 3 to column 11)",
 " (in 'complex_math.stan', line 19, column 3 to column 11)",
 " (in 'complex_math.stan', line 20, column 3 to column 11)",
 " (in 'complex_math.stan', line 22, column 3 to column 11)",
 " (in 'complex_math.stan', line 23, column 3 to column 11)",
 " (in 'complex_math.stan', line 24, column 3 to column 11)",
 " (in 'complex_math.stan', line 25, column 3 to column 11)",
 " (in 'complex_math.stan', line 26, column 3 to column 11)",
 " (in 'complex_math.stan', line 28, column 3 to column 11)",
 " (in 'complex_math.stan', line 29, column 3 to column 11)",
 " (in 'complex_math.stan', line 30, column 3 to column 11)",
 " (in 'complex_math.stan', line 31, column 3 to column 11)",
 " (in 'complex_math.stan', line 32, column 3 to column 11)",
 " (in 'complex_math.stan', line 34, column 3 to column 10)",
 " (in 'complex_math.stan', line 35, column 3 to column 10)",
 " (in 'complex_math.stan', line 36, column 3 to column 10)"};



class complex_math_model final : public model_base_crtp<complex_math_model> {

 private:
   
  
 
 public:
  ~complex_math_model() { }
  
  inline std::string model_name() const final { return "complex_math_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp --use-opencl"};
  }
  
  
  complex_math_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_math_model_namespace::complex_math_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 2;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_math_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::complex<local_scalar_t__> x;
      x = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      x = in__.template read<std::complex<local_scalar_t__>>();
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_math_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::complex<double> x;
      x = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      x = in__.template read<std::complex<local_scalar_t__>>();
      vars__.emplace_back(x.real());
      vars__.emplace_back(x.imag());
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::complex<double> y;
      y = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(y, to_complex(3, 4), "assigning variable y");
      std::complex<double> z;
      z = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      int i;
      i = std::numeric_limits<int>::min();
      
      current_statement__ = 4;
      i = 1;
      double r;
      r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      r = 1.0;
      current_statement__ = 6;
      assign(z, (x + y), "assigning variable z");
      current_statement__ = 7;
      assign(z, (x + r), "assigning variable z");
      current_statement__ = 8;
      assign(z, (r + x), "assigning variable z");
      current_statement__ = 9;
      assign(z, (x + i), "assigning variable z");
      current_statement__ = 10;
      assign(z, (i + x), "assigning variable z");
      current_statement__ = 11;
      assign(z, (x - y), "assigning variable z");
      current_statement__ = 12;
      assign(z, (x - r), "assigning variable z");
      current_statement__ = 13;
      assign(z, (r - x), "assigning variable z");
      current_statement__ = 14;
      assign(z, (x - i), "assigning variable z");
      current_statement__ = 15;
      assign(z, (i - x), "assigning variable z");
      current_statement__ = 16;
      assign(z, (x * y), "assigning variable z");
      current_statement__ = 17;
      assign(z, (x * r), "assigning variable z");
      current_statement__ = 18;
      assign(z, (r * x), "assigning variable z");
      current_statement__ = 19;
      assign(z, (x * i), "assigning variable z");
      current_statement__ = 20;
      assign(z, (i * x), "assigning variable z");
      current_statement__ = 21;
      assign(z, (x / y), "assigning variable z");
      current_statement__ = 22;
      assign(z, (x / r), "assigning variable z");
      current_statement__ = 23;
      assign(z, (r / x), "assigning variable z");
      current_statement__ = 24;
      assign(z, (x / i), "assigning variable z");
      current_statement__ = 25;
      assign(z, (i / x), "assigning variable z");
      current_statement__ = 26;
      assign(z, -x, "assigning variable z");
      current_statement__ = 27;
      z = -r;
      current_statement__ = 28;
      z = -i;
      vars__.emplace_back(y.real());
      vars__.emplace_back(y.imag());
      vars__.emplace_back(z.real());
      vars__.emplace_back(z.imag());
      vars__.emplace_back(i);
      vars__.emplace_back(r);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::complex<double> x;
      x = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(x, context__.vals_c("x")[(1 - 1)], "assigning variable x");
      vars__.emplace_back(x.real());
      vars__.emplace_back(x.imag());
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"x", "y", "z", "i", "r"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x" + '.' + "real");
    param_names__.emplace_back(std::string() + "x" + '.' + "imag");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "y" + '.' + "real");
      param_names__.emplace_back(std::string() + "y" + '.' + "imag");
      param_names__.emplace_back(std::string() + "z" + '.' + "real");
      param_names__.emplace_back(std::string() + "z" + '.' + "imag");
      param_names__.emplace_back(std::string() + "i");
      param_names__.emplace_back(std::string() + "r");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "x" + '.' + "real");
    param_names__.emplace_back(std::string() + "x" + '.' + "imag");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "y" + '.' + "real");
      param_names__.emplace_back(std::string() + "y" + '.' + "imag");
      param_names__.emplace_back(std::string() + "z" + '.' + "real");
      param_names__.emplace_back(std::string() + "z" + '.' + "imag");
      param_names__.emplace_back(std::string() + "i");
      param_names__.emplace_back(std::string() + "r");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"i\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"r\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"x\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"z\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"i\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"r\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = complex_math_model_namespace::complex_math_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return complex_math_model_namespace::profiles__;
}

#endif



  $ ../../../../../../install/default/bin/stanc --print-cpp --use-opencl complex_scalar.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace complex_scalar_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 108> locations_array__ = 
{" (found before start of program)",
 " (in 'complex_scalar.stan', line 52, column 4 to column 22)",
 " (in 'complex_scalar.stan', line 53, column 4 to column 31)",
 " (in 'complex_scalar.stan', line 54, column 4 to column 37)",
 " (in 'complex_scalar.stan', line 57, column 4 to column 14)",
 " (in 'complex_scalar.stan', line 58, column 4 to column 23)",
 " (in 'complex_scalar.stan', line 59, column 4 to column 32)",
 " (in 'complex_scalar.stan', line 60, column 4 to column 38)",
 " (in 'complex_scalar.stan', line 62, column 4 to column 19)",
 " (in 'complex_scalar.stan', line 63, column 4 to column 21)",
 " (in 'complex_scalar.stan', line 64, column 4 to column 27)",
 " (in 'complex_scalar.stan', line 65, column 4 to column 36)",
 " (in 'complex_scalar.stan', line 66, column 4 to column 30)",
 " (in 'complex_scalar.stan', line 67, column 4 to column 31)",
 " (in 'complex_scalar.stan', line 68, column 4 to column 33)",
 " (in 'complex_scalar.stan', line 69, column 4 to column 34)",
 " (in 'complex_scalar.stan', line 70, column 4 to column 36)",
 " (in 'complex_scalar.stan', line 71, column 4 to column 36)",
 " (in 'complex_scalar.stan', line 72, column 4 to column 38)",
 " (in 'complex_scalar.stan', line 74, column 4 to column 32)",
 " (in 'complex_scalar.stan', line 75, column 4 to column 32)",
 " (in 'complex_scalar.stan', line 76, column 4 to column 41)",
 " (in 'complex_scalar.stan', line 77, column 4 to column 41)",
 " (in 'complex_scalar.stan', line 81, column 12 to column 65)",
 " (in 'complex_scalar.stan', line 80, column 26 to line 81, column 66)",
 " (in 'complex_scalar.stan', line 80, column 8 to line 81, column 66)",
 " (in 'complex_scalar.stan', line 79, column 22 to line 81, column 67)",
 " (in 'complex_scalar.stan', line 79, column 4 to line 81, column 67)",
 " (in 'complex_scalar.stan', line 91, column 4 to column 17)",
 " (in 'complex_scalar.stan', line 92, column 4 to column 20)",
 " (in 'complex_scalar.stan', line 93, column 4 to column 23)",
 " (in 'complex_scalar.stan', line 94, column 4 to column 32)",
 " (in 'complex_scalar.stan', line 95, column 4 to column 38)",
 " (in 'complex_scalar.stan', line 97, column 4 to column 22)",
 " (in 'complex_scalar.stan', line 98, column 4 to column 22)",
 " (in 'complex_scalar.stan', line 99, column 4 to column 19)",
 " (in 'complex_scalar.stan', line 100, column 4 to column 21)",
 " (in 'complex_scalar.stan', line 101, column 4 to column 27)",
 " (in 'complex_scalar.stan', line 102, column 4 to column 36)",
 " (in 'complex_scalar.stan', line 103, column 4 to column 30)",
 " (in 'complex_scalar.stan', line 104, column 4 to column 31)",
 " (in 'complex_scalar.stan', line 105, column 4 to column 33)",
 " (in 'complex_scalar.stan', line 106, column 4 to column 34)",
 " (in 'complex_scalar.stan', line 107, column 4 to column 36)",
 " (in 'complex_scalar.stan', line 108, column 4 to column 36)",
 " (in 'complex_scalar.stan', line 109, column 4 to column 38)",
 " (in 'complex_scalar.stan', line 111, column 4 to column 39)",
 " (in 'complex_scalar.stan', line 112, column 4 to column 56)",
 " (in 'complex_scalar.stan', line 113, column 4 to column 44)",
 " (in 'complex_scalar.stan', line 115, column 4 to column 45)",
 " (in 'complex_scalar.stan', line 116, column 4 to column 99)",
 " (in 'complex_scalar.stan', line 117, column 4 to column 47)",
 " (in 'complex_scalar.stan', line 118, column 4 to column 46)",
 " (in 'complex_scalar.stan', line 119, column 4 to column 64)",
 " (in 'complex_scalar.stan', line 121, column 4 to column 32)",
 " (in 'complex_scalar.stan', line 122, column 4 to column 32)",
 " (in 'complex_scalar.stan', line 123, column 4 to column 41)",
 " (in 'complex_scalar.stan', line 124, column 4 to column 41)",
 " (in 'complex_scalar.stan', line 127, column 4 to column 23)",
 " (in 'complex_scalar.stan', line 128, column 4 to column 28)",
 " (in 'complex_scalar.stan', line 129, column 4 to column 28)",
 " (in 'complex_scalar.stan', line 130, column 4 to column 34)",
 " (in 'complex_scalar.stan', line 131, column 4 to column 30)",
 " (in 'complex_scalar.stan', line 132, column 4 to column 34)",
 " (in 'complex_scalar.stan', line 133, column 4 to column 34)",
 " (in 'complex_scalar.stan', line 134, column 4 to column 46)",
 " (in 'complex_scalar.stan', line 136, column 4 to column 38)",
 " (in 'complex_scalar.stan', line 137, column 4 to column 56)",
 " (in 'complex_scalar.stan', line 138, column 4 to column 61)",
 " (in 'complex_scalar.stan', line 139, column 4 to column 66)",
 " (in 'complex_scalar.stan', line 84, column 4 to column 22)",
 " (in 'complex_scalar.stan', line 85, column 4 to column 31)",
 " (in 'complex_scalar.stan', line 86, column 4 to column 37)",
 " (in 'complex_scalar.stan', line 88, column 4 to column 34)",
 " (in 'complex_scalar.stan', line 28, column 4 to column 22)",
 " (in 'complex_scalar.stan', line 29, column 4 to column 31)",
 " (in 'complex_scalar.stan', line 30, column 4 to column 37)",
 " (in 'complex_scalar.stan', line 33, column 4 to column 35)",
 " (in 'complex_scalar.stan', line 34, column 4 to column 19)",
 " (in 'complex_scalar.stan', line 35, column 4 to column 33)",
 " (in 'complex_scalar.stan', line 36, column 4 to column 50)",
 " (in 'complex_scalar.stan', line 37, column 4 to column 38)",
 " (in 'complex_scalar.stan', line 39, column 4 to column 14)",
 " (in 'complex_scalar.stan', line 41, column 4 to column 32)",
 " (in 'complex_scalar.stan', line 42, column 4 to column 32)",
 " (in 'complex_scalar.stan', line 43, column 4 to column 41)",
 " (in 'complex_scalar.stan', line 44, column 4 to column 41)",
 " (in 'complex_scalar.stan', line 48, column 12 to column 65)",
 " (in 'complex_scalar.stan', line 47, column 26 to line 48, column 66)",
 " (in 'complex_scalar.stan', line 47, column 8 to line 48, column 66)",
 " (in 'complex_scalar.stan', line 46, column 22 to line 48, column 67)",
 " (in 'complex_scalar.stan', line 46, column 4 to line 48, column 67)",
 " (in 'complex_scalar.stan', line 3, column 8 to column 28)",
 " (in 'complex_scalar.stan', line 2, column 17 to line 4, column 5)",
 " (in 'complex_scalar.stan', line 6, column 8 to column 19)",
 " (in 'complex_scalar.stan', line 5, column 24 to line 7, column 5)",
 " (in 'complex_scalar.stan', line 9, column 8 to column 29)",
 " (in 'complex_scalar.stan', line 8, column 24 to line 10, column 5)",
 " (in 'complex_scalar.stan', line 12, column 8 to column 17)",
 " (in 'complex_scalar.stan', line 11, column 27 to line 13, column 5)",
 " (in 'complex_scalar.stan', line 15, column 8 to column 44)",
 " (in 'complex_scalar.stan', line 14, column 20 to line 16, column 5)",
 " (in 'complex_scalar.stan', line 18, column 8 to column 19)",
 " (in 'complex_scalar.stan', line 17, column 26 to line 19, column 5)",
 " (in 'complex_scalar.stan', line 21, column 8 to column 48)",
 " (in 'complex_scalar.stan', line 20, column 26 to line 22, column 5)",
 " (in 'complex_scalar.stan', line 24, column 8 to column 17)",
 " (in 'complex_scalar.stan', line 23, column 31 to line 25, column 5)"};


std::complex<double>
foo(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 92;
    return to_complex();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_functor__ {
std::complex<double>
operator()(std::ostream* pstream__)  const 
{
return foo(pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
foo1(const std::complex<T0__>& z, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 94;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo1_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::complex<T0__>& z, std::ostream* pstream__)  const 
{
return foo1(z, pstream__);
}
};

template <typename T0__>
std::complex<stan::promote_args_t<T0__>>
foo2(const T0__& r, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 96;
    return to_complex(r);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo2_functor__ {
template <typename T0__>
std::complex<stan::promote_args_t<T0__>>
operator()(const T0__& r, std::ostream* pstream__)  const 
{
return foo2(r, pstream__);
}
};

template <typename T0__>
std::complex<stan::promote_args_t<T0__>>
foo3(const std::complex<T0__>& z, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 98;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo3_functor__ {
template <typename T0__>
std::complex<stan::promote_args_t<T0__>>
operator()(const std::complex<T0__>& z, std::ostream* pstream__)  const 
{
return foo3(z, pstream__);
}
};

std::vector<std::complex<double>>
foo4(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 100;
    return std::vector<std::complex<double>>{to_complex(), to_complex()};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo4_functor__ {
std::vector<std::complex<double>>
operator()(std::ostream* pstream__)  const 
{
return foo4(pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
foo5(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 102;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo5_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__)  const 
{
return foo5(z, pstream__);
}
};

template <typename T0__>
std::vector<std::complex<stan::promote_args_t<T0__>>>
foo6(const T0__& r, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 104;
    return std::vector<std::complex<local_scalar_t__>>{to_complex(r),
        to_complex(r, r)};
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo6_functor__ {
template <typename T0__>
std::vector<std::complex<stan::promote_args_t<T0__>>>
operator()(const T0__& r, std::ostream* pstream__)  const 
{
return foo6(r, pstream__);
}
};

template <typename T0__>
std::vector<std::complex<stan::promote_args_t<T0__>>>
foo7(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  int current_statement__ = 0; 
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    current_statement__ = 106;
    return z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo7_functor__ {
template <typename T0__>
std::vector<std::complex<stan::promote_args_t<T0__>>>
operator()(const std::vector<std::complex<T0__>>& z, std::ostream* pstream__)  const 
{
return foo7(z, pstream__);
}
};

class complex_scalar_model final : public model_base_crtp<complex_scalar_model> {

 private:
  std::complex<double> d_complex;
  std::vector<std::complex<double>> d_complex_array;
  std::vector<std::vector<std::complex<double>>> d_complex_array_2d;
  std::complex<double> td_complex;
  std::vector<std::complex<double>> td_complex_array;
  std::vector<std::vector<std::complex<double>>> td_complex_array_2d;
  double td_r; 
  
 
 public:
  ~complex_scalar_model() { }
  
  inline std::string model_name() const final { return "complex_scalar_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = --print-cpp --use-opencl"};
  }
  
  
  complex_scalar_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_scalar_model_namespace::complex_scalar_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 74;
      context__.validate_dims("data initialization","d_complex","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      d_complex = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 74;
      assign(d_complex, context__.vals_c("d_complex")[(1 - 1)],
        "assigning variable d_complex");
      current_statement__ = 75;
      context__.validate_dims("data initialization","d_complex_array",
          "double",
           std::vector<size_t>{static_cast<size_t>(2) * static_cast<size_t>(2)});
      d_complex_array = std::vector<std::complex<double>>(2, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<std::complex<local_scalar_t__>> d_complex_array_flat__;
        current_statement__ = 75;
        d_complex_array_flat__ = context__.vals_c("d_complex_array");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 75;
          assign(d_complex_array, d_complex_array_flat__[(pos__ - 1)],
            "assigning variable d_complex_array", index_uni(sym1__));
          current_statement__ = 75;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 76;
      context__.validate_dims("data initialization","d_complex_array_2d",
          "double",
           std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3) * static_cast<size_t>(2)});
      d_complex_array_2d = std::vector<std::vector<std::complex<double>>>(2, std::vector<std::complex<double>>(3, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<std::complex<local_scalar_t__>> d_complex_array_2d_flat__;
        current_statement__ = 76;
        d_complex_array_2d_flat__ = context__.vals_c("d_complex_array_2d");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 76;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 76;
            assign(d_complex_array_2d,
              d_complex_array_2d_flat__[(pos__ - 1)],
              "assigning variable d_complex_array_2d", index_uni(sym2__),
                                                         index_uni(sym1__));
            current_statement__ = 76;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 77;
      td_complex = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 77;
      assign(td_complex, d_complex, "assigning variable td_complex");
      current_statement__ = 78;
      td_complex = 1;
      current_statement__ = 79;
      assign(td_complex, to_complex(1, 2), "assigning variable td_complex");
      current_statement__ = 80;
      td_complex_array = std::vector<std::complex<double>>(2, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 80;
      assign(td_complex_array, d_complex_array,
        "assigning variable td_complex_array");
      current_statement__ = 81;
      td_complex_array_2d = std::vector<std::vector<std::complex<double>>>(2, std::vector<std::complex<double>>(3, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 82;
      td_r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 83;
      td_r = get_real(td_complex);
      current_statement__ = 84;
      td_r = get_imag(td_complex);
      current_statement__ = 85;
      td_r = get_real(
               rvalue(td_complex_array, "td_complex_array", index_uni(1)));
      current_statement__ = 86;
      td_r = get_imag(
               rvalue(td_complex_array, "td_complex_array", index_uni(1)));
      current_statement__ = 91;
      for (int td_i = 1; td_i <= 2; ++td_i) {
        current_statement__ = 89;
        for (int td_j = 1; td_j <= 3; ++td_j) {
          current_statement__ = 87;
          assign(td_complex_array_2d, to_complex(1, 2.2),
            "assigning variable td_complex_array_2d", index_uni(td_i),
                                                        index_uni(td_j));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 2 + (2 * 2) + (2 * 3 * 2);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_scalar_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::complex<local_scalar_t__> p_complex;
      p_complex = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      p_complex = in__.template read<std::complex<local_scalar_t__>>();
      std::vector<std::complex<local_scalar_t__>> p_complex_array;
      p_complex_array = std::vector<std::complex<local_scalar_t__>>(2, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 2;
      p_complex_array = in__.template read<std::vector<std::complex<local_scalar_t__>>>(
                          2);
      std::vector<std::vector<std::complex<local_scalar_t__>>> p_complex_array_2d;
      p_complex_array_2d = std::vector<std::vector<std::complex<local_scalar_t__>>>(2, std::vector<std::complex<local_scalar_t__>>(3, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN())));
      
      current_statement__ = 3;
      p_complex_array_2d = in__.template read<std::vector<std::vector<std::complex<local_scalar_t__>>>>(
                             2, 3);
      local_scalar_t__ tp_r;
      tp_r = DUMMY_VAR__;
      
      std::complex<local_scalar_t__> tp_complex;
      tp_complex = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::complex<local_scalar_t__>> tp_complex_array;
      tp_complex_array = std::vector<std::complex<local_scalar_t__>>(2, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<std::complex<local_scalar_t__>>> tp_complex_array_2d;
      tp_complex_array_2d = std::vector<std::vector<std::complex<local_scalar_t__>>>(2, std::vector<std::complex<local_scalar_t__>>(3, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN())));
      
      current_statement__ = 8;
      tp_complex = 1;
      current_statement__ = 9;
      tp_complex = 1.1;
      current_statement__ = 10;
      assign(tp_complex, p_complex, "assigning variable tp_complex");
      current_statement__ = 11;
      assign(tp_complex,
        rvalue(p_complex_array, "p_complex_array", index_uni(1)),
        "assigning variable tp_complex");
      current_statement__ = 12;
      assign(tp_complex, to_complex(), "assigning variable tp_complex");
      current_statement__ = 13;
      assign(tp_complex, to_complex(1), "assigning variable tp_complex");
      current_statement__ = 14;
      assign(tp_complex, to_complex(1.2), "assigning variable tp_complex");
      current_statement__ = 15;
      assign(tp_complex, to_complex(1, 2), "assigning variable tp_complex");
      current_statement__ = 16;
      assign(tp_complex, to_complex(1.1, 2), "assigning variable tp_complex");
      current_statement__ = 17;
      assign(tp_complex, to_complex(1, 2.2), "assigning variable tp_complex");
      current_statement__ = 18;
      assign(tp_complex, to_complex(1.1, 2.2),
        "assigning variable tp_complex");
      current_statement__ = 19;
      tp_r = get_real(tp_complex);
      current_statement__ = 20;
      tp_r = get_imag(tp_complex);
      current_statement__ = 21;
      tp_r = get_real(
               rvalue(tp_complex_array, "tp_complex_array", index_uni(1)));
      current_statement__ = 22;
      tp_r = get_imag(
               rvalue(tp_complex_array, "tp_complex_array", index_uni(1)));
      current_statement__ = 27;
      for (int tp_i = 1; tp_i <= 2; ++tp_i) {
        current_statement__ = 25;
        for (int tp_j = 1; tp_j <= 3; ++tp_j) {
          current_statement__ = 23;
          assign(tp_complex_array_2d, to_complex(1, 2.2),
            "assigning variable tp_complex_array_2d", index_uni(tp_i),
                                                        index_uni(tp_j));
        }
      }
      {
        std::complex<local_scalar_t__> m_complex;
        m_complex = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
        
        std::vector<std::complex<local_scalar_t__>> m_complex_array;
        m_complex_array = std::vector<std::complex<local_scalar_t__>>(2, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
        
        std::vector<std::vector<std::complex<local_scalar_t__>>> m_complex_array_2d;
        m_complex_array_2d = std::vector<std::vector<std::complex<local_scalar_t__>>>(2, std::vector<std::complex<local_scalar_t__>>(3, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN())));
        
        current_statement__ = 73;
        lp_accum__.add(
          normal_lpdf<propto__>(stan::math::abs(p_complex), 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "complex_scalar_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::complex<double> p_complex;
      p_complex = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      p_complex = in__.template read<std::complex<local_scalar_t__>>();
      std::vector<std::complex<double>> p_complex_array;
      p_complex_array = std::vector<std::complex<double>>(2, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 2;
      p_complex_array = in__.template read<std::vector<std::complex<local_scalar_t__>>>(
                          2);
      std::vector<std::vector<std::complex<double>>> p_complex_array_2d;
      p_complex_array_2d = std::vector<std::vector<std::complex<double>>>(2, std::vector<std::complex<double>>(3, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN())));
      
      current_statement__ = 3;
      p_complex_array_2d = in__.template read<std::vector<std::vector<std::complex<local_scalar_t__>>>>(
                             2, 3);
      double tp_r;
      tp_r = std::numeric_limits<double>::quiet_NaN();
      
      std::complex<double> tp_complex;
      tp_complex = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::complex<double>> tp_complex_array;
      tp_complex_array = std::vector<std::complex<double>>(2, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<std::complex<double>>> tp_complex_array_2d;
      tp_complex_array_2d = std::vector<std::vector<std::complex<double>>>(2, std::vector<std::complex<double>>(3, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN())));
      
      vars__.emplace_back(p_complex.real());
      vars__.emplace_back(p_complex.imag());
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(p_complex_array[(sym1__ - 1)].real());
        vars__.emplace_back(p_complex_array[(sym1__ - 1)].imag());
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(p_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)].real());
          vars__.emplace_back(p_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)].imag());
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 8;
      tp_complex = 1;
      current_statement__ = 9;
      tp_complex = 1.1;
      current_statement__ = 10;
      assign(tp_complex, p_complex, "assigning variable tp_complex");
      current_statement__ = 11;
      assign(tp_complex,
        rvalue(p_complex_array, "p_complex_array", index_uni(1)),
        "assigning variable tp_complex");
      current_statement__ = 12;
      assign(tp_complex, to_complex(), "assigning variable tp_complex");
      current_statement__ = 13;
      assign(tp_complex, to_complex(1), "assigning variable tp_complex");
      current_statement__ = 14;
      assign(tp_complex, to_complex(1.2), "assigning variable tp_complex");
      current_statement__ = 15;
      assign(tp_complex, to_complex(1, 2), "assigning variable tp_complex");
      current_statement__ = 16;
      assign(tp_complex, to_complex(1.1, 2), "assigning variable tp_complex");
      current_statement__ = 17;
      assign(tp_complex, to_complex(1, 2.2), "assigning variable tp_complex");
      current_statement__ = 18;
      assign(tp_complex, to_complex(1.1, 2.2),
        "assigning variable tp_complex");
      current_statement__ = 19;
      tp_r = get_real(tp_complex);
      current_statement__ = 20;
      tp_r = get_imag(tp_complex);
      current_statement__ = 21;
      tp_r = get_real(
               rvalue(tp_complex_array, "tp_complex_array", index_uni(1)));
      current_statement__ = 22;
      tp_r = get_imag(
               rvalue(tp_complex_array, "tp_complex_array", index_uni(1)));
      current_statement__ = 27;
      for (int tp_i = 1; tp_i <= 2; ++tp_i) {
        current_statement__ = 25;
        for (int tp_j = 1; tp_j <= 3; ++tp_j) {
          current_statement__ = 23;
          assign(tp_complex_array_2d, to_complex(1, 2.2),
            "assigning variable tp_complex_array_2d", index_uni(tp_i),
                                                        index_uni(tp_j));
        }
      }
      if (emit_transformed_parameters__) {
        vars__.emplace_back(tp_r);
        vars__.emplace_back(tp_complex.real());
        vars__.emplace_back(tp_complex.imag());
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          vars__.emplace_back(tp_complex_array[(sym1__ - 1)].real());
          vars__.emplace_back(tp_complex_array[(sym1__ - 1)].imag());
        }
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            vars__.emplace_back(tp_complex_array_2d[(sym2__ - 1)][(sym1__ -
                                                                    1)].real());
            vars__.emplace_back(tp_complex_array_2d[(sym2__ - 1)][(sym1__ -
                                                                    1)].imag());
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      int gq_i;
      gq_i = std::numeric_limits<int>::min();
      
      current_statement__ = 28;
      gq_i = 1;
      double gq_r;
      gq_r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      gq_r = 1.1;
      std::complex<double> gq_complex;
      gq_complex = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      std::vector<std::complex<double>> gq_complex_array;
      gq_complex_array = std::vector<std::complex<double>>(2, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<std::complex<double>>> gq_complex_array_2d;
      gq_complex_array_2d = std::vector<std::vector<std::complex<double>>>(2, std::vector<std::complex<double>>(3, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN())));
      
      current_statement__ = 33;
      gq_complex = gq_i;
      current_statement__ = 34;
      gq_complex = gq_r;
      current_statement__ = 35;
      gq_complex = 1;
      current_statement__ = 36;
      gq_complex = 1.1;
      current_statement__ = 37;
      assign(gq_complex, d_complex, "assigning variable gq_complex");
      current_statement__ = 38;
      assign(gq_complex,
        rvalue(d_complex_array, "d_complex_array", index_uni(1)),
        "assigning variable gq_complex");
      current_statement__ = 39;
      assign(gq_complex, to_complex(), "assigning variable gq_complex");
      current_statement__ = 40;
      assign(gq_complex, to_complex(1), "assigning variable gq_complex");
      current_statement__ = 41;
      assign(gq_complex, to_complex(1.2), "assigning variable gq_complex");
      current_statement__ = 42;
      assign(gq_complex, to_complex(1, 2), "assigning variable gq_complex");
      current_statement__ = 43;
      assign(gq_complex, to_complex(1.1, 2), "assigning variable gq_complex");
      current_statement__ = 44;
      assign(gq_complex, to_complex(1, 2.2), "assigning variable gq_complex");
      current_statement__ = 45;
      assign(gq_complex, to_complex(1.1, 2.2),
        "assigning variable gq_complex");
      current_statement__ = 46;
      assign(gq_complex_array, d_complex_array,
        "assigning variable gq_complex_array");
      current_statement__ = 47;
      assign(gq_complex_array, std::vector<std::complex<double>>{gq_complex,
        stan::math::promote_scalar<double>(1), to_complex(2, 3)},
        "assigning variable gq_complex_array");
      current_statement__ = 48;
      assign(gq_complex_array, to_complex(5.1, 6),
        "assigning variable gq_complex_array", index_uni(1));
      current_statement__ = 49;
      assign(gq_complex_array_2d, d_complex_array_2d,
        "assigning variable gq_complex_array_2d");
      current_statement__ = 50;
      assign(gq_complex_array_2d,
        std::vector<std::vector<std::complex<double>>>{
        std::vector<std::complex<double>>{
        stan::math::promote_scalar<double>(1), gq_complex,
        stan::math::promote_scalar<double>(3)},
        std::vector<std::complex<double>>{to_complex(), to_complex(1.1),
        to_complex(1, 2.1)}}, "assigning variable gq_complex_array_2d");
      current_statement__ = 51;
      assign(gq_complex_array_2d, to_complex(1, 2),
        "assigning variable gq_complex_array_2d", index_uni(1), index_uni(1));
      current_statement__ = 52;
      assign(gq_complex_array_2d, gq_complex_array,
        "assigning variable gq_complex_array_2d", index_uni(1));
      current_statement__ = 53;
      assign(gq_complex_array_2d, std::vector<std::complex<double>>{
        gq_complex, to_complex(1, 2),
        stan::math::promote_scalar<double>(2.4)},
        "assigning variable gq_complex_array_2d", index_uni(1));
      current_statement__ = 54;
      gq_r = get_real(gq_complex);
      current_statement__ = 55;
      gq_r = get_imag(gq_complex);
      current_statement__ = 56;
      gq_r = get_real(
               rvalue(gq_complex_array, "gq_complex_array", index_uni(1)));
      current_statement__ = 57;
      gq_r = get_imag(
               rvalue(gq_complex_array, "gq_complex_array", index_uni(1)));
      current_statement__ = 58;
      assign(gq_complex, foo(pstream__), "assigning variable gq_complex");
      current_statement__ = 59;
      gq_r = foo1(gq_complex, pstream__);
      current_statement__ = 60;
      assign(gq_complex, foo2(gq_r, pstream__),
        "assigning variable gq_complex");
      current_statement__ = 61;
      assign(gq_complex, foo3(stan::model::deep_copy(gq_complex), pstream__),
        "assigning variable gq_complex");
      current_statement__ = 62;
      assign(gq_complex_array, foo4(pstream__),
        "assigning variable gq_complex_array");
      current_statement__ = 63;
      gq_r = foo5(gq_complex_array, pstream__);
      current_statement__ = 64;
      assign(gq_complex_array, foo6(gq_r, pstream__),
        "assigning variable gq_complex_array");
      current_statement__ = 65;
      assign(gq_complex_array,
        foo7(stan::model::deep_copy(gq_complex_array), pstream__),
        "assigning variable gq_complex_array");
      current_statement__ = 66;
      gq_i = logical_eq(gq_complex, gq_complex);
      current_statement__ = 67;
      gq_i = logical_eq(
               rvalue(gq_complex_array, "gq_complex_array", index_uni(1)),
               rvalue(gq_complex_array, "gq_complex_array", index_uni(1)));
      current_statement__ = 68;
      gq_i = logical_eq(
               rvalue(gq_complex_array_2d, "gq_complex_array_2d",
                 index_uni(1), index_uni(1)),
               rvalue(gq_complex_array, "gq_complex_array", index_uni(1)));
      current_statement__ = 69;
      gq_i = logical_eq(
               rvalue(gq_complex_array_2d, "gq_complex_array_2d",
                 index_uni(1), index_uni(1)),
               rvalue(gq_complex_array_2d, "gq_complex_array_2d",
                 index_uni(1), index_uni(1)));
      vars__.emplace_back(gq_i);
      vars__.emplace_back(gq_r);
      vars__.emplace_back(gq_complex.real());
      vars__.emplace_back(gq_complex.imag());
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(gq_complex_array[(sym1__ - 1)].real());
        vars__.emplace_back(gq_complex_array[(sym1__ - 1)].imag());
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          vars__.emplace_back(gq_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)].real());
          vars__.emplace_back(gq_complex_array_2d[(sym2__ - 1)][(sym1__ - 1)].imag());
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::complex<double> p_complex;
      p_complex = std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(p_complex, context__.vals_c("p_complex")[(1 - 1)],
        "assigning variable p_complex");
      std::vector<std::complex<double>> p_complex_array;
      p_complex_array = std::vector<std::complex<double>>(2, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<std::complex<local_scalar_t__>> p_complex_array_flat__;
        current_statement__ = 2;
        p_complex_array_flat__ = context__.vals_c("p_complex_array");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 2;
          assign(p_complex_array, p_complex_array_flat__[(pos__ - 1)],
            "assigning variable p_complex_array", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      std::vector<std::vector<std::complex<double>>> p_complex_array_2d;
      p_complex_array_2d = std::vector<std::vector<std::complex<double>>>(2, std::vector<std::complex<double>>(3, std::complex<double> (std::numeric_limits<double>::quiet_NaN(), std::numeric_limits<double>::quiet_NaN())));
      
      {
        std::vector<std::complex<local_scalar_t__>> p_complex_array_2d_flat__;
        current_statement__ = 3;
        p_complex_array_2d_flat__ = context__.vals_c("p_complex_array_2d");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 3;
            assign(p_complex_array_2d,
              p_complex_array_2d_flat__[(pos__ - 1)],
              "assigning variable p_complex_array_2d", index_uni(sym2__),
                                                         index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      vars__.emplace_back(p_complex.real());
      vars__.emplace_back(p_complex.imag());
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(p_complex_array[(sym1__ - 1)].real());
        vars__.emplace_back(p_complex_array[(sym1__ - 1)].imag());
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
          vars__.emplace_back(p_complex_array_2d[(sym1__ - 1)][(sym2__ - 1)].real());
          vars__.emplace_back(p_complex_array_2d[(sym1__ - 1)][(sym2__ - 1)].imag());
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"p_complex", "p_complex_array",
      "p_complex_array_2d", "tp_r", "tp_complex", "tp_complex_array",
      "tp_complex_array_2d", "gq_i", "gq_r", "gq_complex",
      "gq_complex_array", "gq_complex_array_2d"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(2)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2), static_cast<size_t>(3),
                          static_cast<size_t>(2)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "real");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "p_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
            param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_r");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "tp_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "tp_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_i");
      param_names__.emplace_back(std::string() + "gq_r");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "gq_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "gq_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "real");
    param_names__.emplace_back(std::string() + "p_complex" + '.' + "imag");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
        param_names__.emplace_back(std::string() + "p_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
      } 
    }
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
            param_names__.emplace_back(std::string() + "p_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "tp_r");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "tp_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "tp_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "tp_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "tp_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "gq_i");
      param_names__.emplace_back(std::string() + "gq_r");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "real");
      param_names__.emplace_back(std::string() + "gq_complex" + '.' + "imag");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "gq_complex_array" + '.' + std::to_string(sym1__) + '.' + "real");
          param_names__.emplace_back(std::string() + "gq_complex_array" + '.' + std::to_string(sym1__) + '.' + "imag");
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "gq_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "real");
              param_names__.emplace_back(std::string() + "gq_complex_array_2d" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__) + '.' + "imag");
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"p_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"parameters\"},{\"name\":\"p_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"parameters\"},{\"name\":\"tp_r\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_i\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"p_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"parameters\"},{\"name\":\"p_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"parameters\"},{\"name\":\"p_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"parameters\"},{\"name\":\"tp_r\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tp_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"gq_i\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_r\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex\",\"type\":{\"name\":\"complex\"},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"complex\"}},\"block\":\"generated_quantities\"},{\"name\":\"gq_complex_array_2d\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"complex\"}}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = complex_scalar_model_namespace::complex_scalar_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return complex_scalar_model_namespace::profiles__;
}

#endif



