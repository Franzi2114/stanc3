
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace parallel_reduce_test_model_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 50, column 2 to column 18)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 51, column 2 to column 20)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 52, column 2 to column 16)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 66, column 2 to column 61)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 67, column 2 to column 40)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 55, column 2 to column 65)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 57, column 2 to column 84)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 59, column 2 to column 17)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 60, column 2 to column 40)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 61, column 2 to column 33)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 62, column 2 to column 33)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 12, column 2 to column 17)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 13, column 2 to column 17)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 14, column 2 to column 25)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 17, column 2 to column 34)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 18, column 2 to column 31)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 19, column 2 to column 13)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 20, column 2 to column 14)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 21, column 2 to column 15)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 22, column 2 to column 16)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 23, column 2 to column 17)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 24, column 2 to column 15)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 25, column 2 to column 13)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 26, column 2 to column 15)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 27, column 2 to column 24)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 29, column 2 to column 57)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 30, column 2 to column 66)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 33, column 4 to column 65)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 34, column 4 to column 17)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 35, column 4 to column 17)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 36, column 4 to column 29)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 37, column 4 to column 19)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 38, column 4 to column 24)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 39, column 4 to column 26)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 41, column 6 to column 39)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 42, column 6 to column 24)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 43, column 6 to column 18)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 44, column 6 to column 16)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 40, column 30 to line 45, column 5)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 40, column 4 to line 45, column 5)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 32, column 16 to line 46, column 3)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 32, column 2 to line 46, column 3)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 7, column 4 to column 72)",
                                                      " (in './test/integration/good/code-gen/parallel_reduce_test_model.stan', line 6, column 99 to line 8, column 3)"};

template <typename T3__>
typename boost::math::tools::promote_args<T3__>::type
hierarchical_reduce(const int& start, const int& end,
                    const std::vector<int>& y_slice,
                    const std::vector<T3__>& log_lambda_group,
                    const std::vector<int>& gidx, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T3__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    current_statement__ = 43;
    return poisson_log_lpmf<false>(y_slice,
             rvalue(log_lambda_group,
               cons_list(
                 index_multi(rvalue(gidx,
                               cons_list(index_min_max(start, end),
                                 nil_index_list()), "gidx")),
                 nil_index_list()), "log_lambda_group"));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct hierarchical_reduce_functor__ {
template <typename T3__>
typename boost::math::tools::promote_args<T3__>::type
operator()(const int& start, const int& end, const std::vector<int>& y_slice,
           const std::vector<T3__>& log_lambda_group,
           const std::vector<int>& gidx, std::ostream* pstream__)  const 
{
return hierarchical_reduce(start, end, y_slice, log_lambda_group, gidx,
         pstream__);
}
};

class parallel_reduce_test_model_model : public model_base_crtp<parallel_reduce_test_model_model> {

 private:
  int pos__;
  int N;
  int G;
  int grainsize;
  double true_log_lambda;
  double true_tau;
  std::vector<int> y;
  std::vector<std::vector<int>> yg;
  std::vector<std::vector<double>> xr;
  std::vector<int> gidx;
  std::vector<int> gsidx;
  std::vector<int> start;
  std::vector<int> end;
  std::vector<int> group;
  Eigen::Matrix<double, -1, 1> theta_dummy;
 
 public:
  ~parallel_reduce_test_model_model() { }
  
  std::string model_name() const { return "parallel_reduce_test_model_model"; }
  
  parallel_reduce_test_model_model(stan::io::var_context& context__,
                                   unsigned int random_seed__ = 0,
                                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "parallel_reduce_test_model_model_namespace::parallel_reduce_test_model_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      
      current_statement__ = 12;
      N = context__.vals_i("N")[(1 - 1)];
      context__.validate_dims("data initialization","G","int",
          context__.to_vec());
      
      current_statement__ = 13;
      G = context__.vals_i("G")[(1 - 1)];
      context__.validate_dims("data initialization","grainsize","int",
          context__.to_vec());
      
      current_statement__ = 14;
      grainsize = context__.vals_i("grainsize")[(1 - 1)];
      
      current_statement__ = 15;
      true_log_lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      true_log_lambda = stan::math::log(5.0);
      
      current_statement__ = 16;
      true_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 16;
      true_tau = (stan::math::log(10) / 1.96);
      current_statement__ = 17;
      validate_non_negative_index("y", "(N * G)", (N * G));
      y = std::vector<int>((N * G), 0);
      
      current_statement__ = 18;
      validate_non_negative_index("yg", "G", G);
      current_statement__ = 18;
      validate_non_negative_index("yg", "N", N);
      yg = std::vector<std::vector<int>>(G, std::vector<int>(N, 0));
      
      current_statement__ = 19;
      validate_non_negative_index("xr", "G", G);
      current_statement__ = 19;
      validate_non_negative_index("xr", "0", 0);
      xr = std::vector<std::vector<double>>(G, std::vector<double>(0, 0));
      
      current_statement__ = 20;
      validate_non_negative_index("gidx", "(N * G)", (N * G));
      gidx = std::vector<int>((N * G), 0);
      
      current_statement__ = 21;
      validate_non_negative_index("gsidx", "(G + 1)", (G + 1));
      gsidx = std::vector<int>((G + 1), 0);
      
      current_statement__ = 22;
      validate_non_negative_index("start", "G", G);
      start = std::vector<int>(G, 0);
      
      current_statement__ = 23;
      validate_non_negative_index("end", "G", G);
      end = std::vector<int>(G, 0);
      
      current_statement__ = 24;
      validate_non_negative_index("group", "G", G);
      group = std::vector<int>(G, 0);
      
      current_statement__ = 25;
      validate_non_negative_index("theta_dummy", "0", 0);
      theta_dummy = Eigen::Matrix<double, -1, 1>(0);
      
      current_statement__ = 25;
      for (size_t sym1__ = 1; sym1__ <= 0; ++sym1__) {
        current_statement__ = 25;
        assign(theta_dummy, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable theta_dummy");}
      current_statement__ = 26;
      if (pstream__) {
        stan_print(pstream__, "Simulating problem size: G = ");
        stan_print(pstream__, G);
        stan_print(pstream__, "; N = ");
        stan_print(pstream__, N);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 27;
      if (pstream__) {
        stan_print(pstream__, "Using parallel reduce TBB with grainsize = ");
        stan_print(pstream__, grainsize);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 42;
      for (size_t g = 1; g <= G; ++g) {
        double lambda_group;
        
        current_statement__ = 28;
        lambda_group = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 28;
        lambda_group = lognormal_rng(true_log_lambda, true_tau, base_rng__);
        int elem;
        
        current_statement__ = 29;
        elem = 1;
        current_statement__ = 30;
        assign(group, cons_list(index_uni(g), nil_index_list()), g,
          "assigning variable group");
        current_statement__ = 31;
        assign(start, cons_list(index_uni(g), nil_index_list()),
          (((g - 1) * N) + 1), "assigning variable start");
        current_statement__ = 32;
        assign(end, cons_list(index_uni(g), nil_index_list()), (g * N),
          "assigning variable end");
        current_statement__ = 33;
        assign(gsidx, cons_list(index_uni(g), nil_index_list()),
          start[(g - 1)], "assigning variable gsidx");
        current_statement__ = 34;
        assign(gsidx, cons_list(index_uni((g + 1)), nil_index_list()),
          (end[(g - 1)] + 1), "assigning variable gsidx");
        current_statement__ = 40;
        for (size_t i = start[(g - 1)]; i <= end[(g - 1)]; ++i) {
          current_statement__ = 35;
          assign(y, cons_list(index_uni(i), nil_index_list()),
            poisson_rng(lambda_group, base_rng__), "assigning variable y");
          current_statement__ = 36;
          assign(yg,
            cons_list(index_uni(g),
              cons_list(index_uni(elem), nil_index_list())), y[(i - 1)],
            "assigning variable yg");
          current_statement__ = 37;
          assign(gidx, cons_list(index_uni(i), nil_index_list()), g,
            "assigning variable gidx");
          current_statement__ = 38;
          elem = (elem + 1);}}
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 13;
      current_statement__ = 13;
      check_greater_or_equal(function__, "G", G, 0);
      current_statement__ = 14;
      current_statement__ = 14;
      check_greater_or_equal(function__, "grainsize", grainsize, 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      current_statement__ = 3;
      validate_non_negative_index("eta", "G", G);
      num_params_r__ += G;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "parallel_reduce_test_model_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ log_lambda;
      
      current_statement__ = 1;
      log_lambda = in__.scalar();
      local_scalar_t__ tau;
      
      current_statement__ = 2;
      tau = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        tau = stan::math::lb_constrain(tau, 0, lp__);
      } else {
        current_statement__ = 2;
        tau = stan::math::lb_constrain(tau, 0);
      }
      current_statement__ = 3;
      validate_non_negative_index("eta", "G", G);
      Eigen::Matrix<local_scalar_t__, -1, 1> eta;
      eta = Eigen::Matrix<local_scalar_t__, -1, 1>(G);
      
      current_statement__ = 3;
      eta = in__.vector(G);
      {
        current_statement__ = 6;
        validate_non_negative_index("log_lambda_group", "G", G);
        std::vector<local_scalar_t__> log_lambda_group;
        log_lambda_group = std::vector<local_scalar_t__>(G, 0);
        
        current_statement__ = 6;
        assign(log_lambda_group, nil_index_list(),
          to_array_1d(add(log_lambda, multiply(eta, tau))),
          "assigning variable log_lambda_group");
        local_scalar_t__ lpmf;
        
        current_statement__ = 7;
        lpmf = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 7;
        lpmf = reduce_sum<hierarchical_reduce_functor__>(y, grainsize,
                 pstream__, log_lambda_group, gidx);
        current_statement__ = 8;
        lp_accum__.add(lpmf);
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<false>(log_lambda, 0, 1));
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<false>(tau, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(normal_lpdf<false>(eta, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "parallel_reduce_test_model_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    
    try {
      double log_lambda;
      
      current_statement__ = 1;
      log_lambda = in__.scalar();
      double tau;
      
      current_statement__ = 2;
      tau = in__.scalar();
      current_statement__ = 2;
      tau = stan::math::lb_constrain(tau, 0);
      current_statement__ = 3;
      validate_non_negative_index("eta", "G", G);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(G);
      
      current_statement__ = 3;
      eta = in__.vector(G);
      vars__.push_back(log_lambda);
      vars__.push_back(tau);
      for (size_t sym1__ = 1; sym1__ <= G; ++sym1__) {
        vars__.push_back(eta[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double msq_log_lambda;
      
      current_statement__ = 4;
      msq_log_lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      msq_log_lambda = square((true_log_lambda - log_lambda));
      double msq_tau;
      
      current_statement__ = 5;
      msq_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      msq_tau = square((true_tau - tau));
      vars__.push_back(msq_log_lambda);
      vars__.push_back(msq_tau);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      double log_lambda;
      
      current_statement__ = 1;
      log_lambda = context__.vals_r("log_lambda")[(1 - 1)];
      double tau;
      
      current_statement__ = 2;
      tau = context__.vals_r("tau")[(1 - 1)];
      current_statement__ = 2;
      tau = stan::math::lb_free(tau, 0);
      current_statement__ = 3;
      validate_non_negative_index("eta", "G", G);
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(G);
      
      {
        std::vector<local_scalar_t__> eta_flat__;
        current_statement__ = 3;
        assign(eta_flat__, nil_index_list(), context__.vals_r("eta"),
          "assigning variable eta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (size_t sym1__ = 1; sym1__ <= G; ++sym1__) {
          current_statement__ = 3;
          assign(eta, cons_list(index_uni(sym1__), nil_index_list()),
            eta_flat__[(pos__ - 1)], "assigning variable eta");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      vars__.push_back(log_lambda);
      vars__.push_back(tau);
      for (size_t sym1__ = 1; sym1__ <= G; ++sym1__) {
        vars__.push_back(eta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("log_lambda");
    names__.push_back("tau");
    names__.push_back("eta");
    names__.push_back("msq_log_lambda");
    names__.push_back("msq_tau");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(G);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "log_lambda");
    param_names__.push_back(std::string() + "tau");
    for (size_t sym1__ = 1; sym1__ <= G; ++sym1__) {
      {
        param_names__.push_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.push_back(std::string() + "msq_log_lambda");
      param_names__.push_back(std::string() + "msq_tau");
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "log_lambda");
    param_names__.push_back(std::string() + "tau");
    for (size_t sym1__ = 1; sym1__ <= G; ++sym1__) {
      {
        param_names__.push_back(std::string() + "eta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      param_names__.push_back(std::string() + "msq_log_lambda");
      param_names__.push_back(std::string() + "msq_tau");
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << G << "},\"block\":\"parameters\"},{\"name\":\"msq_log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"msq_tau\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << G << "},\"block\":\"parameters\"},{\"name\":\"msq_log_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"msq_tau\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

typedef parallel_reduce_test_model_model_namespace::parallel_reduce_test_model_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


