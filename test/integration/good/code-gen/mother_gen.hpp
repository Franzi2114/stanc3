
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace mother_gen_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 8, column 2 to column 32)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 9, column 2 to column 23)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 10, column 2 to column 27)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 11, column 2 to column 18)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 12, column 2 to column 24)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 13, column 2 to column 28)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 14, column 2 to column 26)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 15, column 2 to column 32)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 16, column 2 to column 36)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 17, column 2 to column 45)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 18, column 2 to column 23)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 19, column 2 to column 29)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 20, column 2 to column 33)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 21, column 2 to column 38)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 22, column 2 to column 36)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 23, column 2 to column 42)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 2, column 2 to column 12)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 3, column 2 to column 12)",
                                                      " (in '/Users/xitrium/scm/stanc3/test/integration/good/code-gen/mother_gen.stan', line 4, column 2 to column 16)"};


class mother_gen_model : public model_base_crtp<mother_gen_model> {

 private:
  int pos__;
  int N;
  int M;
  int K;
 
 public:
  ~mother_gen_model() { }
  
  std::string model_name() const { return "mother_gen_model"; }
  
  mother_gen_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "mother_gen_model_namespace::mother_gen_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      
      current_statement__ = 18;
      N = 2;
      
      current_statement__ = 19;
      M = 3;
      
      current_statement__ = 20;
      K = (N * M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += 1;
    num_params_r__ += N;
    num_params_r__ += N * M * K;
    num_params_r__ += N;
    num_params_r__ += N * N;
    num_params_r__ += N * M * K * N;
    num_params_r__ += N;
    num_params_r__ += N * N;
    num_params_r__ += N * M * K * N;
    num_params_r__ += 4 * 5 * 2 * 3;
    num_params_r__ += (N - 1);
    num_params_r__ += N * (N - 1);
    num_params_r__ += N * M * K * (N - 1);
    num_params_r__ += ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4));
    num_params_r__ += ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3));
    num_params_r__ += K * ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3));
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "mother_gen_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ J;
      
      current_statement__ = 2;
      J = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        J = lub_constrain(J, -2.0, 2.0, lp__);
      } else {
        current_statement__ = 2;
        J = lub_constrain(J, -2.0, 2.0);
      }
      std::vector<local_scalar_t__> d_real_1d_ar;
      d_real_1d_ar = std::vector<local_scalar_t__>(N, 0);
      
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 3;
        assign(d_real_1d_ar, cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(
               ), "assigning variable d_real_1d_ar");}
      std::vector<std::vector<std::vector<local_scalar_t__>>> d_real_3d_ar;
      d_real_3d_ar = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(M, std::vector<local_scalar_t__>(K, 0)));
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 4;
        for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 4;
          for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 4;
            assign(d_real_3d_ar, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list()))), in__.scalar(
                   ), "assigning variable d_real_3d_ar");}}}
      Eigen::Matrix<local_scalar_t__, -1, 1> d_vec;
      d_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      current_statement__ = 5;
      d_vec = in__.vector(N);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> d_1d_vec;
      d_1d_vec = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      current_statement__ = 6;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 6;
        assign(d_1d_vec, cons_list(index_uni(sym1__), nil_index_list()), in__.vector(
               N), "assigning variable d_1d_vec");}
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> d_3d_vec;
      d_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      current_statement__ = 7;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 7;
        for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 7;
          for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 7;
            assign(d_3d_vec, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list()))), in__.vector(
                   N), "assigning variable d_3d_vec");}}}
      Eigen::Matrix<local_scalar_t__, 1, -1> d_row_vec;
      d_row_vec = Eigen::Matrix<local_scalar_t__, 1, -1>(N);
      
      current_statement__ = 8;
      d_row_vec = in__.row_vector(N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> d_1d_row_vec;
      d_1d_row_vec = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
      
      current_statement__ = 9;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 9;
        assign(d_1d_row_vec, cons_list(index_uni(sym1__), nil_index_list()), in__.row_vector(
               N), "assigning variable d_1d_row_vec");}
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>> d_3d_row_vec;
      d_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(K, Eigen::Matrix<local_scalar_t__, 1, -1>(N))));
      
      current_statement__ = 10;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 10;
        for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 10;
          for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 10;
            assign(d_3d_row_vec, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list()))), in__.row_vector(
                   N), "assigning variable d_3d_row_vec");}}}
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> d_ar_mat;
      d_ar_mat = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(4, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(5, Eigen::Matrix<local_scalar_t__, -1, -1>(2, 3)));
      
      current_statement__ = 11;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 11;
        for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 11;
          assign(d_ar_mat, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), in__.matrix(
                 2, 3), "assigning variable d_ar_mat");}}
      current_statement__ = 11;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 11;
        for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 11;
          for (size_t sym3__ = 1; sym3__ <= 2; ++sym3__) {
            current_statement__ = 11;
            for (size_t sym4__ = 1; sym4__ <= 3; ++sym4__) {
              current_statement__ = 11;
              if (jacobian__) {
                current_statement__ = 11;
                assign(d_ar_mat, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())))), lub_constrain(
                       d_ar_mat[(sym1__ - 1)][(sym2__ - 1)].coeffRef(sym3__, sym4__),
                       0, 1, lp__), "assigning variable d_ar_mat");
              } else {
                current_statement__ = 11;
                assign(d_ar_mat, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())))), lub_constrain(
                       d_ar_mat[(sym1__ - 1)][(sym2__ - 1)].coeffRef(sym3__, sym4__),
                       0, 1), "assigning variable d_ar_mat");
              }}}}}
      Eigen::Matrix<local_scalar_t__, -1, 1> d_simplex_sym1__;
      d_simplex_sym1__ = Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1));
      
      Eigen::Matrix<local_scalar_t__, -1, 1> d_simplex;
      d_simplex = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      current_statement__ = 12;
      d_simplex_sym1__ = in__.vector((N - 1));
      current_statement__ = 12;
      if (jacobian__) {
        current_statement__ = 12;
        assign(d_simplex, nil_index_list(), simplex_constrain(d_simplex_sym1__,
                                                              lp__), "assigning variable d_simplex");
      } else {
        current_statement__ = 12;
        assign(d_simplex, nil_index_list(), simplex_constrain(d_simplex_sym1__), "assigning variable d_simplex");
      }
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> d_1d_simplex_sym2__;
      d_1d_simplex_sym2__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1)));
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> d_1d_simplex;
      d_1d_simplex = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      current_statement__ = 13;
      for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
        current_statement__ = 13;
        assign(d_1d_simplex_sym2__, cons_list(index_uni(sym3__), nil_index_list()), in__.vector(
               (N - 1)), "assigning variable d_1d_simplex_sym2__");}
      current_statement__ = 13;
      for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
        current_statement__ = 13;
        if (jacobian__) {
          current_statement__ = 13;
          assign(d_1d_simplex, cons_list(index_uni(sym3__), nil_index_list()), simplex_constrain(
                 d_1d_simplex_sym2__[(sym3__ - 1)], lp__), "assigning variable d_1d_simplex");
        } else {
          current_statement__ = 13;
          assign(d_1d_simplex, cons_list(index_uni(sym3__), nil_index_list()), simplex_constrain(
                 d_1d_simplex_sym2__[(sym3__ - 1)]), "assigning variable d_1d_simplex");
        }}
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> d_3d_simplex_sym3__;
      d_3d_simplex_sym3__ = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1)))));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> d_3d_simplex;
      d_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      current_statement__ = 14;
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        current_statement__ = 14;
        for (size_t sym5__ = 1; sym5__ <= M; ++sym5__) {
          current_statement__ = 14;
          for (size_t sym6__ = 1; sym6__ <= K; ++sym6__) {
            current_statement__ = 14;
            assign(d_3d_simplex_sym3__, cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), cons_list(index_uni(sym6__), nil_index_list()))), in__.vector(
                   (N - 1)), "assigning variable d_3d_simplex_sym3__");}}}
      current_statement__ = 14;
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        current_statement__ = 14;
        for (size_t sym5__ = 1; sym5__ <= M; ++sym5__) {
          current_statement__ = 14;
          for (size_t sym6__ = 1; sym6__ <= K; ++sym6__) {
            current_statement__ = 14;
            if (jacobian__) {
              current_statement__ = 14;
              assign(d_3d_simplex, cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), cons_list(index_uni(sym6__), nil_index_list()))), simplex_constrain(
                     d_3d_simplex_sym3__[(sym4__ - 1)][(sym5__ - 1)][(sym6__ - 1)],
                     lp__), "assigning variable d_3d_simplex");
            } else {
              current_statement__ = 14;
              assign(d_3d_simplex, cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), cons_list(index_uni(sym6__), nil_index_list()))), simplex_constrain(
                     d_3d_simplex_sym3__[(sym4__ - 1)][(sym5__ - 1)][(sym6__ - 1)]), "assigning variable d_3d_simplex");
            }}}}
      Eigen::Matrix<local_scalar_t__, -1, 1> d_cfcov_54_sym4__;
      d_cfcov_54_sym4__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)));
      
      Eigen::Matrix<local_scalar_t__, -1, -1> d_cfcov_54;
      d_cfcov_54 = Eigen::Matrix<local_scalar_t__, -1, -1>(5, 4);
      
      current_statement__ = 15;
      d_cfcov_54_sym4__ = in__.vector(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)));
      current_statement__ = 15;
      if (jacobian__) {
        current_statement__ = 15;
        assign(d_cfcov_54, nil_index_list(), cholesky_factor_constrain(
               d_cfcov_54_sym4__, 5, 4, lp__), "assigning variable d_cfcov_54");
      } else {
        current_statement__ = 15;
        assign(d_cfcov_54, nil_index_list(), cholesky_factor_constrain(
               d_cfcov_54_sym4__, 5, 4), "assigning variable d_cfcov_54");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> d_cfcov_33_sym5__;
      d_cfcov_33_sym5__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)));
      
      Eigen::Matrix<local_scalar_t__, -1, -1> d_cfcov_33;
      d_cfcov_33 = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3);
      
      current_statement__ = 16;
      d_cfcov_33_sym5__ = in__.vector(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)));
      current_statement__ = 16;
      if (jacobian__) {
        current_statement__ = 16;
        assign(d_cfcov_33, nil_index_list(), cholesky_factor_constrain(
               d_cfcov_33_sym5__, 3, 3, lp__), "assigning variable d_cfcov_33");
      } else {
        current_statement__ = 16;
        assign(d_cfcov_33, nil_index_list(), cholesky_factor_constrain(
               d_cfcov_33_sym5__, 3, 3), "assigning variable d_cfcov_33");
      }
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> d_cfcov_33_ar_sym6__;
      d_cfcov_33_ar_sym6__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))));
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> d_cfcov_33_ar;
      d_cfcov_33_ar = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3));
      
      current_statement__ = 17;
      for (size_t sym7__ = 1; sym7__ <= K; ++sym7__) {
        current_statement__ = 17;
        assign(d_cfcov_33_ar_sym6__, cons_list(index_uni(sym7__), nil_index_list()), in__.vector(
               ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))), "assigning variable d_cfcov_33_ar_sym6__");
      }
      current_statement__ = 17;
      for (size_t sym7__ = 1; sym7__ <= K; ++sym7__) {
        current_statement__ = 17;
        if (jacobian__) {
          current_statement__ = 17;
          assign(d_cfcov_33_ar, cons_list(index_uni(sym7__), nil_index_list()), cholesky_factor_constrain(
                 d_cfcov_33_ar_sym6__[(sym7__ - 1)], 3, 3, lp__), "assigning variable d_cfcov_33_ar");
        } else {
          current_statement__ = 17;
          assign(d_cfcov_33_ar, cons_list(index_uni(sym7__), nil_index_list()), cholesky_factor_constrain(
                 d_cfcov_33_ar_sym6__[(sym7__ - 1)], 3, 3), "assigning variable d_cfcov_33_ar");
        }}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "mother_gen_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      double J;
      
      current_statement__ = 2;
      J = in__.scalar();
      current_statement__ = 2;
      J = lub_constrain(J, -2.0, 2.0);
      std::vector<double> d_real_1d_ar;
      d_real_1d_ar = std::vector<double>(N, 0);
      
      current_statement__ = 3;
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        current_statement__ = 3;
        assign(d_real_1d_ar, cons_list(index_uni(sym7__), nil_index_list()), in__.scalar(
               ), "assigning variable d_real_1d_ar");}
      std::vector<std::vector<std::vector<double>>> d_real_3d_ar;
      d_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      current_statement__ = 4;
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        current_statement__ = 4;
        for (size_t sym8__ = 1; sym8__ <= M; ++sym8__) {
          current_statement__ = 4;
          for (size_t sym9__ = 1; sym9__ <= K; ++sym9__) {
            current_statement__ = 4;
            assign(d_real_3d_ar, cons_list(index_uni(sym7__), cons_list(index_uni(sym8__), cons_list(index_uni(sym9__), nil_index_list()))), in__.scalar(
                   ), "assigning variable d_real_3d_ar");}}}
      Eigen::Matrix<double, -1, 1> d_vec;
      d_vec = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 5;
      d_vec = in__.vector(N);
      std::vector<Eigen::Matrix<double, -1, 1>> d_1d_vec;
      d_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 6;
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        current_statement__ = 6;
        assign(d_1d_vec, cons_list(index_uni(sym7__), nil_index_list()), in__.vector(
               N), "assigning variable d_1d_vec");}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_vec;
      d_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 7;
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        current_statement__ = 7;
        for (size_t sym8__ = 1; sym8__ <= M; ++sym8__) {
          current_statement__ = 7;
          for (size_t sym9__ = 1; sym9__ <= K; ++sym9__) {
            current_statement__ = 7;
            assign(d_3d_vec, cons_list(index_uni(sym7__), cons_list(index_uni(sym8__), cons_list(index_uni(sym9__), nil_index_list()))), in__.vector(
                   N), "assigning variable d_3d_vec");}}}
      Eigen::Matrix<double, 1, -1> d_row_vec;
      d_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      current_statement__ = 8;
      d_row_vec = in__.row_vector(N);
      std::vector<Eigen::Matrix<double, 1, -1>> d_1d_row_vec;
      d_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      current_statement__ = 9;
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        current_statement__ = 9;
        assign(d_1d_row_vec, cons_list(index_uni(sym7__), nil_index_list()), in__.row_vector(
               N), "assigning variable d_1d_row_vec");}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> d_3d_row_vec;
      d_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      current_statement__ = 10;
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        current_statement__ = 10;
        for (size_t sym8__ = 1; sym8__ <= M; ++sym8__) {
          current_statement__ = 10;
          for (size_t sym9__ = 1; sym9__ <= K; ++sym9__) {
            current_statement__ = 10;
            assign(d_3d_row_vec, cons_list(index_uni(sym7__), cons_list(index_uni(sym8__), cons_list(index_uni(sym9__), nil_index_list()))), in__.row_vector(
                   N), "assigning variable d_3d_row_vec");}}}
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> d_ar_mat;
      d_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      current_statement__ = 11;
      for (size_t sym7__ = 1; sym7__ <= 4; ++sym7__) {
        current_statement__ = 11;
        for (size_t sym8__ = 1; sym8__ <= 5; ++sym8__) {
          current_statement__ = 11;
          assign(d_ar_mat, cons_list(index_uni(sym7__), cons_list(index_uni(sym8__), nil_index_list())), in__.matrix(
                 2, 3), "assigning variable d_ar_mat");}}
      current_statement__ = 11;
      for (size_t sym7__ = 1; sym7__ <= 4; ++sym7__) {
        current_statement__ = 11;
        for (size_t sym8__ = 1; sym8__ <= 5; ++sym8__) {
          current_statement__ = 11;
          for (size_t sym9__ = 1; sym9__ <= 2; ++sym9__) {
            current_statement__ = 11;
            for (size_t sym10__ = 1; sym10__ <= 3; ++sym10__) {
              current_statement__ = 11;
              assign(d_ar_mat, cons_list(index_uni(sym7__), cons_list(index_uni(sym8__), cons_list(index_uni(sym9__), cons_list(index_uni(sym10__), nil_index_list())))), lub_constrain(
                     d_ar_mat[(sym7__ - 1)][(sym8__ - 1)].coeffRef(sym9__, sym10__),
                     0, 1), "assigning variable d_ar_mat");}}}}
      Eigen::Matrix<double, -1, 1> d_simplex_sym7__;
      d_simplex_sym7__ = Eigen::Matrix<double, -1, 1>((N - 1));
      
      Eigen::Matrix<double, -1, 1> d_simplex;
      d_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 12;
      d_simplex_sym7__ = in__.vector((N - 1));
      current_statement__ = 12;
      assign(d_simplex, nil_index_list(), simplex_constrain(d_simplex_sym7__), "assigning variable d_simplex");
      std::vector<Eigen::Matrix<double, -1, 1>> d_1d_simplex_sym8__;
      d_1d_simplex_sym8__ = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>((N - 1)));
      
      std::vector<Eigen::Matrix<double, -1, 1>> d_1d_simplex;
      d_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 13;
      for (size_t sym9__ = 1; sym9__ <= N; ++sym9__) {
        current_statement__ = 13;
        assign(d_1d_simplex_sym8__, cons_list(index_uni(sym9__), nil_index_list()), in__.vector(
               (N - 1)), "assigning variable d_1d_simplex_sym8__");}
      current_statement__ = 13;
      for (size_t sym9__ = 1; sym9__ <= N; ++sym9__) {
        current_statement__ = 13;
        assign(d_1d_simplex, cons_list(index_uni(sym9__), nil_index_list()), simplex_constrain(
               d_1d_simplex_sym8__[(sym9__ - 1)]), "assigning variable d_1d_simplex");
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_simplex_sym9__;
      d_3d_simplex_sym9__ = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>((N - 1)))));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_simplex;
      d_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 14;
      for (size_t sym10__ = 1; sym10__ <= N; ++sym10__) {
        current_statement__ = 14;
        for (size_t sym11__ = 1; sym11__ <= M; ++sym11__) {
          current_statement__ = 14;
          for (size_t sym12__ = 1; sym12__ <= K; ++sym12__) {
            current_statement__ = 14;
            assign(d_3d_simplex_sym9__, cons_list(index_uni(sym10__), cons_list(index_uni(sym11__), cons_list(index_uni(sym12__), nil_index_list()))), in__.vector(
                   (N - 1)), "assigning variable d_3d_simplex_sym9__");}}}
      current_statement__ = 14;
      for (size_t sym10__ = 1; sym10__ <= N; ++sym10__) {
        current_statement__ = 14;
        for (size_t sym11__ = 1; sym11__ <= M; ++sym11__) {
          current_statement__ = 14;
          for (size_t sym12__ = 1; sym12__ <= K; ++sym12__) {
            current_statement__ = 14;
            assign(d_3d_simplex, cons_list(index_uni(sym10__), cons_list(index_uni(sym11__), cons_list(index_uni(sym12__), nil_index_list()))), simplex_constrain(
                   d_3d_simplex_sym9__[(sym10__ - 1)][(sym11__ - 1)][(sym12__ - 1)]), "assigning variable d_3d_simplex");
          }}}
      Eigen::Matrix<double, -1, 1> d_cfcov_54_sym10__;
      d_cfcov_54_sym10__ = Eigen::Matrix<double, -1, 1>(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)));
      
      Eigen::Matrix<double, -1, -1> d_cfcov_54;
      d_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      current_statement__ = 15;
      d_cfcov_54_sym10__ = in__.vector(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)));
      current_statement__ = 15;
      assign(d_cfcov_54, nil_index_list(), cholesky_factor_constrain(
             d_cfcov_54_sym10__, 5, 4), "assigning variable d_cfcov_54");
      Eigen::Matrix<double, -1, 1> d_cfcov_33_sym11__;
      d_cfcov_33_sym11__ = Eigen::Matrix<double, -1, 1>(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)));
      
      Eigen::Matrix<double, -1, -1> d_cfcov_33;
      d_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      current_statement__ = 16;
      d_cfcov_33_sym11__ = in__.vector(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)));
      current_statement__ = 16;
      assign(d_cfcov_33, nil_index_list(), cholesky_factor_constrain(
             d_cfcov_33_sym11__, 3, 3), "assigning variable d_cfcov_33");
      std::vector<Eigen::Matrix<double, -1, 1>> d_cfcov_33_ar_sym12__;
      d_cfcov_33_ar_sym12__ = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))));
      
      std::vector<Eigen::Matrix<double, -1, -1>> d_cfcov_33_ar;
      d_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      current_statement__ = 17;
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        current_statement__ = 17;
        assign(d_cfcov_33_ar_sym12__, cons_list(index_uni(sym13__), nil_index_list()), in__.vector(
               ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))), "assigning variable d_cfcov_33_ar_sym12__");
      }
      current_statement__ = 17;
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        current_statement__ = 17;
        assign(d_cfcov_33_ar, cons_list(index_uni(sym13__), nil_index_list()), cholesky_factor_constrain(
               d_cfcov_33_ar_sym12__[(sym13__ - 1)], 3, 3), "assigning variable d_cfcov_33_ar");
      }
      vars__.push_back(J);
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        vars__.push_back(d_real_1d_ar[(sym7__ - 1)]);}
      for (size_t sym9__ = 1; sym9__ <= K; ++sym9__) {
        for (size_t sym8__ = 1; sym8__ <= M; ++sym8__) {
          for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
            vars__.push_back(d_real_3d_ar[(sym7__ - 1)][(sym8__ - 1)][(sym9__ - 1)]);
          }}}
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        vars__.push_back(d_vec[(sym7__ - 1)]);}
      for (size_t sym8__ = 1; sym8__ <= N; ++sym8__) {
        for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
          vars__.push_back(d_1d_vec[(sym7__ - 1)][(sym8__ - 1)]);}}
      for (size_t sym10__ = 1; sym10__ <= N; ++sym10__) {
        for (size_t sym9__ = 1; sym9__ <= K; ++sym9__) {
          for (size_t sym8__ = 1; sym8__ <= M; ++sym8__) {
            for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
              vars__.push_back(d_3d_vec[(sym7__ - 1)][(sym8__ - 1)][(sym9__ - 1)][(sym10__ - 1)]);
            }}}}
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        vars__.push_back(d_row_vec[(sym7__ - 1)]);}
      for (size_t sym8__ = 1; sym8__ <= N; ++sym8__) {
        for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
          vars__.push_back(d_1d_row_vec[(sym7__ - 1)][(sym8__ - 1)]);}}
      for (size_t sym10__ = 1; sym10__ <= N; ++sym10__) {
        for (size_t sym9__ = 1; sym9__ <= K; ++sym9__) {
          for (size_t sym8__ = 1; sym8__ <= M; ++sym8__) {
            for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
              vars__.push_back(d_3d_row_vec[(sym7__ - 1)][(sym8__ - 1)][(sym9__ - 1)][(sym10__ - 1)]);
            }}}}
      for (size_t sym8__ = 1; sym8__ <= 5; ++sym8__) {
        for (size_t sym7__ = 1; sym7__ <= 4; ++sym7__) {
          for (size_t sym9__ = 1; sym9__ <= 2; ++sym9__) {
            for (size_t sym10__ = 1; sym10__ <= 3; ++sym10__) {
              vars__.push_back(d_ar_mat[(sym7__ - 1)][(sym8__ - 1)].coeffRef(sym9__, sym10__));
            }}}}
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        vars__.push_back(d_simplex[(sym7__ - 1)]);}
      for (size_t sym8__ = 1; sym8__ <= N; ++sym8__) {
        for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
          vars__.push_back(d_1d_simplex[(sym7__ - 1)][(sym8__ - 1)]);}}
      for (size_t sym10__ = 1; sym10__ <= N; ++sym10__) {
        for (size_t sym9__ = 1; sym9__ <= K; ++sym9__) {
          for (size_t sym8__ = 1; sym8__ <= M; ++sym8__) {
            for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
              vars__.push_back(d_3d_simplex[(sym7__ - 1)][(sym8__ - 1)][(sym9__ - 1)][(sym10__ - 1)]);
            }}}}
      for (size_t sym7__ = 1; sym7__ <= 5; ++sym7__) {
        for (size_t sym8__ = 1; sym8__ <= 4; ++sym8__) {
          vars__.push_back(d_cfcov_54.coeffRef(sym7__, sym8__));}}
      for (size_t sym7__ = 1; sym7__ <= 3; ++sym7__) {
        for (size_t sym8__ = 1; sym8__ <= 3; ++sym8__) {
          vars__.push_back(d_cfcov_33.coeffRef(sym7__, sym8__));}}
      for (size_t sym7__ = 1; sym7__ <= K; ++sym7__) {
        for (size_t sym8__ = 1; sym8__ <= 3; ++sym8__) {
          for (size_t sym9__ = 1; sym9__ <= 3; ++sym9__) {
            vars__.push_back(d_cfcov_33_ar[(sym7__ - 1)].coeffRef(sym8__, sym9__));
          }}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      double J;
      
      current_statement__ = 2;
      J = context__.vals_r("J")[(1 - 1)];
      current_statement__ = 2;
      J = lub_free(J, -2.0, 2.0);
      std::vector<double> d_real_1d_ar;
      d_real_1d_ar = std::vector<double>(N, 0);
      
      current_statement__ = 3;
      pos__ = 1;
      current_statement__ = 3;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 3;
        assign(d_real_1d_ar, cons_list(index_uni(sym13__), nil_index_list()), context__.vals_r("d_real_1d_ar")[(pos__ - 1)], "assigning variable d_real_1d_ar");
        current_statement__ = 3;
        pos__ = (pos__ + 1);}
      std::vector<std::vector<std::vector<double>>> d_real_3d_ar;
      d_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      current_statement__ = 4;
      pos__ = 1;
      current_statement__ = 4;
      for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
        current_statement__ = 4;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 4;
          for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
            current_statement__ = 4;
            assign(d_real_3d_ar, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), cons_list(index_uni(sym15__), nil_index_list()))), context__.vals_r("d_real_3d_ar")[(pos__ - 1)], "assigning variable d_real_3d_ar");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}}
      Eigen::Matrix<double, -1, 1> d_vec;
      d_vec = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 5;
      pos__ = 1;
      current_statement__ = 5;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 5;
        assign(d_vec, cons_list(index_uni(sym13__), nil_index_list()), context__.vals_r("d_vec")[(pos__ - 1)], "assigning variable d_vec");
        current_statement__ = 5;
        pos__ = (pos__ + 1);}
      std::vector<Eigen::Matrix<double, -1, 1>> d_1d_vec;
      d_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 6;
      pos__ = 1;
      current_statement__ = 6;
      for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
        current_statement__ = 6;
        for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
          current_statement__ = 6;
          assign(d_1d_vec, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), nil_index_list())), context__.vals_r("d_1d_vec")[(pos__ - 1)], "assigning variable d_1d_vec");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_vec;
      d_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 7;
      pos__ = 1;
      current_statement__ = 7;
      for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
        current_statement__ = 7;
        for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
          current_statement__ = 7;
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            current_statement__ = 7;
            for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
              current_statement__ = 7;
              assign(d_3d_vec, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), cons_list(index_uni(sym15__), cons_list(index_uni(sym16__), nil_index_list())))), context__.vals_r("d_3d_vec")[(pos__ - 1)], "assigning variable d_3d_vec");
              current_statement__ = 7;
              pos__ = (pos__ + 1);}}}}
      Eigen::Matrix<double, 1, -1> d_row_vec;
      d_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      current_statement__ = 8;
      pos__ = 1;
      current_statement__ = 8;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 8;
        assign(d_row_vec, cons_list(index_uni(sym13__), nil_index_list()), context__.vals_r("d_row_vec")[(pos__ - 1)], "assigning variable d_row_vec");
        current_statement__ = 8;
        pos__ = (pos__ + 1);}
      std::vector<Eigen::Matrix<double, 1, -1>> d_1d_row_vec;
      d_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      current_statement__ = 9;
      pos__ = 1;
      current_statement__ = 9;
      for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
        current_statement__ = 9;
        for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
          current_statement__ = 9;
          assign(d_1d_row_vec, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), nil_index_list())), context__.vals_r("d_1d_row_vec")[(pos__ - 1)], "assigning variable d_1d_row_vec");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> d_3d_row_vec;
      d_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      current_statement__ = 10;
      pos__ = 1;
      current_statement__ = 10;
      for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
        current_statement__ = 10;
        for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
          current_statement__ = 10;
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            current_statement__ = 10;
            for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
              current_statement__ = 10;
              assign(d_3d_row_vec, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), cons_list(index_uni(sym15__), cons_list(index_uni(sym16__), nil_index_list())))), context__.vals_r("d_3d_row_vec")[(pos__ - 1)], "assigning variable d_3d_row_vec");
              current_statement__ = 10;
              pos__ = (pos__ + 1);}}}}
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> d_ar_mat;
      d_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      current_statement__ = 11;
      pos__ = 1;
      current_statement__ = 11;
      for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
        current_statement__ = 11;
        for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
          current_statement__ = 11;
          for (size_t sym15__ = 1; sym15__ <= 2; ++sym15__) {
            current_statement__ = 11;
            for (size_t sym16__ = 1; sym16__ <= 3; ++sym16__) {
              current_statement__ = 11;
              assign(d_ar_mat, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), cons_list(index_uni(sym15__), cons_list(index_uni(sym16__), nil_index_list())))), context__.vals_r("d_ar_mat")[(1 - 1)], "assigning variable d_ar_mat");
            }}}}
      current_statement__ = 11;
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        current_statement__ = 11;
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          current_statement__ = 11;
          for (size_t sym15__ = 1; sym15__ <= 2; ++sym15__) {
            current_statement__ = 11;
            for (size_t sym16__ = 1; sym16__ <= 3; ++sym16__) {
              current_statement__ = 11;
              assign(d_ar_mat, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), cons_list(index_uni(sym15__), cons_list(index_uni(sym16__), nil_index_list())))), lub_free(
                     d_ar_mat[(sym13__ - 1)][(sym14__ - 1)].coeffRef(sym15__, sym16__),
                     0, 1), "assigning variable d_ar_mat");}}}}
      Eigen::Matrix<double, -1, 1> d_simplex;
      d_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 12;
      pos__ = 1;
      current_statement__ = 12;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 12;
        assign(d_simplex, cons_list(index_uni(sym13__), nil_index_list()), context__.vals_r("d_simplex")[(pos__ - 1)], "assigning variable d_simplex");
        current_statement__ = 12;
        pos__ = (pos__ + 1);}
      current_statement__ = 12;
      assign(d_simplex, nil_index_list(), simplex_free(d_simplex), "assigning variable d_simplex");
      std::vector<Eigen::Matrix<double, -1, 1>> d_1d_simplex;
      d_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 13;
      pos__ = 1;
      current_statement__ = 13;
      for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
        current_statement__ = 13;
        for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
          current_statement__ = 13;
          assign(d_1d_simplex, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), nil_index_list())), context__.vals_r("d_1d_simplex")[(pos__ - 1)], "assigning variable d_1d_simplex");
          current_statement__ = 13;
          pos__ = (pos__ + 1);}}
      current_statement__ = 13;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 13;
        assign(d_1d_simplex, cons_list(index_uni(sym13__), nil_index_list()), simplex_free(
               d_1d_simplex[(sym13__ - 1)]), "assigning variable d_1d_simplex");
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_simplex;
      d_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 14;
      pos__ = 1;
      current_statement__ = 14;
      for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
        current_statement__ = 14;
        for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
          current_statement__ = 14;
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            current_statement__ = 14;
            for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
              current_statement__ = 14;
              assign(d_3d_simplex, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), cons_list(index_uni(sym15__), cons_list(index_uni(sym16__), nil_index_list())))), context__.vals_r("d_3d_simplex")[(pos__ - 1)], "assigning variable d_3d_simplex");
              current_statement__ = 14;
              pos__ = (pos__ + 1);}}}}
      current_statement__ = 14;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 14;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 14;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 14;
            assign(d_3d_simplex, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), cons_list(index_uni(sym15__), nil_index_list()))), simplex_free(
                   d_3d_simplex[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)]), "assigning variable d_3d_simplex");
          }}}
      Eigen::Matrix<double, -1, -1> d_cfcov_54;
      d_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      current_statement__ = 15;
      pos__ = 1;
      current_statement__ = 15;
      for (size_t sym13__ = 1; sym13__ <= 5; ++sym13__) {
        current_statement__ = 15;
        for (size_t sym14__ = 1; sym14__ <= 4; ++sym14__) {
          current_statement__ = 15;
          assign(d_cfcov_54, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), nil_index_list())), context__.vals_r("d_cfcov_54")[(1 - 1)], "assigning variable d_cfcov_54");
        }}
      current_statement__ = 15;
      assign(d_cfcov_54, nil_index_list(), cholesky_factor_free(d_cfcov_54), "assigning variable d_cfcov_54");
      Eigen::Matrix<double, -1, -1> d_cfcov_33;
      d_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      current_statement__ = 16;
      pos__ = 1;
      current_statement__ = 16;
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        current_statement__ = 16;
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          current_statement__ = 16;
          assign(d_cfcov_33, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), nil_index_list())), context__.vals_r("d_cfcov_33")[(1 - 1)], "assigning variable d_cfcov_33");
        }}
      current_statement__ = 16;
      assign(d_cfcov_33, nil_index_list(), cholesky_factor_free(d_cfcov_33), "assigning variable d_cfcov_33");
      std::vector<Eigen::Matrix<double, -1, -1>> d_cfcov_33_ar;
      d_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      current_statement__ = 17;
      pos__ = 1;
      current_statement__ = 17;
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        current_statement__ = 17;
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          current_statement__ = 17;
          for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
            current_statement__ = 17;
            assign(d_cfcov_33_ar, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), cons_list(index_uni(sym15__), nil_index_list()))), context__.vals_r("d_cfcov_33_ar")[(1 - 1)], "assigning variable d_cfcov_33_ar");
          }}}
      current_statement__ = 17;
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        current_statement__ = 17;
        assign(d_cfcov_33_ar, cons_list(index_uni(sym13__), nil_index_list()), cholesky_factor_free(
               d_cfcov_33_ar[(sym13__ - 1)]), "assigning variable d_cfcov_33_ar");
      }
      vars__.push_back(J);
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(d_real_1d_ar[(sym13__ - 1)]);}
      for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
            vars__.push_back(d_real_3d_ar[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)]);
          }}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(d_vec[(sym13__ - 1)]);}
      for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
        for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
          vars__.push_back(d_1d_vec[(sym13__ - 1)][(sym14__ - 1)]);}}
      for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
        for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
              vars__.push_back(d_3d_vec[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)][(sym16__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(d_row_vec[(sym13__ - 1)]);}
      for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
        for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
          vars__.push_back(d_1d_row_vec[(sym13__ - 1)][(sym14__ - 1)]);}}
      for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
        for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
              vars__.push_back(d_3d_row_vec[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)][(sym16__ - 1)]);
            }}}}
      for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
        for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
          for (size_t sym15__ = 1; sym15__ <= 2; ++sym15__) {
            for (size_t sym16__ = 1; sym16__ <= 3; ++sym16__) {
              vars__.push_back(d_ar_mat[(sym13__ - 1)][(sym14__ - 1)].coeffRef(sym15__, sym16__));
            }}}}
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        vars__.push_back(d_simplex[(sym13__ - 1)]);}
      for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
        for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
          vars__.push_back(d_1d_simplex[(sym13__ - 1)][(sym14__ - 1)]);}}
      for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
        for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
          for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
            for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
              vars__.push_back(d_3d_simplex[(sym13__ - 1)][(sym14__ - 1)][(sym15__ - 1)][(sym16__ - 1)]);
            }}}}
      for (size_t sym13__ = 1; sym13__ <= 5; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 4; ++sym14__) {
          vars__.push_back(d_cfcov_54.coeffRef(sym13__, sym14__));}}
      for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          vars__.push_back(d_cfcov_33.coeffRef(sym13__, sym14__));}}
      for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          for (size_t sym15__ = 1; sym15__ <= 3; ++sym15__) {
            vars__.push_back(d_cfcov_33_ar[(sym13__ - 1)].coeffRef(sym14__, sym15__));
          }}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("J");
    names__.push_back("d_real_1d_ar");
    names__.push_back("d_real_3d_ar");
    names__.push_back("d_vec");
    names__.push_back("d_1d_vec");
    names__.push_back("d_3d_vec");
    names__.push_back("d_row_vec");
    names__.push_back("d_1d_row_vec");
    names__.push_back("d_3d_row_vec");
    names__.push_back("d_ar_mat");
    names__.push_back("d_simplex");
    names__.push_back("d_1d_simplex");
    names__.push_back("d_3d_simplex");
    names__.push_back("d_cfcov_54");
    names__.push_back("d_cfcov_33");
    names__.push_back("d_cfcov_33_ar");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(4);
    
    dims__.push_back(5);
    
    dims__.push_back(2);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "J");
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_real_1d_ar" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
              {
                param_names__.push_back(std::string() + "d_real_3d_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_vec" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "d_1d_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "d_3d_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_row_vec" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "d_1d_row_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "d_3d_row_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "d_ar_mat" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_simplex" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "d_1d_simplex" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "d_3d_simplex" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          {
            param_names__.push_back(std::string() + "d_cfcov_54" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          {
            param_names__.push_back(std::string() + "d_cfcov_33" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 3; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
              {
                param_names__.push_back(std::string() + "d_cfcov_33_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
              }}
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "J");
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_real_1d_ar" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= K; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
              {
                param_names__.push_back(std::string() + "d_real_3d_ar" + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_vec" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "d_1d_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "d_3d_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_row_vec" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "d_1d_row_vec" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "d_3d_row_vec" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= 3; ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= 2; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= 5; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= 4; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "d_ar_mat" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_simplex" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
          {
            param_names__.push_back(std::string() + "d_1d_simplex" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    for (size_t sym13__ = 1; sym13__ <= (N - 1); ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            for (size_t sym15__ = 1; sym15__ <= M; ++sym15__) {
              {
                for (size_t sym16__ = 1; sym16__ <= N; ++sym16__) {
                  {
                    param_names__.push_back(std::string() + "d_3d_simplex" + '.' + std::to_string(sym16__) + '.' + std::to_string(sym15__) + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
                  }}
              }}
          }}
      }}
    for (size_t sym13__ = 1;
         sym13__ <= ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)); ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_cfcov_54" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1;
         sym13__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym13__) {
      {
        param_names__.push_back(std::string() + "d_cfcov_33" + '.' + std::to_string(sym13__));
      }}
    for (size_t sym13__ = 1;
         sym13__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym13__) {
      {
        for (size_t sym14__ = 1; sym14__ <= K; ++sym14__) {
          {
            param_names__.push_back(std::string() + "d_cfcov_33_ar" + '.' + std::to_string(sym14__) + '.' + std::to_string(sym13__));
          }}
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"J\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"d_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"d_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"d_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"d_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"d_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"d_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"d_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"d_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 3 << "}}},\"block\":\"parameters\"},{\"name\":\"d_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"d_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"d_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"d_cfcov_54\",\"type\":{\"name\":\"matrix\",\"rows\":" << 5 << ",\"cols\":" << 4 << "},\"block\":\"parameters\"},{\"name\":\"d_cfcov_33\",\"type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "},\"block\":\"parameters\"},{\"name\":\"d_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 3 << ",\"cols\":" << 3 << "}},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"J\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"d_real_1d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"d_real_3d_ar\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"parameters\"},{\"name\":\"d_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"d_1d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"d_3d_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"d_row_vec\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"d_1d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"parameters\"},{\"name\":\"d_3d_row_vec\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}}}},\"block\":\"parameters\"},{\"name\":\"d_ar_mat\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"array\",\"length\":" << 5 << ",\"element_type\":{\"name\":\"matrix\",\"rows\":" << 2 << ",\"cols\":" << 3 << "}}},\"block\":\"parameters\"},{\"name\":\"d_simplex\",\"type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "},\"block\":\"parameters\"},{\"name\":\"d_1d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "}},\"block\":\"parameters\"},{\"name\":\"d_3d_simplex\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << M << ",\"element_type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (N - 1) << "}}}},\"block\":\"parameters\"},{\"name\":\"d_cfcov_54\",\"type\":{\"name\":\"vector\",\"length\":" << ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)) << "},\"block\":\"parameters\"},{\"name\":\"d_cfcov_33\",\"type\":{\"name\":\"vector\",\"length\":" << ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)) << "},\"block\":\"parameters\"},{\"name\":\"d_cfcov_33_ar\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)) << "}},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef mother_gen_model_namespace::mother_gen_model stan_model;

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
} 